/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
}
if (! _$jscoverage['js/vs_util.js']) {
  _$jscoverage['js/vs_util.js'] = [];
  _$jscoverage['js/vs_util.js'][19] = 0;
  _$jscoverage['js/vs_util.js'][21] = 0;
  _$jscoverage['js/vs_util.js'][49] = 0;
  _$jscoverage['js/vs_util.js'][58] = 0;
  _$jscoverage['js/vs_util.js'][64] = 0;
  _$jscoverage['js/vs_util.js'][70] = 0;
  _$jscoverage['js/vs_util.js'][76] = 0;
  _$jscoverage['js/vs_util.js'][82] = 0;
  _$jscoverage['js/vs_util.js'][88] = 0;
  _$jscoverage['js/vs_util.js'][94] = 0;
  _$jscoverage['js/vs_util.js'][100] = 0;
  _$jscoverage['js/vs_util.js'][106] = 0;
  _$jscoverage['js/vs_util.js'][108] = 0;
  _$jscoverage['js/vs_util.js'][134] = 0;
  _$jscoverage['js/vs_util.js'][141] = 0;
  _$jscoverage['js/vs_util.js'][146] = 0;
  _$jscoverage['js/vs_util.js'][147] = 0;
  _$jscoverage['js/vs_util.js'][150] = 0;
  _$jscoverage['js/vs_util.js'][162] = 0;
  _$jscoverage['js/vs_util.js'][164] = 0;
  _$jscoverage['js/vs_util.js'][166] = 0;
  _$jscoverage['js/vs_util.js'][167] = 0;
  _$jscoverage['js/vs_util.js'][169] = 0;
  _$jscoverage['js/vs_util.js'][171] = 0;
  _$jscoverage['js/vs_util.js'][173] = 0;
  _$jscoverage['js/vs_util.js'][175] = 0;
  _$jscoverage['js/vs_util.js'][177] = 0;
  _$jscoverage['js/vs_util.js'][179] = 0;
  _$jscoverage['js/vs_util.js'][182] = 0;
  _$jscoverage['js/vs_util.js'][190] = 0;
  _$jscoverage['js/vs_util.js'][192] = 0;
  _$jscoverage['js/vs_util.js'][194] = 0;
  _$jscoverage['js/vs_util.js'][196] = 0;
  _$jscoverage['js/vs_util.js'][198] = 0;
  _$jscoverage['js/vs_util.js'][202] = 0;
  _$jscoverage['js/vs_util.js'][205] = 0;
  _$jscoverage['js/vs_util.js'][216] = 0;
  _$jscoverage['js/vs_util.js'][226] = 0;
  _$jscoverage['js/vs_util.js'][228] = 0;
  _$jscoverage['js/vs_util.js'][229] = 0;
  _$jscoverage['js/vs_util.js'][231] = 0;
  _$jscoverage['js/vs_util.js'][233] = 0;
  _$jscoverage['js/vs_util.js'][235] = 0;
  _$jscoverage['js/vs_util.js'][239] = 0;
  _$jscoverage['js/vs_util.js'][240] = 0;
  _$jscoverage['js/vs_util.js'][242] = 0;
  _$jscoverage['js/vs_util.js'][245] = 0;
  _$jscoverage['js/vs_util.js'][246] = 0;
  _$jscoverage['js/vs_util.js'][248] = 0;
  _$jscoverage['js/vs_util.js'][251] = 0;
  _$jscoverage['js/vs_util.js'][255] = 0;
  _$jscoverage['js/vs_util.js'][266] = 0;
  _$jscoverage['js/vs_util.js'][268] = 0;
  _$jscoverage['js/vs_util.js'][269] = 0;
  _$jscoverage['js/vs_util.js'][270] = 0;
  _$jscoverage['js/vs_util.js'][271] = 0;
  _$jscoverage['js/vs_util.js'][272] = 0;
  _$jscoverage['js/vs_util.js'][320] = 0;
  _$jscoverage['js/vs_util.js'][322] = 0;
  _$jscoverage['js/vs_util.js'][324] = 0;
  _$jscoverage['js/vs_util.js'][327] = 0;
  _$jscoverage['js/vs_util.js'][329] = 0;
  _$jscoverage['js/vs_util.js'][330] = 0;
  _$jscoverage['js/vs_util.js'][333] = 0;
  _$jscoverage['js/vs_util.js'][335] = 0;
  _$jscoverage['js/vs_util.js'][336] = 0;
  _$jscoverage['js/vs_util.js'][345] = 0;
  _$jscoverage['js/vs_util.js'][347] = 0;
  _$jscoverage['js/vs_util.js'][349] = 0;
  _$jscoverage['js/vs_util.js'][352] = 0;
  _$jscoverage['js/vs_util.js'][354] = 0;
  _$jscoverage['js/vs_util.js'][357] = 0;
  _$jscoverage['js/vs_util.js'][359] = 0;
  _$jscoverage['js/vs_util.js'][362] = 0;
  _$jscoverage['js/vs_util.js'][364] = 0;
  _$jscoverage['js/vs_util.js'][365] = 0;
  _$jscoverage['js/vs_util.js'][366] = 0;
  _$jscoverage['js/vs_util.js'][367] = 0;
  _$jscoverage['js/vs_util.js'][368] = 0;
  _$jscoverage['js/vs_util.js'][369] = 0;
  _$jscoverage['js/vs_util.js'][370] = 0;
  _$jscoverage['js/vs_util.js'][372] = 0;
  _$jscoverage['js/vs_util.js'][373] = 0;
  _$jscoverage['js/vs_util.js'][375] = 0;
  _$jscoverage['js/vs_util.js'][377] = 0;
  _$jscoverage['js/vs_util.js'][378] = 0;
  _$jscoverage['js/vs_util.js'][381] = 0;
  _$jscoverage['js/vs_util.js'][382] = 0;
  _$jscoverage['js/vs_util.js'][384] = 0;
  _$jscoverage['js/vs_util.js'][426] = 0;
  _$jscoverage['js/vs_util.js'][428] = 0;
  _$jscoverage['js/vs_util.js'][429] = 0;
  _$jscoverage['js/vs_util.js'][430] = 0;
  _$jscoverage['js/vs_util.js'][431] = 0;
  _$jscoverage['js/vs_util.js'][437] = 0;
  _$jscoverage['js/vs_util.js'][439] = 0;
  _$jscoverage['js/vs_util.js'][440] = 0;
  _$jscoverage['js/vs_util.js'][442] = 0;
  _$jscoverage['js/vs_util.js'][444] = 0;
  _$jscoverage['js/vs_util.js'][458] = 0;
  _$jscoverage['js/vs_util.js'][460] = 0;
  _$jscoverage['js/vs_util.js'][461] = 0;
  _$jscoverage['js/vs_util.js'][462] = 0;
  _$jscoverage['js/vs_util.js'][464] = 0;
  _$jscoverage['js/vs_util.js'][465] = 0;
  _$jscoverage['js/vs_util.js'][466] = 0;
  _$jscoverage['js/vs_util.js'][478] = 0;
  _$jscoverage['js/vs_util.js'][484] = 0;
  _$jscoverage['js/vs_util.js'][490] = 0;
  _$jscoverage['js/vs_util.js'][496] = 0;
  _$jscoverage['js/vs_util.js'][502] = 0;
  _$jscoverage['js/vs_util.js'][508] = 0;
  _$jscoverage['js/vs_util.js'][514] = 0;
  _$jscoverage['js/vs_util.js'][520] = 0;
  _$jscoverage['js/vs_util.js'][526] = 0;
  _$jscoverage['js/vs_util.js'][532] = 0;
  _$jscoverage['js/vs_util.js'][538] = 0;
  _$jscoverage['js/vs_util.js'][543] = 0;
  _$jscoverage['js/vs_util.js'][545] = 0;
  _$jscoverage['js/vs_util.js'][547] = 0;
  _$jscoverage['js/vs_util.js'][549] = 0;
  _$jscoverage['js/vs_util.js'][550] = 0;
  _$jscoverage['js/vs_util.js'][553] = 0;
  _$jscoverage['js/vs_util.js'][557] = 0;
  _$jscoverage['js/vs_util.js'][558] = 0;
  _$jscoverage['js/vs_util.js'][560] = 0;
  _$jscoverage['js/vs_util.js'][562] = 0;
  _$jscoverage['js/vs_util.js'][565] = 0;
  _$jscoverage['js/vs_util.js'][566] = 0;
  _$jscoverage['js/vs_util.js'][568] = 0;
  _$jscoverage['js/vs_util.js'][570] = 0;
  _$jscoverage['js/vs_util.js'][579] = 0;
  _$jscoverage['js/vs_util.js'][581] = 0;
  _$jscoverage['js/vs_util.js'][590] = 0;
  _$jscoverage['js/vs_util.js'][592] = 0;
  _$jscoverage['js/vs_util.js'][593] = 0;
  _$jscoverage['js/vs_util.js'][602] = 0;
  _$jscoverage['js/vs_util.js'][622] = 0;
  _$jscoverage['js/vs_util.js'][624] = 0;
  _$jscoverage['js/vs_util.js'][625] = 0;
  _$jscoverage['js/vs_util.js'][642] = 0;
  _$jscoverage['js/vs_util.js'][644] = 0;
  _$jscoverage['js/vs_util.js'][646] = 0;
  _$jscoverage['js/vs_util.js'][648] = 0;
  _$jscoverage['js/vs_util.js'][649] = 0;
  _$jscoverage['js/vs_util.js'][658] = 0;
  _$jscoverage['js/vs_util.js'][660] = 0;
  _$jscoverage['js/vs_util.js'][661] = 0;
  _$jscoverage['js/vs_util.js'][678] = 0;
  _$jscoverage['js/vs_util.js'][680] = 0;
  _$jscoverage['js/vs_util.js'][681] = 0;
  _$jscoverage['js/vs_util.js'][701] = 0;
  _$jscoverage['js/vs_util.js'][703] = 0;
  _$jscoverage['js/vs_util.js'][704] = 0;
  _$jscoverage['js/vs_util.js'][727] = 0;
  _$jscoverage['js/vs_util.js'][729] = 0;
  _$jscoverage['js/vs_util.js'][730] = 0;
  _$jscoverage['js/vs_util.js'][749] = 0;
  _$jscoverage['js/vs_util.js'][751] = 0;
  _$jscoverage['js/vs_util.js'][752] = 0;
  _$jscoverage['js/vs_util.js'][753] = 0;
  _$jscoverage['js/vs_util.js'][767] = 0;
  _$jscoverage['js/vs_util.js'][769] = 0;
  _$jscoverage['js/vs_util.js'][770] = 0;
  _$jscoverage['js/vs_util.js'][771] = 0;
  _$jscoverage['js/vs_util.js'][773] = 0;
  _$jscoverage['js/vs_util.js'][774] = 0;
  _$jscoverage['js/vs_util.js'][776] = 0;
  _$jscoverage['js/vs_util.js'][779] = 0;
  _$jscoverage['js/vs_util.js'][793] = 0;
  _$jscoverage['js/vs_util.js'][795] = 0;
  _$jscoverage['js/vs_util.js'][796] = 0;
  _$jscoverage['js/vs_util.js'][797] = 0;
  _$jscoverage['js/vs_util.js'][799] = 0;
  _$jscoverage['js/vs_util.js'][800] = 0;
  _$jscoverage['js/vs_util.js'][803] = 0;
  _$jscoverage['js/vs_util.js'][817] = 0;
  _$jscoverage['js/vs_util.js'][819] = 0;
  _$jscoverage['js/vs_util.js'][820] = 0;
  _$jscoverage['js/vs_util.js'][835] = 0;
  _$jscoverage['js/vs_util.js'][837] = 0;
  _$jscoverage['js/vs_util.js'][839] = 0;
  _$jscoverage['js/vs_util.js'][850] = 0;
  _$jscoverage['js/vs_util.js'][852] = 0;
  _$jscoverage['js/vs_util.js'][854] = 0;
  _$jscoverage['js/vs_util.js'][865] = 0;
  _$jscoverage['js/vs_util.js'][867] = 0;
  _$jscoverage['js/vs_util.js'][869] = 0;
  _$jscoverage['js/vs_util.js'][870] = 0;
  _$jscoverage['js/vs_util.js'][872] = 0;
  _$jscoverage['js/vs_util.js'][876] = 0;
  _$jscoverage['js/vs_util.js'][877] = 0;
  _$jscoverage['js/vs_util.js'][879] = 0;
  _$jscoverage['js/vs_util.js'][890] = 0;
  _$jscoverage['js/vs_util.js'][892] = 0;
  _$jscoverage['js/vs_util.js'][894] = 0;
  _$jscoverage['js/vs_util.js'][906] = 0;
  _$jscoverage['js/vs_util.js'][908] = 0;
  _$jscoverage['js/vs_util.js'][910] = 0;
  _$jscoverage['js/vs_util.js'][928] = 0;
  _$jscoverage['js/vs_util.js'][930] = 0;
  _$jscoverage['js/vs_util.js'][931] = 0;
  _$jscoverage['js/vs_util.js'][933] = 0;
  _$jscoverage['js/vs_util.js'][935] = 0;
  _$jscoverage['js/vs_util.js'][937] = 0;
  _$jscoverage['js/vs_util.js'][939] = 0;
  _$jscoverage['js/vs_util.js'][940] = 0;
  _$jscoverage['js/vs_util.js'][942] = 0;
  _$jscoverage['js/vs_util.js'][945] = 0;
  _$jscoverage['js/vs_util.js'][947] = 0;
  _$jscoverage['js/vs_util.js'][949] = 0;
  _$jscoverage['js/vs_util.js'][950] = 0;
  _$jscoverage['js/vs_util.js'][952] = 0;
  _$jscoverage['js/vs_util.js'][954] = 0;
  _$jscoverage['js/vs_util.js'][956] = 0;
  _$jscoverage['js/vs_util.js'][957] = 0;
  _$jscoverage['js/vs_util.js'][974] = 0;
  _$jscoverage['js/vs_util.js'][976] = 0;
  _$jscoverage['js/vs_util.js'][978] = 0;
  _$jscoverage['js/vs_util.js'][979] = 0;
  _$jscoverage['js/vs_util.js'][992] = 0;
  _$jscoverage['js/vs_util.js'][994] = 0;
  _$jscoverage['js/vs_util.js'][996] = 0;
  _$jscoverage['js/vs_util.js'][997] = 0;
  _$jscoverage['js/vs_util.js'][1013] = 0;
  _$jscoverage['js/vs_util.js'][1015] = 0;
  _$jscoverage['js/vs_util.js'][1017] = 0;
  _$jscoverage['js/vs_util.js'][1022] = 0;
  _$jscoverage['js/vs_util.js'][1024] = 0;
  _$jscoverage['js/vs_util.js'][1029] = 0;
  _$jscoverage['js/vs_util.js'][1030] = 0;
  _$jscoverage['js/vs_util.js'][1031] = 0;
  _$jscoverage['js/vs_util.js'][1033] = 0;
  _$jscoverage['js/vs_util.js'][1034] = 0;
  _$jscoverage['js/vs_util.js'][1035] = 0;
  _$jscoverage['js/vs_util.js'][1036] = 0;
  _$jscoverage['js/vs_util.js'][1037] = 0;
  _$jscoverage['js/vs_util.js'][1039] = 0;
  _$jscoverage['js/vs_util.js'][1040] = 0;
  _$jscoverage['js/vs_util.js'][1065] = 0;
  _$jscoverage['js/vs_util.js'][1067] = 0;
  _$jscoverage['js/vs_util.js'][1069] = 0;
  _$jscoverage['js/vs_util.js'][1070] = 0;
  _$jscoverage['js/vs_util.js'][1071] = 0;
  _$jscoverage['js/vs_util.js'][1073] = 0;
  _$jscoverage['js/vs_util.js'][1074] = 0;
  _$jscoverage['js/vs_util.js'][1076] = 0;
  _$jscoverage['js/vs_util.js'][1077] = 0;
  _$jscoverage['js/vs_util.js'][1078] = 0;
  _$jscoverage['js/vs_util.js'][1096] = 0;
  _$jscoverage['js/vs_util.js'][1098] = 0;
  _$jscoverage['js/vs_util.js'][1100] = 0;
  _$jscoverage['js/vs_util.js'][1102] = 0;
  _$jscoverage['js/vs_util.js'][1104] = 0;
  _$jscoverage['js/vs_util.js'][1106] = 0;
  _$jscoverage['js/vs_util.js'][1110] = 0;
  _$jscoverage['js/vs_util.js'][1112] = 0;
  _$jscoverage['js/vs_util.js'][1114] = 0;
  _$jscoverage['js/vs_util.js'][1119] = 0;
  _$jscoverage['js/vs_util.js'][1140] = 0;
  _$jscoverage['js/vs_util.js'][1142] = 0;
  _$jscoverage['js/vs_util.js'][1143] = 0;
  _$jscoverage['js/vs_util.js'][1145] = 0;
  _$jscoverage['js/vs_util.js'][1147] = 0;
  _$jscoverage['js/vs_util.js'][1149] = 0;
  _$jscoverage['js/vs_util.js'][1159] = 0;
  _$jscoverage['js/vs_util.js'][1161] = 0;
  _$jscoverage['js/vs_util.js'][1163] = 0;
  _$jscoverage['js/vs_util.js'][1164] = 0;
  _$jscoverage['js/vs_util.js'][1174] = 0;
  _$jscoverage['js/vs_util.js'][1176] = 0;
  _$jscoverage['js/vs_util.js'][1177] = 0;
  _$jscoverage['js/vs_util.js'][1178] = 0;
  _$jscoverage['js/vs_util.js'][1180] = 0;
  _$jscoverage['js/vs_util.js'][1181] = 0;
  _$jscoverage['js/vs_util.js'][1183] = 0;
  _$jscoverage['js/vs_util.js'][1184] = 0;
  _$jscoverage['js/vs_util.js'][1185] = 0;
  _$jscoverage['js/vs_util.js'][1186] = 0;
  _$jscoverage['js/vs_util.js'][1188] = 0;
  _$jscoverage['js/vs_util.js'][1189] = 0;
  _$jscoverage['js/vs_util.js'][1190] = 0;
  _$jscoverage['js/vs_util.js'][1192] = 0;
  _$jscoverage['js/vs_util.js'][1195] = 0;
  _$jscoverage['js/vs_util.js'][1198] = 0;
  _$jscoverage['js/vs_util.js'][1199] = 0;
  _$jscoverage['js/vs_util.js'][1202] = 0;
  _$jscoverage['js/vs_util.js'][1203] = 0;
  _$jscoverage['js/vs_util.js'][1204] = 0;
  _$jscoverage['js/vs_util.js'][1206] = 0;
  _$jscoverage['js/vs_util.js'][1212] = 0;
  _$jscoverage['js/vs_util.js'][1214] = 0;
  _$jscoverage['js/vs_util.js'][1215] = 0;
  _$jscoverage['js/vs_util.js'][1221] = 0;
  _$jscoverage['js/vs_util.js'][1226] = 0;
  _$jscoverage['js/vs_util.js'][1228] = 0;
  _$jscoverage['js/vs_util.js'][1229] = 0;
  _$jscoverage['js/vs_util.js'][1240] = 0;
  _$jscoverage['js/vs_util.js'][1242] = 0;
  _$jscoverage['js/vs_util.js'][1243] = 0;
  _$jscoverage['js/vs_util.js'][1245] = 0;
  _$jscoverage['js/vs_util.js'][1246] = 0;
  _$jscoverage['js/vs_util.js'][1258] = 0;
  _$jscoverage['js/vs_util.js'][1260] = 0;
  _$jscoverage['js/vs_util.js'][1261] = 0;
  _$jscoverage['js/vs_util.js'][1263] = 0;
  _$jscoverage['js/vs_util.js'][1264] = 0;
  _$jscoverage['js/vs_util.js'][1275] = 0;
  _$jscoverage['js/vs_util.js'][1277] = 0;
  _$jscoverage['js/vs_util.js'][1278] = 0;
  _$jscoverage['js/vs_util.js'][1280] = 0;
  _$jscoverage['js/vs_util.js'][1282] = 0;
  _$jscoverage['js/vs_util.js'][1284] = 0;
  _$jscoverage['js/vs_util.js'][1288] = 0;
  _$jscoverage['js/vs_util.js'][1295] = 0;
  _$jscoverage['js/vs_util.js'][1297] = 0;
  _$jscoverage['js/vs_util.js'][1301] = 0;
  _$jscoverage['js/vs_util.js'][1314] = 0;
  _$jscoverage['js/vs_util.js'][1316] = 0;
  _$jscoverage['js/vs_util.js'][1317] = 0;
  _$jscoverage['js/vs_util.js'][1319] = 0;
  _$jscoverage['js/vs_util.js'][1321] = 0;
  _$jscoverage['js/vs_util.js'][1322] = 0;
  _$jscoverage['js/vs_util.js'][1324] = 0;
  _$jscoverage['js/vs_util.js'][1326] = 0;
  _$jscoverage['js/vs_util.js'][1330] = 0;
  _$jscoverage['js/vs_util.js'][1331] = 0;
  _$jscoverage['js/vs_util.js'][1342] = 0;
  _$jscoverage['js/vs_util.js'][1344] = 0;
  _$jscoverage['js/vs_util.js'][1346] = 0;
  _$jscoverage['js/vs_util.js'][1348] = 0;
  _$jscoverage['js/vs_util.js'][1350] = 0;
  _$jscoverage['js/vs_util.js'][1360] = 0;
  _$jscoverage['js/vs_util.js'][1362] = 0;
  _$jscoverage['js/vs_util.js'][1364] = 0;
  _$jscoverage['js/vs_util.js'][1366] = 0;
  _$jscoverage['js/vs_util.js'][1368] = 0;
  _$jscoverage['js/vs_util.js'][1369] = 0;
  _$jscoverage['js/vs_util.js'][1370] = 0;
  _$jscoverage['js/vs_util.js'][1371] = 0;
  _$jscoverage['js/vs_util.js'][1372] = 0;
  _$jscoverage['js/vs_util.js'][1374] = 0;
  _$jscoverage['js/vs_util.js'][1375] = 0;
  _$jscoverage['js/vs_util.js'][1376] = 0;
  _$jscoverage['js/vs_util.js'][1377] = 0;
  _$jscoverage['js/vs_util.js'][1378] = 0;
  _$jscoverage['js/vs_util.js'][1380] = 0;
  _$jscoverage['js/vs_util.js'][1381] = 0;
  _$jscoverage['js/vs_util.js'][1383] = 0;
  _$jscoverage['js/vs_util.js'][1388] = 0;
  _$jscoverage['js/vs_util.js'][1390] = 0;
  _$jscoverage['js/vs_util.js'][1396] = 0;
  _$jscoverage['js/vs_util.js'][1398] = 0;
  _$jscoverage['js/vs_util.js'][1404] = 0;
  _$jscoverage['js/vs_util.js'][1406] = 0;
  _$jscoverage['js/vs_util.js'][1412] = 0;
  _$jscoverage['js/vs_util.js'][1414] = 0;
  _$jscoverage['js/vs_util.js'][1425] = 0;
  _$jscoverage['js/vs_util.js'][1435] = 0;
  _$jscoverage['js/vs_util.js'][1437] = 0;
  _$jscoverage['js/vs_util.js'][1439] = 0;
  _$jscoverage['js/vs_util.js'][1440] = 0;
  _$jscoverage['js/vs_util.js'][1442] = 0;
  _$jscoverage['js/vs_util.js'][1444] = 0;
  _$jscoverage['js/vs_util.js'][1445] = 0;
  _$jscoverage['js/vs_util.js'][1460] = 0;
  _$jscoverage['js/vs_util.js'][1462] = 0;
  _$jscoverage['js/vs_util.js'][1463] = 0;
  _$jscoverage['js/vs_util.js'][1464] = 0;
  _$jscoverage['js/vs_util.js'][1471] = 0;
  _$jscoverage['js/vs_util.js'][1473] = 0;
  _$jscoverage['js/vs_util.js'][1475] = 0;
  _$jscoverage['js/vs_util.js'][1476] = 0;
  _$jscoverage['js/vs_util.js'][1478] = 0;
  _$jscoverage['js/vs_util.js'][1480] = 0;
  _$jscoverage['js/vs_util.js'][1481] = 0;
  _$jscoverage['js/vs_util.js'][1483] = 0;
  _$jscoverage['js/vs_util.js'][1496] = 0;
  _$jscoverage['js/vs_util.js'][1508] = 0;
  _$jscoverage['js/vs_util.js'][1510] = 0;
  _$jscoverage['js/vs_util.js'][1512] = 0;
  _$jscoverage['js/vs_util.js'][1513] = 0;
  _$jscoverage['js/vs_util.js'][1515] = 0;
  _$jscoverage['js/vs_util.js'][1516] = 0;
  _$jscoverage['js/vs_util.js'][1519] = 0;
  _$jscoverage['js/vs_util.js'][1520] = 0;
  _$jscoverage['js/vs_util.js'][1528] = 0;
  _$jscoverage['js/vs_util.js'][1530] = 0;
  _$jscoverage['js/vs_util.js'][1531] = 0;
  _$jscoverage['js/vs_util.js'][1539] = 0;
  _$jscoverage['js/vs_util.js'][1541] = 0;
  _$jscoverage['js/vs_util.js'][1558] = 0;
  _$jscoverage['js/vs_util.js'][1560] = 0;
  _$jscoverage['js/vs_util.js'][1562] = 0;
  _$jscoverage['js/vs_util.js'][1564] = 0;
  _$jscoverage['js/vs_util.js'][1566] = 0;
  _$jscoverage['js/vs_util.js'][1567] = 0;
  _$jscoverage['js/vs_util.js'][1568] = 0;
  _$jscoverage['js/vs_util.js'][1569] = 0;
  _$jscoverage['js/vs_util.js'][1571] = 0;
  _$jscoverage['js/vs_util.js'][1573] = 0;
  _$jscoverage['js/vs_util.js'][1576] = 0;
  _$jscoverage['js/vs_util.js'][1577] = 0;
  _$jscoverage['js/vs_util.js'][1579] = 0;
  _$jscoverage['js/vs_util.js'][1581] = 0;
  _$jscoverage['js/vs_util.js'][1582] = 0;
  _$jscoverage['js/vs_util.js'][1583] = 0;
  _$jscoverage['js/vs_util.js'][1584] = 0;
  _$jscoverage['js/vs_util.js'][1585] = 0;
  _$jscoverage['js/vs_util.js'][1586] = 0;
  _$jscoverage['js/vs_util.js'][1588] = 0;
  _$jscoverage['js/vs_util.js'][1593] = 0;
  _$jscoverage['js/vs_util.js'][1595] = 0;
  _$jscoverage['js/vs_util.js'][1597] = 0;
  _$jscoverage['js/vs_util.js'][1599] = 0;
  _$jscoverage['js/vs_util.js'][1603] = 0;
  _$jscoverage['js/vs_util.js'][1605] = 0;
  _$jscoverage['js/vs_util.js'][1606] = 0;
  _$jscoverage['js/vs_util.js'][1607] = 0;
  _$jscoverage['js/vs_util.js'][1610] = 0;
  _$jscoverage['js/vs_util.js'][1614] = 0;
  _$jscoverage['js/vs_util.js'][1618] = 0;
  _$jscoverage['js/vs_util.js'][1619] = 0;
  _$jscoverage['js/vs_util.js'][1630] = 0;
  _$jscoverage['js/vs_util.js'][1635] = 0;
  _$jscoverage['js/vs_util.js'][1636] = 0;
  _$jscoverage['js/vs_util.js'][1646] = 0;
  _$jscoverage['js/vs_util.js'][1648] = 0;
  _$jscoverage['js/vs_util.js'][1651] = 0;
  _$jscoverage['js/vs_util.js'][1652] = 0;
  _$jscoverage['js/vs_util.js'][1654] = 0;
  _$jscoverage['js/vs_util.js'][1656] = 0;
  _$jscoverage['js/vs_util.js'][1658] = 0;
  _$jscoverage['js/vs_util.js'][1659] = 0;
  _$jscoverage['js/vs_util.js'][1663] = 0;
  _$jscoverage['js/vs_util.js'][1665] = 0;
  _$jscoverage['js/vs_util.js'][1668] = 0;
  _$jscoverage['js/vs_util.js'][1671] = 0;
  _$jscoverage['js/vs_util.js'][1673] = 0;
  _$jscoverage['js/vs_util.js'][1676] = 0;
  _$jscoverage['js/vs_util.js'][1680] = 0;
  _$jscoverage['js/vs_util.js'][1682] = 0;
  _$jscoverage['js/vs_util.js'][1684] = 0;
  _$jscoverage['js/vs_util.js'][1685] = 0;
  _$jscoverage['js/vs_util.js'][1742] = 0;
  _$jscoverage['js/vs_util.js'][1744] = 0;
  _$jscoverage['js/vs_util.js'][1746] = 0;
  _$jscoverage['js/vs_util.js'][1748] = 0;
  _$jscoverage['js/vs_util.js'][1749] = 0;
  _$jscoverage['js/vs_util.js'][1750] = 0;
  _$jscoverage['js/vs_util.js'][1752] = 0;
  _$jscoverage['js/vs_util.js'][1754] = 0;
  _$jscoverage['js/vs_util.js'][1756] = 0;
  _$jscoverage['js/vs_util.js'][1757] = 0;
  _$jscoverage['js/vs_util.js'][1761] = 0;
  _$jscoverage['js/vs_util.js'][1763] = 0;
  _$jscoverage['js/vs_util.js'][1768] = 0;
  _$jscoverage['js/vs_util.js'][1770] = 0;
  _$jscoverage['js/vs_util.js'][1772] = 0;
  _$jscoverage['js/vs_util.js'][1779] = 0;
}
_$jscoverage['js/vs_util.js'].source = ["<span class=\"c\">/** @license</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>window<span class=\"k\">,</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> document <span class=\"k\">=</span> window<span class=\"k\">.</span>document<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace Main ViniSketch toolkit namespace</span>","<span class=\"c\"> * @name vs</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Contains a collections of facilities, internationalization, and miscellaneous</span>","<span class=\"c\"> * utility classes and methods.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @namespace Main ViniSketch utility elements.</span>","<span class=\"c\"> * @name vs.util</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>util <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace Main ViniSketch components</span>","<span class=\"c\"> * @name vs.core</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>core <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace Main ViniSketch Data components</span>","<span class=\"c\"> * @name vs.data</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace Main ViniSketch User Interface components</span>","<span class=\"c\"> * @name vs.ui</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>ui <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace Main ViniSketch animation...</span>","<span class=\"c\"> * @name vs.fx</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>fx <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace Main ViniSketch Audio and Video...</span>","<span class=\"c\"> * @name vs.av</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>av <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace ViniSketch extensions...</span>","<span class=\"c\"> * @name vs.ext</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>ext <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace ViniSketch GUI extensions...</span>","<span class=\"c\"> * @name vs.ext.ui</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>ext<span class=\"k\">.</span>ui <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","<span class=\"c\">/**</span>","<span class=\"c\"> * @namespace ViniSketch FX extensions...</span>","<span class=\"c\"> * @name vs.ext.fx</span>","<span class=\"c\"> */</span>","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>ext<span class=\"k\">.</span>fx <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","window<span class=\"k\">.</span>vs<span class=\"k\">.</span>SUPPORT_3D_TRANSFORM <span class=\"k\">=</span>","  <span class=\"s\">'WebKitCSSMatrix'</span> <span class=\"k\">in</span> window <span class=\"k\">&amp;&amp;</span> <span class=\"s\">'m11'</span> <span class=\"k\">in</span> <span class=\"k\">new</span> WebKitCSSMatrix <span class=\"k\">()</span><span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                   </span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> vs <span class=\"k\">=</span> window<span class=\"k\">.</span>vs<span class=\"k\">,</span>","  util <span class=\"k\">=</span> vs<span class=\"k\">.</span>util<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Create our \"vsTest\" element and style that we do most feature tests on.</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> vsTestElem <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement <span class=\"k\">(</span><span class=\"s\">'vstestelem'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> vsTestStyle <span class=\"k\">=</span> vsTestElem<span class=\"k\">.</span>style<span class=\"k\">;</span>","<span class=\"k\">var</span> __date_reg_exp <span class=\"k\">=</span> <span class=\"s\">/\\/Date\\((-?\\d+)\\)\\//</span><span class=\"k\">;</span>","","<span class=\"c\">// Test which kind of transformation you can use</span>","vs<span class=\"k\">.</span>SUPPORT_CSS_TRANSFORM <span class=\"k\">=</span>","  <span class=\"k\">(</span>vsTestStyle<span class=\"k\">.</span>webkitTransform <span class=\"k\">||</span> vsTestStyle<span class=\"k\">.</span>msTransform<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * extend with __defineSetter__/__defineGetter__ compatible API</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _extend_api1 <span class=\"k\">(</span>destination<span class=\"k\">,</span> source<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> property <span class=\"k\">in</span> source<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    getter <span class=\"k\">=</span> source<span class=\"k\">.</span>__lookupGetter__ <span class=\"k\">(</span>property<span class=\"k\">);</span>","    setter <span class=\"k\">=</span> source<span class=\"k\">.</span>__lookupSetter__ <span class=\"k\">(</span>property<span class=\"k\">);</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>getter<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      destination<span class=\"k\">.</span>__defineGetter__ <span class=\"k\">(</span>property<span class=\"k\">,</span> getter<span class=\"k\">)</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>setter<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      destination<span class=\"k\">.</span>__defineSetter__ <span class=\"k\">(</span>property<span class=\"k\">,</span> setter<span class=\"k\">)</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>getter <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>setter<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      destination <span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> source <span class=\"k\">[</span>property<span class=\"k\">];</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> destination<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * extend with Object.defineProperty compatible API</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _extend_api2 <span class=\"k\">(</span>destination<span class=\"k\">,</span> source<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> property <span class=\"k\">in</span> source<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> desc <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>source<span class=\"k\">,</span> property<span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>desc <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>desc<span class=\"k\">.</span>get <span class=\"k\">||</span> desc<span class=\"k\">.</span>set<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      util<span class=\"k\">.</span>defineProperty <span class=\"k\">(</span>destination<span class=\"k\">,</span> property<span class=\"k\">,</span> desc<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      destination <span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> source <span class=\"k\">[</span>property<span class=\"k\">];</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> destination<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Copies all properties from the source to the destination object.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} destination The object to receive the new properties.</span>","<span class=\"c\"> * @param {Object} source The object whose properties will be duplicated.</span>","<span class=\"c\"> **/</span>","vs<span class=\"k\">.</span>util<span class=\"k\">.</span>extend <span class=\"k\">=</span> <span class=\"k\">(</span>Object<span class=\"k\">.</span>defineProperty<span class=\"k\">)?</span>_extend_api2<span class=\"k\">:</span>_extend_api1<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Extends a the prototype of a object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} destination The Class to receive the new properties.</span>","<span class=\"c\"> * @param {Object} source The Class whose properties will be duplicated.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">var</span> extendClass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">,</span> extension<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>obj <span class=\"k\">||</span> <span class=\"k\">!</span>extension<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">.</span>prototype <span class=\"k\">||</span> <span class=\"k\">!</span>extension<span class=\"k\">.</span>prototype<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">try</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>Object<span class=\"k\">.</span>__proto__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      obj<span class=\"k\">.</span>prototype<span class=\"k\">.</span>__proto__ <span class=\"k\">=</span> extension<span class=\"k\">.</span>prototype<span class=\"k\">;</span>      ","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> proto <span class=\"k\">=</span> obj<span class=\"k\">.</span>prototype<span class=\"k\">;</span>","      obj<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">new</span> extension <span class=\"k\">();</span>","","      util<span class=\"k\">.</span>extend <span class=\"k\">(</span>obj<span class=\"k\">.</span>prototype<span class=\"k\">,</span> proto<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">.</span>_properties_<span class=\"k\">)</span> obj<span class=\"k\">.</span>_properties_ <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>extension<span class=\"k\">.</span>_properties_<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      obj<span class=\"k\">.</span>_properties_ <span class=\"k\">=</span> obj<span class=\"k\">.</span>_properties_<span class=\"k\">.</span>concat <span class=\"k\">(</span>extension<span class=\"k\">.</span>_properties_<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">.</span>message <span class=\"k\">());</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Free a ViniSketch object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} obj the object to free</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> free <span class=\"k\">(</span>obj<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>_free<span class=\"k\">)</span> <span class=\"k\">{</span> obj<span class=\"k\">.</span>_free <span class=\"k\">();</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>destructor<span class=\"k\">)</span> <span class=\"k\">{</span> obj<span class=\"k\">.</span>destructor <span class=\"k\">();</span> <span class=\"k\">}</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span>obj<span class=\"k\">);</span>","  obj <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Defines a new property directly on an object, or modifies an existing</span>","<span class=\"c\"> * property on an object.&lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Property descriptors present in objects come in two main flavors: data</span>","<span class=\"c\"> * descriptors and accessor descriptors. A data descriptor is a property that</span>","<span class=\"c\"> * has a value, which may or may not be writable. An accessor descriptor is a</span>","<span class=\"c\"> * property described by a getter-setter pair of functions. A descriptor must be</span>","<span class=\"c\"> * one of these two flavors; it cannot be both. All descriptors regardless of</span>","<span class=\"c\"> * flavor include the configurable and enumerable fields.&lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * A property descriptor is an object with the following fields:</span>","<span class=\"c\"> * &lt;ul&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;value&lt;/b&gt; The value associated with the property. (data descriptors</span>","<span class=\"c\"> * only). &lt;br/&gt;&lt;i&gt;Defaults to undefined.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;writable&lt;/b&gt; True if and only if the value associated with the</span>","<span class=\"c\"> * property may be changed. (data descriptors only).&lt;br/&gt;</span>","<span class=\"c\"> * &lt;i&gt;Defaults to false.&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;get&lt;/b&gt; A function which serves as a getter for the property, or</span>","<span class=\"c\"> * undefined if there is no getter. (accessor descriptors only).&lt;br/&gt;</span>","<span class=\"c\"> * &lt;i&gt;Defaults to undefined.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;set&lt;/b&gt; A function which serves as a setter for the property, or</span>","<span class=\"c\"> * undefined if there is no setter. (accessor descriptors only).&lt;br/&gt;</span>","<span class=\"c\"> * &lt;i&gt;Defaults to undefined.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;configurable&lt;/b&gt; True if and only if the type of this property</span>","<span class=\"c\"> * descriptor may be changed and if the property may be deleted from the</span>","<span class=\"c\"> * corresponding object.&lt;br/&gt;&lt;i&gt;Defaults to true.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;enumerable&lt;/b&gt; True if and only if this property shows up during</span>","<span class=\"c\"> * enumeration of the properties on the corresponding object. &lt;br/&gt;</span>","<span class=\"c\"> * Defaults to true.&lt;/i&gt;&lt;/ol&gt;&lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} obj The object on which to define the property.</span>","<span class=\"c\"> * @param {String} prop_name The name of the property to be defined or modified.</span>","<span class=\"c\"> * @param {Object} desc The descriptor for the property being defined or</span>","<span class=\"c\"> * modified</span>","<span class=\"c\"> */</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * defineProperty with __defineSetter__/__defineGetter__ API</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _defineProperty_api1 <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> desc<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">function</span> hasProperty <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">.</span>call <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"set\"</span><span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> s <span class=\"k\">=</span> desc<span class=\"k\">.</span>set<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction <span class=\"k\">(</span>s<span class=\"k\">))</span> obj<span class=\"k\">.</span>__defineSetter__<span class=\"k\">(</span>prop_name<span class=\"k\">,</span> s<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"get\"</span><span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> s <span class=\"k\">=</span> desc<span class=\"k\">.</span>get<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction <span class=\"k\">(</span>s<span class=\"k\">))</span> obj<span class=\"k\">.</span>__defineGetter__<span class=\"k\">(</span>prop_name<span class=\"k\">,</span> s<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * defineProperty with Object.defineProperty API</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _defineProperty_api2 <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> desc<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">function</span> hasProperty <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">.</span>call <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> desc <span class=\"k\">!=</span> <span class=\"s\">\"object\"</span> <span class=\"k\">||</span> desc <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError <span class=\"k\">(</span><span class=\"s\">\"bad desc\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> prop_name <span class=\"k\">!=</span> <span class=\"s\">\"string\"</span> <span class=\"k\">||</span> prop_name <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError <span class=\"k\">(</span><span class=\"s\">\"bad property name\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> d <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"enumerable\"</span><span class=\"k\">))</span> d<span class=\"k\">.</span>enumerable <span class=\"k\">=</span> <span class=\"k\">!!</span>desc<span class=\"k\">.</span>enumerable<span class=\"k\">;</span>","  <span class=\"k\">else</span> d<span class=\"k\">.</span>enumerable <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> ","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"configurable\"</span><span class=\"k\">))</span> d<span class=\"k\">.</span>configurable <span class=\"k\">=</span> <span class=\"k\">!!</span>desc<span class=\"k\">.</span>configurable<span class=\"k\">;</span>","  <span class=\"k\">else</span> d<span class=\"k\">.</span>configurable <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> ","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"value\"</span><span class=\"k\">))</span> d<span class=\"k\">.</span>value <span class=\"k\">=</span> desc<span class=\"k\">.</span>value<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"writable\"</span><span class=\"k\">))</span> d<span class=\"k\">.</span>writable <span class=\"k\">=</span> <span class=\"k\">!!</span>desc<span class=\"k\">.</span>writable<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"get\"</span><span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> g <span class=\"k\">=</span> desc<span class=\"k\">.</span>get<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction <span class=\"k\">(</span>g<span class=\"k\">))</span> d<span class=\"k\">.</span>get <span class=\"k\">=</span> g<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>hasProperty <span class=\"k\">(</span>desc<span class=\"k\">,</span> <span class=\"s\">\"set\"</span><span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> s <span class=\"k\">=</span> desc<span class=\"k\">.</span>set<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isFunction <span class=\"k\">(</span>s<span class=\"k\">))</span> d<span class=\"k\">.</span>set <span class=\"k\">=</span> s<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">((</span><span class=\"s\">\"get\"</span> <span class=\"k\">in</span> d <span class=\"k\">||</span> <span class=\"s\">\"set\"</span> <span class=\"k\">in</span> d<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span><span class=\"s\">\"value\"</span> <span class=\"k\">in</span> d <span class=\"k\">||</span> <span class=\"s\">\"writable\"</span> <span class=\"k\">in</span> d<span class=\"k\">))</span>","    <span class=\"k\">throw</span> <span class=\"k\">new</span> TypeError<span class=\"k\">(</span><span class=\"s\">\"identity-confused descriptor\"</span><span class=\"k\">);</span>","","  Object<span class=\"k\">.</span>defineProperty <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> d<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Defines a new property directly on the object's prototype, or modifies an </span>","<span class=\"c\"> * existing property on an object's prototype.&lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Property descriptors present in objects come in two main flavors: data</span>","<span class=\"c\"> * descriptors and accessor descriptors. A data descriptor is a property that</span>","<span class=\"c\"> * has a value, which may or may not be writable. An accessor descriptor is a</span>","<span class=\"c\"> * property described by a getter-setter pair of functions. A descriptor must be</span>","<span class=\"c\"> * one of these two flavors; it cannot be both. All descriptors regardless of</span>","<span class=\"c\"> * flavor include the configurable and enumerable fields.&lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * A property descriptor is an object with the following fields:</span>","<span class=\"c\"> * &lt;ul&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;value&lt;/b&gt; The value associated with the property. (data descriptors</span>","<span class=\"c\"> * only). &lt;br/&gt;&lt;i&gt;Defaults to undefined.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;writable&lt;/b&gt; True if and only if the value associated with the</span>","<span class=\"c\"> * property may be changed. (data descriptors only).&lt;br/&gt;</span>","<span class=\"c\"> * &lt;i&gt;Defaults to false.&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;get&lt;/b&gt; A function which serves as a getter for the property, or</span>","<span class=\"c\"> * undefined if there is no getter. (accessor descriptors only).&lt;br/&gt;</span>","<span class=\"c\"> * &lt;i&gt;Defaults to undefined.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;set&lt;/b&gt; A function which serves as a setter for the property, or</span>","<span class=\"c\"> * undefined if there is no setter. (accessor descriptors only).&lt;br/&gt;</span>","<span class=\"c\"> * &lt;i&gt;Defaults to undefined.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;configurable&lt;/b&gt; True if and only if the type of this property</span>","<span class=\"c\"> * descriptor may be changed and if the property may be deleted from the</span>","<span class=\"c\"> * corresponding object.&lt;br/&gt;&lt;i&gt;Defaults to true.&lt;/i&gt;&lt;/ol&gt;</span>","<span class=\"c\"> * &lt;ol&gt; &lt;b&gt;enumerable&lt;/b&gt; True if and only if this property shows up during</span>","<span class=\"c\"> * enumeration of the properties on the corresponding object. &lt;br/&gt;</span>","<span class=\"c\"> * Defaults to true.&lt;/i&gt;&lt;/ol&gt;&lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} the_class The object's prototype on which to define the </span>","<span class=\"c\"> * property.</span>","<span class=\"c\"> * @param {String} prop_name The name of the property to be defined or modified.</span>","<span class=\"c\"> * @param {Object} desc The descriptor for the property being defined or</span>","<span class=\"c\"> * modified</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> defineClassProperty <span class=\"k\">(</span>the_class<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> desc<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>desc<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>the_class<span class=\"k\">.</span>_properties_<span class=\"k\">)</span> the_class<span class=\"k\">.</span>_properties_ <span class=\"k\">=</span> <span class=\"k\">[];</span>","  util<span class=\"k\">.</span>defineProperty <span class=\"k\">(</span>the_class<span class=\"k\">.</span>prototype<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> desc<span class=\"k\">);</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>desc<span class=\"k\">.</span>enumerable <span class=\"k\">!=</span> <span class=\"k\">false</span><span class=\"k\">)</span> the_class<span class=\"k\">.</span>_properties_<span class=\"k\">.</span>push <span class=\"k\">(</span>prop_name<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> _keys <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> Object<span class=\"k\">.</span>keys <span class=\"k\">===</span> <span class=\"s\">'function'</span><span class=\"k\">)?</span>Object<span class=\"k\">.</span>keys<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>o<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> array <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">(),</span> key<span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> o<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">.</span>call <span class=\"k\">(</span>o<span class=\"k\">,</span> key<span class=\"k\">))</span> <span class=\"k\">{</span> array<span class=\"k\">.</span>push <span class=\"k\">(</span>key<span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> array<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Defines new or modifies existing properties directly on an 'class'.&lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @see vs.util.defineClassProperty</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} the_class The 'class' on which to define the property.</span>","<span class=\"c\"> * @param {Object} properties An object whose own enumerable properties</span>","<span class=\"c\"> *   constitute descriptors for the properties to be defined or modified.</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> defineClassProperties <span class=\"k\">(</span>the_class<span class=\"k\">,</span> properties<span class=\"k\">)</span>","<span class=\"k\">{</span>","  properties <span class=\"k\">=</span> Object <span class=\"k\">(</span>properties<span class=\"k\">);</span>  ","  <span class=\"k\">var</span> keys <span class=\"k\">=</span> _keys <span class=\"k\">(</span>properties<span class=\"k\">);</span>  ","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> keys<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> prop_name <span class=\"k\">=</span> keys<span class=\"k\">[</span>i<span class=\"k\">]</span>","    <span class=\"k\">var</span> desc <span class=\"k\">=</span> properties<span class=\"k\">[</span>keys<span class=\"k\">[</span>i<span class=\"k\">]];</span>","    defineClassProperty <span class=\"k\">(</span>the_class<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> desc<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                    Object management</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","NULL_TYPE <span class=\"k\">=</span> <span class=\"s\">'Null'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","UNDEFINED_TYPE <span class=\"k\">=</span> <span class=\"s\">'Undefined'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","BOOLEAN_TYPE <span class=\"k\">=</span> <span class=\"s\">'Boolean'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","NUMBER_TYPE <span class=\"k\">=</span> <span class=\"s\">'Number'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","STRING_TYPE <span class=\"k\">=</span> <span class=\"s\">'String'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","OBJECT_TYPE <span class=\"k\">=</span> <span class=\"s\">'Object'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","BOOLEAN_CLASS <span class=\"k\">=</span> <span class=\"s\">'[object Boolean]'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","NUMBER_CLASS <span class=\"k\">=</span> <span class=\"s\">'[object Number]'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","STRING_CLASS <span class=\"k\">=</span> <span class=\"s\">'[object String]'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","ARRAY_CLASS <span class=\"k\">=</span> <span class=\"s\">'[object Array]'</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","OBJECT_CLASS <span class=\"k\">=</span> <span class=\"s\">'[object Object]'</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> clone <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> destination<span class=\"k\">;</span>","","  <span class=\"k\">switch</span> <span class=\"k\">(</span>object<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">case</span> <span class=\"k\">null</span><span class=\"k\">:</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">case</span> undefined<span class=\"k\">:</span> <span class=\"k\">return</span> undefined<span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">switch</span> <span class=\"k\">(</span>_toString<span class=\"k\">.</span>call <span class=\"k\">(</span>object<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">case</span> OBJECT_CLASS<span class=\"k\">:</span>","    <span class=\"k\">case</span> OBJECT_TYPE<span class=\"k\">:</span>","      destination <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> property <span class=\"k\">in</span> object<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        destination<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> clone <span class=\"k\">(</span>object <span class=\"k\">[</span>property<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> destination<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","      ","    <span class=\"k\">case</span> ARRAY_CLASS<span class=\"k\">:</span>","      destination <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> object<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        destination <span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> clone <span class=\"k\">(</span>object <span class=\"k\">[</span>i<span class=\"k\">]);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> destination<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","","    <span class=\"k\">case</span> BOOLEAN_TYPE<span class=\"k\">:</span>","    <span class=\"k\">case</span> NUMBER_TYPE<span class=\"k\">:</span>","    <span class=\"k\">case</span> STRING_TYPE<span class=\"k\">:</span>","    <span class=\"k\">case</span> BOOLEAN_CLASS<span class=\"k\">:</span>","    <span class=\"k\">case</span> NUMBER_CLASS<span class=\"k\">:</span>","    <span class=\"k\">case</span> STRING_CLASS<span class=\"k\">:</span>","    <span class=\"k\">default</span><span class=\"k\">:</span>","      <span class=\"k\">return</span> object<span class=\"k\">;</span> <span class=\"k\">break</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns a JSON string.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} value The object to be serialized.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> toJSON <span class=\"k\">(</span>value<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>value<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                    Testing methods</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> **/</span>","<span class=\"k\">var</span> _toString <span class=\"k\">=</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns `true` if `object` is a DOM node of type 1; `false` otherwise.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  vs.util.isElement(new Element('div'));</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  vs.util.isElement(document.createElement('div'));</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isElement(document.createTextNode('foo'));</span>","<span class=\"c\"> *  //-&gt; false</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object The object to test.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isElement <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">!!(</span>object <span class=\"k\">&amp;&amp;</span> object<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","  ","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns `true` if `object` is an [[Array]]; `false` otherwise.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  vs.util.isArray([]);</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isArray({ });</span>","<span class=\"c\"> *  //-&gt; false</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object The object to test.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isArray <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> Array<span class=\"k\">.</span>isArray <span class=\"k\">==</span> <span class=\"s\">'function'</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> Array<span class=\"k\">.</span>isArray <span class=\"k\">(</span>object<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> _toString<span class=\"k\">.</span>call <span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">===</span> ARRAY_CLASS<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns `true` if `object` is an Function; `false` otherwise.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object The object to test.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isFunction <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">typeof</span> object <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns `true` if `object` is an String; `false` otherwise.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  vs.util.isString (\"qwe\");</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isString (123);</span>","<span class=\"c\"> *  //-&gt; false</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object The object to test.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isString <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> _toString<span class=\"k\">.</span>call <span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">===</span> STRING_CLASS<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns `true` if `object` is an Number; `false` otherwise.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  vs.util.isNumber (123);</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isNumber (1.23);</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isNumber (\"123\");</span>","<span class=\"c\"> *  //-&gt; false</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object The object to test.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isNumber <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> _toString<span class=\"k\">.</span>call <span class=\"k\">(</span>object<span class=\"k\">)</span> <span class=\"k\">===</span> NUMBER_CLASS<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns `true` if `object` is of type `undefined`; `false` otherwise.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  vs.util.isUndefined ();</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isUndefined (undefined);</span>","<span class=\"c\"> *  //-&gt; true</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isUndefined (null);</span>","<span class=\"c\"> *  //-&gt; false</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  vs.util.isUndefined (0);</span>","<span class=\"c\"> *  //-&gt; false</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object The object to test.</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isUndefined <span class=\"k\">(</span>object<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">typeof</span> object <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                    Element Class testing</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Checks whether element has the given CSS className.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  elem.hasClassName ('selected');</span>","<span class=\"c\"> *  // -&gt; true | false</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} className the className to check</span>","<span class=\"c\"> * @return {Boolean} true if the element has the given className</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> hasClassName <span class=\"k\">(</span>element<span class=\"k\">,</span> className<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>element<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> elementClassName <span class=\"k\">=</span> element<span class=\"k\">.</span>className<span class=\"k\">;</span>","  <span class=\"k\">return</span> <span class=\"k\">(</span>elementClassName<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>elementClassName <span class=\"k\">===</span> className <span class=\"k\">||</span>","    <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">\"(^|</span><span class=\"t\">\\\\</span><span class=\"s\">s)\"</span> <span class=\"k\">+</span> className <span class=\"k\">+</span> <span class=\"s\">\"(</span><span class=\"t\">\\\\</span><span class=\"s\">s|$)\"</span><span class=\"k\">).</span>test<span class=\"k\">(</span>elementClassName<span class=\"k\">)));</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Adds a CSS classname to Element.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  elem.addClassName ('selected');</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} className the className to add</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> addClassName <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> element <span class=\"k\">=</span> arguments <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> className<span class=\"k\">,</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>element<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    className <span class=\"k\">=</span> arguments <span class=\"k\">[</span>i<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>hasClassName<span class=\"k\">(</span>element<span class=\"k\">,</span> className<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      element<span class=\"k\">.</span>className <span class=\"k\">+=</span> <span class=\"k\">(</span>element<span class=\"k\">.</span>className <span class=\"k\">?</span> <span class=\"s\">' '</span> <span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">+</span> className<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> element<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Removes element&#226;&#128;&#153;s CSS className</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  elem.removeClassName ('selected');</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} className the className to remove</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> removeClassName <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> element <span class=\"k\">=</span> arguments <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> className<span class=\"k\">,</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>element<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    className <span class=\"k\">=</span> arguments <span class=\"k\">[</span>i<span class=\"k\">];</span>","    element<span class=\"k\">.</span>className <span class=\"k\">=</span> strip <span class=\"k\">(</span>element<span class=\"k\">.</span>className<span class=\"k\">.</span>replace <span class=\"k\">(</span>","      <span class=\"k\">new</span> RegExp<span class=\"k\">(</span><span class=\"s\">\"(^|</span><span class=\"t\">\\\\</span><span class=\"s\">s+)\"</span> <span class=\"k\">+</span> className <span class=\"k\">+</span> <span class=\"s\">\"(</span><span class=\"t\">\\\\</span><span class=\"s\">s+|$)\"</span><span class=\"k\">),</span> <span class=\"s\">' '</span><span class=\"k\">));</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> element<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Toggles element&#226;&#128;&#153;s CSS className</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  elem.toggleClassName ('selected');</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} className the className </span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> toggleClassName <span class=\"k\">(</span>element<span class=\"k\">,</span> className<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>element<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">return</span> hasClassName<span class=\"k\">(</span>element<span class=\"k\">,</span> className<span class=\"k\">)</span> <span class=\"k\">?</span>","    removeClassName<span class=\"k\">(</span>element<span class=\"k\">,</span> className<span class=\"k\">):</span> addClassName<span class=\"k\">(</span>element<span class=\"k\">,</span> className<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                    String manipulation</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * HTML-encodes a string and returns the encoded string.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} str String The string</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> htmlEncode <span class=\"k\">(</span>str<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isString <span class=\"k\">(</span>str<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> str<span class=\"k\">.</span>replace <span class=\"k\">(</span><span class=\"s\">/&amp;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;amp;\"</span><span class=\"k\">).</span>","    replace<span class=\"k\">(</span><span class=\"s\">/&lt;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;lt;\"</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/&gt;/g</span><span class=\"k\">,</span> <span class=\"s\">\"&amp;gt;\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Strips all leading and trailing whitespace from a string.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} str String The string</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> strip <span class=\"k\">(</span>str<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isString <span class=\"k\">(</span>str<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> str<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/^\\s+/</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/\\s+$/</span><span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Converts a string separated by dashes into a camelCase equivalent</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} str String The string</span>","<span class=\"c\"> * @return {String} the result</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> camelize <span class=\"k\">(</span>str<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isString <span class=\"k\">(</span>str<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","  ","  <span class=\"k\">var</span> parts <span class=\"k\">=</span> str<span class=\"k\">.</span>split <span class=\"k\">(</span><span class=\"s\">'-'</span><span class=\"k\">),</span> len <span class=\"k\">=</span> parts<span class=\"k\">.</span>length<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>len <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> parts <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span> <span class=\"k\">}</span>","","  <span class=\"k\">var</span> camelized <span class=\"k\">=</span> str<span class=\"k\">.</span>charAt <span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'-'</span>","    <span class=\"k\">?</span> parts <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>charAt <span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>toUpperCase <span class=\"k\">()</span> <span class=\"k\">+</span> parts <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>substring <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">:</span> parts <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    camelized <span class=\"k\">+=</span> parts<span class=\"k\">[</span>i<span class=\"k\">].</span>charAt <span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>toUpperCase<span class=\"k\">()</span> <span class=\"k\">+</span> parts<span class=\"k\">[</span>i<span class=\"k\">].</span>substring <span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","","  <span class=\"k\">return</span> camelized<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Converts a string separated by dashes into a camelCase equivalent</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} str String The string</span>","<span class=\"c\"> * @return {String} the result</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> capitalize <span class=\"k\">(</span>str<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isString <span class=\"k\">(</span>str<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> str<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">).</span>toUpperCase<span class=\"k\">()</span> <span class=\"k\">+</span> str<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>toLowerCase<span class=\"k\">();</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Converts a camelized string into a series of words separated by an </span>","<span class=\"c\"> *  underscore (_).</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} str String The string</span>","<span class=\"c\"> * @return {String} the result</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> underscore <span class=\"k\">(</span>str<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isString <span class=\"k\">(</span>str<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","","  <span class=\"k\">return</span> str<span class=\"k\">.</span>replace <span class=\"k\">(</span><span class=\"s\">/::/g</span><span class=\"k\">,</span> <span class=\"s\">'/'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>replace <span class=\"k\">(</span><span class=\"s\">/([A-Z]+)([A-Z][a-z])/g</span><span class=\"k\">,</span> <span class=\"s\">'$1_$2'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>replace <span class=\"k\">(</span><span class=\"s\">/([a-z\\d])([A-Z])/g</span><span class=\"k\">,</span> <span class=\"s\">'$1_$2'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>replace <span class=\"k\">(</span><span class=\"s\">/-/g</span><span class=\"k\">,</span> <span class=\"s\">'_'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>toLowerCase <span class=\"k\">();</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Parse a json string. &lt;p/&gt;</span>","<span class=\"c\"> *  This function use the JSON.parse function but it manage also </span>","<span class=\"c\"> *  Date parsing wich is not managed by the JSON.parse</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *  @ignore</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} str String The string</span>","<span class=\"c\"> * @return {Object} the result</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> parseJSON <span class=\"k\">(</span>json<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>json<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> temp <span class=\"k\">=</span> JSON<span class=\"k\">.</span>parse <span class=\"k\">(</span>json<span class=\"k\">);</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(!</span>__date_reg_exp<span class=\"k\">.</span>test <span class=\"k\">(</span>json<span class=\"k\">))</span> <span class=\"k\">return</span> temp<span class=\"k\">;</span>","  ","  <span class=\"k\">function</span> manageDate <span class=\"k\">(</span>obj<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>isString <span class=\"k\">(</span>obj<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> __date_reg_exp<span class=\"k\">.</span>exec <span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>result <span class=\"k\">&amp;&amp;</span> result <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"c\">// JSON Date -&gt; Date generation</span>","      <span class=\"k\">{</span>","        obj <span class=\"k\">=</span> <span class=\"k\">new</span> Date <span class=\"k\">(</span>parseInt <span class=\"k\">(</span>result <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]));</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>isArray <span class=\"k\">(</span>obj<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> obj<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span> obj <span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> manageDate <span class=\"k\">(</span>obj <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> Date<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> obj<span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> Object<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span> obj <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> manageDate <span class=\"k\">(</span>obj <span class=\"k\">[</span>key<span class=\"k\">]);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> manageDate <span class=\"k\">(</span>temp<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                    Element management</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns the height of `element`.&lt;br/&gt;</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  This method returns correct values on elements whose display is set to</span>","<span class=\"c\"> *  `none` either in an inline style rule or in an CSS stylesheet.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> *\t@returns {Number} the height</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> getElementHeight <span class=\"k\">(</span>elem<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> getElementDimensions <span class=\"k\">(</span>elem<span class=\"k\">).</span>height<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns the width of `element`.&lt;br/&gt;</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  This method returns correct values on elements whose display is set to</span>","<span class=\"c\"> *  `none` either in an inline style rule or in an CSS stylesheet.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> *\t@returns {Number} the width</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> getElementWidth <span class=\"k\">(</span>elem<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> getElementDimensions <span class=\"k\">(</span>elem<span class=\"k\">).</span>width<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Finds the computed width and height of `element` and returns them as</span>","<span class=\"c\"> *  key/value pairs of an object.&lt;br/&gt;</span>","<span class=\"c\"> *  &lt;p/&gt;</span>","<span class=\"c\"> *  For backwards-compatibility, these dimensions represent the dimensions</span>","<span class=\"c\"> *  of the element's \"border box\" (including CSS padding and border).&lt;br/&gt; This</span>","<span class=\"c\"> *  is equivalent to the built-in `offsetWidth` and `offsetHeight`</span>","<span class=\"c\"> *  browser properties.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> *\t@returns {Object} the key/value width &amp; height</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> getElementDimensions <span class=\"k\">(</span>elem<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","  <span class=\"k\">var</span> display <span class=\"k\">=</span> getElementStyle <span class=\"k\">(</span>elem<span class=\"k\">,</span> <span class=\"s\">'display'</span><span class=\"k\">),</span>","    els <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">,</span> originalVisibility <span class=\"k\">=</span> els<span class=\"k\">.</span>visibility<span class=\"k\">,</span>","    originalPosition <span class=\"k\">=</span> els<span class=\"k\">.</span>position<span class=\"k\">,</span> originalDisplay <span class=\"k\">=</span> els<span class=\"k\">.</span>display<span class=\"k\">,</span>","    originalWidth <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> originalHeight <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    ","  <span class=\"k\">if</span> <span class=\"k\">(</span>display <span class=\"k\">!==</span> <span class=\"s\">'none'</span> <span class=\"k\">&amp;&amp;</span> display <span class=\"k\">!==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"c\">// Safari bug</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">{</span>width<span class=\"k\">:</span> elem<span class=\"k\">.</span>offsetWidth<span class=\"k\">,</span> height<span class=\"k\">:</span> elem<span class=\"k\">.</span>offsetHeight<span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"c\">// All *Width and *Height properties give 0 on elements with display none,</span>","  <span class=\"c\">// so enable the element temporarily</span>","    ","  els<span class=\"k\">.</span>visibility <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","  els<span class=\"k\">.</span>position <span class=\"k\">=</span> <span class=\"s\">'absolute'</span><span class=\"k\">;</span>","  els<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">'block'</span><span class=\"k\">;</span>","  ","  originalWidth <span class=\"k\">=</span> elem<span class=\"k\">.</span>clientWidth<span class=\"k\">;</span>","  originalHeight <span class=\"k\">=</span> elem<span class=\"k\">.</span>clientHeight<span class=\"k\">;</span>","  els<span class=\"k\">.</span>display <span class=\"k\">=</span> originalDisplay<span class=\"k\">;</span>","  els<span class=\"k\">.</span>position <span class=\"k\">=</span> originalPosition<span class=\"k\">;</span>","  els<span class=\"k\">.</span>visibility <span class=\"k\">=</span> originalVisibility<span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> <span class=\"k\">{</span>width<span class=\"k\">:</span> originalWidth<span class=\"k\">,</span> height<span class=\"k\">:</span> originalHeight<span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Returns the given CSS property value of `element`.&lt;br/&gt; The property can be</span>","<span class=\"c\"> *  specified in either its CSS form (`font-size`) or its camelized form</span>","<span class=\"c\"> *  (`fontSize`).&lt;br/&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  This method looks up the CSS property of an element whether it was</span>","<span class=\"c\"> *  applied inline or in a stylesheet. It works around browser inconsistencies</span>","<span class=\"c\"> *  regarding `float`, `opacity`, which returns a value between `0`</span>","<span class=\"c\"> *  (fully transparent) and `1` (fully opaque), position properties</span>","<span class=\"c\"> *  (`left`, `top`, `right` and `bottom`) and when getting the dimensions</span>","<span class=\"c\"> *  (`width` or `height`) of hidden elements.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  getElementStyle (elem, 'fontSize');</span>","<span class=\"c\"> *  // -&gt; '12px'</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {String} style The style to find</span>","<span class=\"c\"> *\t@returns {Object} the key/value width &amp; height</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> getElementStyle <span class=\"k\">(</span>elem<span class=\"k\">,</span> style<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","  ","  style <span class=\"k\">=</span> style <span class=\"k\">===</span> <span class=\"s\">'float'</span> <span class=\"k\">?</span> <span class=\"s\">'cssFloat'</span> <span class=\"k\">:</span> camelize <span class=\"k\">(</span>style<span class=\"k\">);</span>","  <span class=\"k\">var</span> value <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">[</span>style<span class=\"k\">],</span> css<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>value <span class=\"k\">||</span> value <span class=\"k\">===</span> <span class=\"s\">'auto'</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    css <span class=\"k\">=</span> document<span class=\"k\">.</span>defaultView<span class=\"k\">.</span>getComputedStyle <span class=\"k\">(</span>elem<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","    value <span class=\"k\">=</span> css <span class=\"k\">?</span> css<span class=\"k\">[</span>style<span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>style <span class=\"k\">===</span> <span class=\"s\">'opacity'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> value <span class=\"k\">?</span> parseFloat <span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"s\">1.0</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">return</span> value <span class=\"k\">===</span> <span class=\"s\">'auto'</span> <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Modifies `element`'s CSS style properties. Styles are passed as a hash of</span>","<span class=\"c\"> *  property-value pairs in which the properties are specified in their</span>","<span class=\"c\"> *  camelized form.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> * setElementStyle ({color: 'red', display: 'block'});</span>","<span class=\"c\"> * // add/set color and display properties</span>","<span class=\"c\"> * setElementStyle ({color: undefined});</span>","<span class=\"c\"> * // remove color property</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {Object} style The style to modify</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> setElementStyle <span class=\"k\">(</span>elem<span class=\"k\">,</span> styles<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","  ","  <span class=\"k\">var</span> elementStyle <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">,</span> property<span class=\"k\">;</span>","","  <span class=\"k\">for</span> <span class=\"k\">(</span>property <span class=\"k\">in</span> styles<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>property <span class=\"k\">===</span> <span class=\"s\">'opacity'</span><span class=\"k\">)</span>","    <span class=\"k\">{</span> ","      setElementOpacity <span class=\"k\">(</span>elem<span class=\"k\">,</span> styles<span class=\"k\">[</span>property<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>styles <span class=\"k\">[</span>property<span class=\"k\">])</span>","      <span class=\"k\">{</span>","        elementStyle<span class=\"k\">.</span>removeProperty <span class=\"k\">(</span>property<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      elementStyle<span class=\"k\">[(</span>property <span class=\"k\">===</span> <span class=\"s\">'float'</span> <span class=\"k\">||</span> property <span class=\"k\">===</span> <span class=\"s\">'cssFloat'</span><span class=\"k\">)</span> <span class=\"k\">?</span>","        <span class=\"k\">(</span>isUndefined<span class=\"k\">(</span>elementStyle<span class=\"k\">.</span>styleFloat<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">'cssFloat'</span> <span class=\"k\">:</span> <span class=\"s\">'styleFloat'</span><span class=\"k\">)</span> <span class=\"k\">:</span>","          property<span class=\"k\">]</span> <span class=\"k\">=</span> styles<span class=\"k\">[</span>property<span class=\"k\">];</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Sets the visual opacity of an element while working around inconsistencies</span>","<span class=\"c\"> *  in various browsers. The `opacity` argument should be a floating point</span>","<span class=\"c\"> *  number, where the value of `0` is fully transparent and `1` is fully opaque.</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  // set to 50% transparency</span>","<span class=\"c\"> *  setElementOpacity (element, 0.5);</span>","<span class=\"c\"> *      </span>","<span class=\"c\"> *  // these are equivalent, but allow for setting more than</span>","<span class=\"c\"> *  // one CSS property at once:</span>","<span class=\"c\"> *  setElementStyle (element, { opacity: 0.5 });</span>","<span class=\"c\"> *  setElementStyle (element, \"opacity: 0.5\");</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {Number} value The opacity</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> setElementOpacity <span class=\"k\">(</span>elem<span class=\"k\">,</span> value<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> elementStyle <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>isUndefined <span class=\"k\">(</span>value<span class=\"k\">))</span> elementStyle<span class=\"k\">.</span>removeProperty <span class=\"k\">(</span><span class=\"s\">'opacity'</span><span class=\"k\">);</span>","  ","  elementStyle<span class=\"k\">.</span>opacity <span class=\"k\">=</span> <span class=\"k\">(</span>value <span class=\"k\">===</span> <span class=\"s\">1</span> <span class=\"k\">||</span> value <span class=\"k\">===</span> <span class=\"s\">''</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">''</span> <span class=\"k\">:</span>","    <span class=\"k\">(</span>value <span class=\"k\">&lt;</span> <span class=\"s\">0.00001</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> value<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Returns the opacity of the element.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @return {Number} value The opacity</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> getElementOpacity <span class=\"k\">(</span>elem<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>isElement <span class=\"k\">(</span>elem<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> getElementStyle <span class=\"k\">(</span>elem<span class=\"k\">,</span> <span class=\"s\">'opacity'</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Compute the elements position in terms of the window viewport</span>","<span class=\"c\"> * Returns a key/value object {x, y}</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {Object} the x,y absolute position of a element</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> getElementAbsolutePosition <span class=\"k\">(</span>element<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>element<span class=\"k\">)</span>","  <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>element<span class=\"k\">.</span>getBoundingClientRect<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> rec <span class=\"k\">=</span> element<span class=\"k\">.</span>getBoundingClientRect <span class=\"k\">();</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>rec<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">{</span> x<span class=\"k\">:</span>rec<span class=\"k\">.</span>left<span class=\"k\">,</span> y<span class=\"k\">:</span>rec<span class=\"k\">.</span>top <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"k\">}</span> ","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> x <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> y <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> parent <span class=\"k\">=</span> element<span class=\"k\">;</span>","  <span class=\"k\">while</span> <span class=\"k\">(</span>parent<span class=\"k\">)</span>","  <span class=\"k\">{</span>","     <span class=\"k\">var</span> borderXOffset <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","     <span class=\"k\">var</span> borderYOffset <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","     <span class=\"k\">if</span> <span class=\"k\">(</span>parent <span class=\"k\">!=</span> element<span class=\"k\">)</span>","     <span class=\"k\">{</span>","        borderXOffset <span class=\"k\">=</span> parseInt <span class=\"k\">(</span>","          parent<span class=\"k\">.</span>currentStyle<span class=\"k\">?</span>","          parent<span class=\"k\">.</span>currentStyle <span class=\"k\">[</span><span class=\"s\">\"borderLeftWidth\"</span><span class=\"k\">]:</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        borderYOffset <span class=\"k\">=</span> parseInt <span class=\"k\">(</span>","          parent<span class=\"k\">.</span>currentStyle<span class=\"k\">?</span>","          parent<span class=\"k\">.</span>currentStyle <span class=\"k\">[</span><span class=\"s\">\"borderTopWidth\"</span><span class=\"k\">]:</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","        borderXOffset <span class=\"k\">=</span> isNaN <span class=\"k\">(</span>borderXOffset<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> borderXOffset<span class=\"k\">;</span>","        borderYOffset <span class=\"k\">=</span> isNaN <span class=\"k\">(</span>borderYOffset<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">0</span> <span class=\"k\">:</span> borderYOffset<span class=\"k\">;</span>","     <span class=\"k\">}</span>","","     x <span class=\"k\">+=</span> parent<span class=\"k\">.</span>offsetLeft <span class=\"k\">-</span> parent<span class=\"k\">.</span>scrollLeft <span class=\"k\">+</span> borderXOffset<span class=\"k\">;</span>","     y <span class=\"k\">+=</span> parent<span class=\"k\">.</span>offsetTop <span class=\"k\">-</span> parent<span class=\"k\">.</span>scrollTop <span class=\"k\">+</span> borderYOffset<span class=\"k\">;</span>","     parent <span class=\"k\">=</span> parent<span class=\"k\">.</span>offsetParent<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> <span class=\"k\">{</span> x<span class=\"k\">:</span>x<span class=\"k\">,</span> y<span class=\"k\">:</span>y <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _getBoundingClientRect_api1 <span class=\"k\">(</span>e<span class=\"k\">)</span> ","<span class=\"k\">{</span>","  <span class=\"k\">var</span> rec <span class=\"k\">=</span> getElementAbsolutePosition <span class=\"k\">(</span>e<span class=\"k\">);</span>","  <span class=\"k\">return</span> <span class=\"k\">{</span>","    width<span class=\"k\">:</span> e<span class=\"k\">.</span>offsetWidth<span class=\"k\">,</span>","    height<span class=\"k\">:</span> e<span class=\"k\">.</span>offsetWidth<span class=\"k\">,</span>","    left<span class=\"k\">:</span> rec<span class=\"k\">.</span>x<span class=\"k\">,</span>","    top<span class=\"k\">:</span> rec<span class=\"k\">.</span>y","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _getBoundingClientRect_api2 <span class=\"k\">(</span>e<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">(</span>e <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>getBoundingClientRect<span class=\"k\">)?</span>e<span class=\"k\">.</span>getBoundingClientRect <span class=\"k\">():</span><span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Set the absolute element position.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {Number} x The element left position</span>","<span class=\"c\"> * @param {Number} y The element top position</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> setElementPos <span class=\"k\">(</span>elem<span class=\"k\">,</span> x<span class=\"k\">,</span> y<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> elementStyle <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">;</span>","  ","  elementStyle<span class=\"k\">.</span>left <span class=\"k\">=</span> x <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">;</span>","  elementStyle<span class=\"k\">.</span>top <span class=\"k\">=</span> y <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Set the element size</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {Number} w The element width</span>","<span class=\"c\"> * @param {Number} w The element height</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> setElementSize <span class=\"k\">(</span>elem<span class=\"k\">,</span> w<span class=\"k\">,</span> h<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> elementStyle <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">;</span>","  ","  elementStyle<span class=\"k\">.</span>width <span class=\"k\">=</span> w <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">;</span>","  elementStyle<span class=\"k\">.</span>height <span class=\"k\">=</span> h <span class=\"k\">+</span> <span class=\"s\">'px'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Set the element HTML visibility</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {boolean} v True if the element should be visible or false</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> setElementVisibility <span class=\"k\">(</span>elem<span class=\"k\">,</span> v<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> elementStyle <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>elementStyle <span class=\"k\">||</span> util<span class=\"k\">.</span>isString <span class=\"k\">(</span>elem<span class=\"k\">.</span>innerHTML<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      elementStyle<span class=\"k\">.</span>visibility <span class=\"k\">=</span> <span class=\"s\">'visible'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      elementStyle<span class=\"k\">.</span>visibility <span class=\"k\">=</span> <span class=\"s\">'hidden'</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"c\">//  else if (elem instanceof CharacterData)</span>","<span class=\"c\">//  {}</span>","  <span class=\"k\">else</span> <span class=\"c\">// SVG</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      elem<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">'visibility'</span><span class=\"k\">,</span> <span class=\"s\">'visible'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      elem<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">'visibility'</span><span class=\"k\">,</span> <span class=\"s\">'hidden'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Return true if the element is visible, false otherwise</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @return {boolean}</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> isElementVisible <span class=\"k\">(</span>elem<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> elementStyle <span class=\"k\">=</span> elem<span class=\"k\">.</span>style<span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>elementStyle <span class=\"k\">||</span> util<span class=\"k\">.</span>isString <span class=\"k\">(</span>elem<span class=\"k\">.</span>innerHTML<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>elementStyle<span class=\"k\">.</span>visibility <span class=\"k\">===</span> <span class=\"s\">'hidden'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>elem <span class=\"k\">instanceof</span> CharacterData<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"c\">// SVG</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>elem<span class=\"k\">.</span>getAttribute <span class=\"k\">(</span><span class=\"s\">'visibility'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">'hidden'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Remove all element children</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> removeAllElementChild <span class=\"k\">(</span>elem<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">while</span> <span class=\"k\">(</span>elem<span class=\"k\">.</span>firstChild<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    elem<span class=\"k\">.</span>removeChild <span class=\"k\">(</span>elem<span class=\"k\">.</span>firstChild<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Set inner content of a element</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {String} txt The text</span>","<span class=\"c\"> **/</span>","<span class=\"k\">function</span> setElementInnerText <span class=\"k\">(</span>elem<span class=\"k\">,</span> text<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>elem<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  removeAllElementChild <span class=\"k\">(</span>elem<span class=\"k\">);</span> <span class=\"c\">//... deroule</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>text<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>text <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span> text <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>text <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> text <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isNumber <span class=\"k\">(</span>text<span class=\"k\">))</span> <span class=\"k\">{</span> text <span class=\"k\">=</span> <span class=\"s\">\"\"</span> <span class=\"k\">+</span> text<span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>text<span class=\"k\">.</span>toString<span class=\"k\">)</span> <span class=\"k\">{</span> text <span class=\"k\">=</span> text<span class=\"k\">.</span>toString <span class=\"k\">();</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span> text <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> lines <span class=\"k\">=</span> text<span class=\"k\">.</span>split <span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">),</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>lines<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  elem<span class=\"k\">.</span>appendChild <span class=\"k\">(</span>document<span class=\"k\">.</span>createTextNode <span class=\"k\">(</span>lines <span class=\"k\">[</span>i<span class=\"k\">]));</span>","  i<span class=\"k\">++;</span>","  <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> lines<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    elem<span class=\"k\">.</span>appendChild <span class=\"k\">(</span>document<span class=\"k\">.</span>createElement <span class=\"k\">(</span><span class=\"s\">'br'</span><span class=\"k\">));</span>","    elem<span class=\"k\">.</span>appendChild <span class=\"k\">(</span>document<span class=\"k\">.</span>createTextNode <span class=\"k\">(</span>lines <span class=\"k\">[</span>i<span class=\"k\">]));</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *@private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> setElementWebkitTransform <span class=\"k\">(</span>elem<span class=\"k\">,</span> transform<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>elem <span class=\"k\">&amp;&amp;</span> elem<span class=\"k\">.</span>style<span class=\"k\">)</span> elem<span class=\"k\">.</span>style<span class=\"k\">.</span>webkitTransform <span class=\"k\">=</span> transform<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *@private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> getElementWebkitTransform <span class=\"k\">(</span>elem<span class=\"k\">,</span> transform<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>elem<span class=\"k\">)</span> <span class=\"k\">return</span> window<span class=\"k\">.</span>getComputedStyle <span class=\"k\">(</span>elem<span class=\"k\">).</span>webkitTransform<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *@private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> setElementMSTransform <span class=\"k\">(</span>elem<span class=\"k\">,</span> transform<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>elem <span class=\"k\">&amp;&amp;</span> elem<span class=\"k\">.</span>style<span class=\"k\">)</span> elem<span class=\"k\">.</span>style<span class=\"k\">.</span>msTransform <span class=\"k\">=</span> transform<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *@private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> getElementMSTransform <span class=\"k\">(</span>elem<span class=\"k\">,</span> transform<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>elem<span class=\"k\">)</span> <span class=\"k\">return</span> window<span class=\"k\">.</span>getComputedStyle <span class=\"k\">(</span>elem<span class=\"k\">).</span>msTransform<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Set the CSS transformation to a element</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @param {String} transform css transformations</span>","<span class=\"c\"> **/</span>","<span class=\"k\">var</span> setElementTransform<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  get the CSS transformation to a element</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Element} elem The element</span>","<span class=\"c\"> * @return {Transform} transform css transformations</span>","<span class=\"c\"> **/</span>","<span class=\"k\">var</span> getElementTransform<span class=\"k\">;</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span>vsTestStyle<span class=\"k\">.</span>webkitTransform <span class=\"k\">!==</span> undefined<span class=\"k\">)</span>","<span class=\"k\">{</span>","  setElementTransform <span class=\"k\">=</span> setElementWebkitTransform<span class=\"k\">;</span>","  getElementTransform <span class=\"k\">=</span> getElementWebkitTransform<span class=\"k\">;</span>","<span class=\"k\">}</span>  ","<span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>vsTestStyle<span class=\"k\">.</span>msTransform <span class=\"k\">!==</span> undefined<span class=\"k\">)</span>","<span class=\"k\">{</span>","  setElementTransform <span class=\"k\">=</span> setElementMSTransform<span class=\"k\">;</span>","  getElementTransform <span class=\"k\">=</span> getElementMSTransform<span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                    Array extension</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Removes the elements in the specified interval of this Array.&lt;br/&gt; </span>","<span class=\"c\"> * Shifts any subsequent elements to the left (subtracts one from their indices).&lt;br/&gt;</span>","<span class=\"c\"> * This method extends the JavaScript Array prototype.</span>","<span class=\"c\"> * By John Resig (MIT Licensed)</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {int} from Index of the first element to be removed</span>","<span class=\"c\"> * @param {int} to Index of the last element to be removed</span>","<span class=\"c\"> */</span>","Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_remove <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> rest <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>slice <span class=\"k\">((</span>to <span class=\"k\">||</span> from<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">=</span> from <span class=\"k\">&lt;</span> <span class=\"s\">0</span> <span class=\"k\">?</span> <span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">+</span> from <span class=\"k\">:</span> from<span class=\"k\">;</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>push<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> rest<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> _findItem <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">,</span> from<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> len <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">;</span>","","  <span class=\"k\">var</span> from <span class=\"k\">=</span> from<span class=\"k\">?</span>from<span class=\"k\">:</span><span class=\"s\">0</span><span class=\"k\">;</span>","  from <span class=\"k\">=</span> <span class=\"k\">(</span>from <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)?</span> <span class=\"s\">0</span><span class=\"k\">:</span> from<span class=\"k\">;</span>","","  <span class=\"k\">while</span> <span class=\"k\">(</span>from <span class=\"k\">&lt;</span> len<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">[</span>from<span class=\"k\">]</span> <span class=\"k\">===</span> obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> from<span class=\"k\">;</span> <span class=\"k\">}</span>","    from<span class=\"k\">++;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Find an element into this Array.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} obj Element to locate in the array</span>","<span class=\"c\"> * @param {number} fromIndex The index at which to begin the search. </span>","<span class=\"c\"> *    Defaults to 0, i.e. the whole array will be searched.</span>","<span class=\"c\"> *    If the index is greater than or equal to the length of the </span>","<span class=\"c\"> *    array, -1 is returned</span>","<span class=\"c\"> * @return {int} the Index of the element. Return -1 if unfound.</span>","<span class=\"c\"> */</span>","Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>findItem <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>indexOf<span class=\"k\">?</span> ","Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>indexOf<span class=\"k\">:</span>_findItem<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Removes the elements in the specified interval of this Array.&lt;br/&gt; </span>","<span class=\"c\"> * Shifts any subsequent elements to the left (subtracts one from their indices).&lt;br/&gt;</span>","<span class=\"c\"> * This method extends the JavaScript Array prototype.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {int} from Index of the first element to be removed</span>","<span class=\"c\"> * @param {int} to Index of the last element to be removed</span>","<span class=\"c\"> * @return {Array} the modified array</span>","<span class=\"c\"> */</span>","Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>remove <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">((</span><span class=\"k\">typeof</span><span class=\"k\">(</span>from<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">||</span> util<span class=\"k\">.</span>isString <span class=\"k\">(</span>from<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> from<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_remove <span class=\"k\">(</span>i<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_remove <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Removes all elements of this Array.&lt;br/&gt; </span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {Array} the modified array</span>","<span class=\"c\"> */</span>","Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>removeAll <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">while</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_remove <span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Return a copy of the array </span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {Array} the modified array</span>","<span class=\"c\"> */</span>","Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>clone <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>slice <span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                         export</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Imports a JavaScript or css file into a document</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} path The file path to import</span>","<span class=\"c\"> * @param {Document} doc The document into import the file</span>","<span class=\"c\"> * @param {Function} clb A function which will be called when the file is loaded</span>","<span class=\"c\"> * @param {String} type The file type ['js', 'css']</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> importFile <span class=\"k\">(</span>path<span class=\"k\">,</span> doc<span class=\"k\">,</span> clb<span class=\"k\">,</span> type<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>doc<span class=\"k\">)</span> <span class=\"k\">{</span> doc <span class=\"k\">=</span> document<span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> js_effets<span class=\"k\">,</span> css_style<span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">'js'</span> <span class=\"k\">||</span> path<span class=\"k\">.</span>search <span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">.js'</span><span class=\"k\">)</span> <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    js_effets <span class=\"k\">=</span> doc<span class=\"k\">.</span>createElement <span class=\"k\">(</span><span class=\"s\">\"script\"</span><span class=\"k\">);</span>","    js_effets<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"type\"</span><span class=\"k\">,</span> <span class=\"s\">\"text/javascript\"</span><span class=\"k\">);</span>","    js_effets<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"src\"</span><span class=\"k\">,</span> path<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>clb<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      js_effets<span class=\"k\">.</span>onload <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","      <span class=\"k\">{</span>","        clb<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> path<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>doc<span class=\"k\">.</span>head<span class=\"k\">)</span> <span class=\"k\">{</span> doc<span class=\"k\">.</span>head <span class=\"k\">=</span> doc<span class=\"k\">.</span>querySelector <span class=\"k\">(</span><span class=\"s\">'head'</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    doc<span class=\"k\">.</span>head<span class=\"k\">.</span>appendChild <span class=\"k\">(</span>js_effets<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">'css'</span> <span class=\"k\">||</span> path<span class=\"k\">.</span>search<span class=\"k\">(</span><span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">.css'</span><span class=\"k\">)</span> <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    css_style <span class=\"k\">=</span> doc<span class=\"k\">.</span>createElement <span class=\"k\">(</span><span class=\"s\">\"link\"</span><span class=\"k\">);</span>","    css_style<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"rel\"</span><span class=\"k\">,</span> <span class=\"s\">\"stylesheet\"</span><span class=\"k\">);</span>","    css_style<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"type\"</span><span class=\"k\">,</span> <span class=\"s\">\"text/css\"</span><span class=\"k\">);</span>","    css_style<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"href\"</span><span class=\"k\">,</span> path<span class=\"k\">);</span>","    css_style<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"media\"</span><span class=\"k\">,</span> <span class=\"s\">\"screen\"</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>clb<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> count <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      ","      <span class=\"c\">/**</span>","<span class=\"c\">       * @private</span>","<span class=\"c\">       */</span>","      <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>css_style<span class=\"k\">.</span>sheet <span class=\"k\">||</span> <span class=\"k\">!</span>css_style<span class=\"k\">.</span>sheet<span class=\"k\">.</span>cssRules<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>count<span class=\"k\">++</span> <span class=\"k\">&lt;</span> <span class=\"s\">100</span><span class=\"k\">)</span>","          <span class=\"k\">{</span>","            cssTimeout <span class=\"k\">=</span> setTimeout <span class=\"k\">(</span>arguments<span class=\"k\">.</span>callee<span class=\"k\">,</span> <span class=\"s\">100</span><span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span>","          <span class=\"k\">{</span>","            console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">'CSS load of '</span> <span class=\"k\">+</span> path <span class=\"k\">+</span> <span class=\"s\">' failed!'</span><span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>css_style<span class=\"k\">.</span>sheet<span class=\"k\">.</span>cssRules <span class=\"k\">&amp;&amp;</span>","            css_style<span class=\"k\">.</span>sheet<span class=\"k\">.</span>cssRules<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">'CSS load of '</span> <span class=\"k\">+</span> path <span class=\"k\">+</span> <span class=\"s\">' failed!'</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          clb<span class=\"k\">.</span>call <span class=\"k\">(</span>document<span class=\"k\">,</span> path<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">)();</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>doc<span class=\"k\">.</span>head<span class=\"k\">)</span> <span class=\"k\">{</span> doc<span class=\"k\">.</span>head <span class=\"k\">=</span> doc<span class=\"k\">.</span>querySelector <span class=\"k\">(</span><span class=\"s\">'head'</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    doc<span class=\"k\">.</span>head<span class=\"k\">.</span>appendChild <span class=\"k\">(</span>css_style<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                         Style mamangent</span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> SET_STYLE_OPTIMIZATION <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> _current_platform_id <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","window<span class=\"k\">.</span>_current_platform_id <span class=\"k\">=</span> _current_platform_id<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> *  Sets the active stylesheet for the HTML document according to the specified</span>","<span class=\"c\"> *  title.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} title</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> setActiveStyleSheet <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>title<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> stylesheets <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementsByTagName <span class=\"k\">(</span><span class=\"s\">\"link\"</span><span class=\"k\">),</span>","    stylesheet<span class=\"k\">,</span> info<span class=\"k\">,</span> id<span class=\"k\">,</span> app<span class=\"k\">,</span> size<span class=\"k\">;</span>","    ","  _current_platform_id <span class=\"k\">=</span> title<span class=\"k\">;</span>","  <span class=\"k\">var</span> apps <span class=\"k\">=</span> window<span class=\"k\">.</span>Application_applications<span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>SET_STYLE_OPTIMIZATION<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>apps<span class=\"k\">)</span> <span class=\"k\">for</span> <span class=\"k\">(</span>id <span class=\"k\">in</span> apps<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      app <span class=\"k\">=</span> apps <span class=\"k\">[</span>id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>app<span class=\"k\">.</span>view<span class=\"k\">)</span> app<span class=\"k\">.</span>view<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> stylesheets<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    stylesheet <span class=\"k\">=</span> stylesheets <span class=\"k\">[</span>i<span class=\"k\">];</span>","    <span class=\"c\">// If the stylesheet doesn't contain the title attribute, assume it's</span>","    <span class=\"c\">// a persistent stylesheet and should not be disabled</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>stylesheet<span class=\"k\">.</span>getAttribute <span class=\"k\">(</span><span class=\"s\">\"title\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"c\">// All other stylesheets than the one specified by \"title\" should be</span>","    <span class=\"c\">// disabled</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>stylesheet<span class=\"k\">.</span>getAttribute <span class=\"k\">(</span><span class=\"s\">\"title\"</span><span class=\"k\">)</span> <span class=\"k\">!==</span> title<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      stylesheet<span class=\"k\">.</span>setAttribute <span class=\"k\">(</span><span class=\"s\">\"disabled\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> ","    <span class=\"k\">{</span>","      stylesheet<span class=\"k\">.</span>removeAttribute <span class=\"k\">(</span><span class=\"s\">\"disabled\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>SET_STYLE_OPTIMIZATION<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>apps<span class=\"k\">)</span> <span class=\"k\">for</span> <span class=\"k\">(</span>id <span class=\"k\">in</span> apps<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      app <span class=\"k\">=</span> apps <span class=\"k\">[</span>id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>app<span class=\"k\">.</span>view<span class=\"k\">)</span> app<span class=\"k\">.</span>view<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"block\"</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","<span class=\"c\">//     // resize application</span>","<span class=\"c\">//   if (window.deviceConfiguration.targets)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     info = window.deviceConfiguration.targets [title];</span>","<span class=\"c\">//     if (!info)</span>","<span class=\"c\">//     { return; }</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     if (info.orientations [0] === 0 || info.orientations [0] === 180)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       size = info.resolution.slice ();</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     else if (info.orientations [0] === 90 || info.orientations [0] === -90)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       size = [];</span>","<span class=\"c\">//       size [0] = info.resolution [1];</span>","<span class=\"c\">//       size [1] = info.resolution [0];</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     else</span>","<span class=\"c\">//     { return; }</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     if (info.statusBarHeight)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       size [1] -= info.statusBarHeight;</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     if (apps) for (id in apps)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       app = Application_applications [id];</span>","<span class=\"c\">//       app.position = [0, 0];</span>","<span class=\"c\">//       app.size = size;</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//   }</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Preload GUI HTML template for the given component.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  When the developer uses createAndAddComponent method, the system will</span>","<span class=\"c\"> *  load the HTML GUI template associated to the component to create.</span>","<span class=\"c\"> *  This process can take times.&lt;br&gt;</span>","<span class=\"c\"> *  In order to minimize the latency, this class method allows to preload all </span>","<span class=\"c\"> *  data related to a component.&lt;br&gt;</span>","<span class=\"c\"> *  This method should ne call when the application start.</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  vs.util.preloadTemplate ('GUICompOne');</span>","<span class=\"c\"> *  vs.util.preloadTemplate ('GUICompTwo');</span>","<span class=\"c\"> *  ...</span>","<span class=\"c\"> *  myObject.createAndAddComponent ('GUICompOne', conf, 'children');</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *  @memberOf vs.util</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} comp_name The GUI component name   </span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> preloadTemplate <span class=\"k\">(</span>comp_name<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> path <span class=\"k\">=</span> comp_name <span class=\"k\">+</span> <span class=\"s\">'.xhtml'</span><span class=\"k\">,</span> xmlRequest<span class=\"k\">;</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>vs<span class=\"k\">.</span>ui <span class=\"k\">&amp;&amp;</span> vs<span class=\"k\">.</span>ui<span class=\"k\">.</span>View <span class=\"k\">&amp;&amp;</span> vs<span class=\"k\">.</span>ui<span class=\"k\">.</span>View<span class=\"k\">.</span>__comp_templates <span class=\"k\">[</span>path<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","  xmlRequest <span class=\"k\">=</span> <span class=\"k\">new</span> XMLHttpRequest <span class=\"k\">();</span>","  xmlRequest<span class=\"k\">.</span>open <span class=\"k\">(</span><span class=\"s\">\"GET\"</span><span class=\"k\">,</span> path<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","  xmlRequest<span class=\"k\">.</span>send <span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>xmlRequest<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">4</span><span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>xmlRequest<span class=\"k\">.</span>status <span class=\"k\">===</span> <span class=\"s\">200</span> <span class=\"k\">||</span> xmlRequest<span class=\"k\">.</span>status <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      data <span class=\"k\">=</span> xmlRequest<span class=\"k\">.</span>responseText<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>vs<span class=\"k\">.</span>ui <span class=\"k\">&amp;&amp;</span> vs<span class=\"k\">.</span>ui<span class=\"k\">.</span>View<span class=\"k\">)</span> vs<span class=\"k\">.</span>ui<span class=\"k\">.</span>View<span class=\"k\">.</span>__comp_templates <span class=\"k\">[</span>path<span class=\"k\">]</span> <span class=\"k\">=</span> data<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error","        <span class=\"k\">(</span><span class=\"s\">\"Template file for component '\"</span> <span class=\"k\">+</span> comp_name <span class=\"k\">+</span> <span class=\"s\">\"' unfound\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span>","  <span class=\"k\">{</span>","    console<span class=\"k\">.</span>error","      <span class=\"k\">(</span><span class=\"s\">\"Pb when load the component '\"</span> <span class=\"k\">+</span> comp_name <span class=\"k\">+</span> <span class=\"s\">\"' template\"</span><span class=\"k\">);</span>","    <span class=\"k\">return</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  xmlRequest <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                         export</span>","<span class=\"c\">*********************************************************************/</span>","","util<span class=\"k\">.</span>extend <span class=\"k\">(</span>util<span class=\"k\">,</span> <span class=\"k\">{</span>","  vsTestElem<span class=\"k\">:</span>              vsTestElem<span class=\"k\">,</span>","  vsTestStyle<span class=\"k\">:</span>             vsTestStyle<span class=\"k\">,</span>","  ","  <span class=\"c\">// Class functions</span>","  extendClass<span class=\"k\">:</span>             extendClass<span class=\"k\">,</span>","  defineProperty<span class=\"k\">:</span>","        <span class=\"k\">(</span>Object<span class=\"k\">.</span>defineProperty<span class=\"k\">)?</span>_defineProperty_api2<span class=\"k\">:</span>_defineProperty_api1<span class=\"k\">,</span>","  defineClassProperty<span class=\"k\">:</span>     defineClassProperty<span class=\"k\">,</span>","  defineClassProperties<span class=\"k\">:</span>   defineClassProperties<span class=\"k\">,</span>","  clone<span class=\"k\">:</span>                   clone<span class=\"k\">,</span>","  free<span class=\"k\">:</span>                    free<span class=\"k\">,</span>","","  <span class=\"c\">// JSON functions  </span>","  toJSON<span class=\"k\">:</span>                  toJSON<span class=\"k\">,</span>","","  <span class=\"c\">// testing functions</span>","  isElement<span class=\"k\">:</span>               isElement<span class=\"k\">,</span>","  isArray<span class=\"k\">:</span>                 isArray<span class=\"k\">,</span>","  isFunction<span class=\"k\">:</span>              isFunction<span class=\"k\">,</span>","  isString<span class=\"k\">:</span>                isString<span class=\"k\">,</span>","  isNumber<span class=\"k\">:</span>                isNumber<span class=\"k\">,</span>","  isUndefined<span class=\"k\">:</span>             isUndefined<span class=\"k\">,</span>","","  <span class=\"c\">// element class</span>","  hasClassName<span class=\"k\">:</span>    hasClassName<span class=\"k\">,</span>","  addClassName<span class=\"k\">:</span>    addClassName<span class=\"k\">,</span>","  removeClassName<span class=\"k\">:</span> removeClassName<span class=\"k\">,</span>","  toggleClassName<span class=\"k\">:</span> toggleClassName<span class=\"k\">,</span>","","  <span class=\"c\">// string</span>","  htmlEncode<span class=\"k\">:</span>      htmlEncode<span class=\"k\">,</span>","  strip<span class=\"k\">:</span>           strip<span class=\"k\">,</span>","  camelize<span class=\"k\">:</span>        camelize<span class=\"k\">,</span>","  capitalize<span class=\"k\">:</span>      capitalize<span class=\"k\">,</span>","  underscore<span class=\"k\">:</span>      underscore<span class=\"k\">,</span>","  parseJSON<span class=\"k\">:</span>       parseJSON<span class=\"k\">,</span>","","  <span class=\"c\">// element style</span>","  getElementHeight<span class=\"k\">:</span>           getElementHeight<span class=\"k\">,</span>","  getElementWidth<span class=\"k\">:</span>            getElementWidth<span class=\"k\">,</span>","  getElementDimensions<span class=\"k\">:</span>       getElementDimensions<span class=\"k\">,</span>","  getElementStyle<span class=\"k\">:</span>            getElementStyle<span class=\"k\">,</span>","  setElementStyle<span class=\"k\">:</span>            setElementStyle<span class=\"k\">,</span>","  setElementOpacity<span class=\"k\">:</span>          setElementOpacity<span class=\"k\">,</span>","  getElementOpacity<span class=\"k\">:</span>          getElementOpacity<span class=\"k\">,</span>","  getElementAbsolutePosition<span class=\"k\">:</span> getElementAbsolutePosition<span class=\"k\">,</span>","  setElementPos<span class=\"k\">:</span>              setElementPos<span class=\"k\">,</span>","  setElementSize<span class=\"k\">:</span>             setElementSize<span class=\"k\">,</span>","  setElementVisibility<span class=\"k\">:</span>       setElementVisibility<span class=\"k\">,</span>","  isElementVisible<span class=\"k\">:</span>           isElementVisible<span class=\"k\">,</span>","  removeAllElementChild<span class=\"k\">:</span>      removeAllElementChild<span class=\"k\">,</span>","  setElementInnerText<span class=\"k\">:</span>        setElementInnerText<span class=\"k\">,</span>","  setElementTransform<span class=\"k\">:</span>        setElementTransform<span class=\"k\">,</span>","  getElementTransform<span class=\"k\">:</span>        getElementTransform<span class=\"k\">,</span>","  getBoundingClientRect<span class=\"k\">:</span>      ","    <span class=\"k\">(</span>vsTestElem<span class=\"k\">.</span>getBoundingClientRect<span class=\"k\">)?</span>_getBoundingClientRect_api2<span class=\"k\">:</span>","    _getBoundingClientRect_api1<span class=\"k\">,</span>","  ","  <span class=\"c\">// other</span>","  importFile<span class=\"k\">:</span>           importFile<span class=\"k\">,</span>","  setActiveStyleSheet<span class=\"k\">:</span>  setActiveStyleSheet<span class=\"k\">,</span>","  preloadTemplate<span class=\"k\">:</span>      preloadTemplate<span class=\"k\">,</span>","  __date_reg_exp<span class=\"k\">:</span>       __date_reg_exp<span class=\"k\">,</span>","  _findItem<span class=\"k\">:</span>            _findItem<span class=\"k\">,</span> <span class=\"c\">// export only for testing purpose</span>","  _defineProperty_api1<span class=\"k\">:</span> _defineProperty_api1<span class=\"k\">,</span> <span class=\"c\">// export only for testing purpose</span>","  _defineProperty_api2<span class=\"k\">:</span> _defineProperty_api2<span class=\"k\">,</span> <span class=\"c\">// export only for testing purpose</span>","  _extend_api1<span class=\"k\">:</span>         _extend_api1<span class=\"k\">,</span> <span class=\"c\">// export only for testing purpose</span>","  _extend_api2<span class=\"k\">:</span>         _extend_api2 <span class=\"c\">// export only for testing purpose</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">)(</span>window<span class=\"k\">);</span>"];
_$jscoverage['js/vs_util.js'][19]++;
(function (window, undefined) {
  _$jscoverage['js/vs_util.js'][21]++;
  var document = window.document;
  _$jscoverage['js/vs_util.js'][49]++;
  window.vs = {};
  _$jscoverage['js/vs_util.js'][58]++;
  window.vs.util = {};
  _$jscoverage['js/vs_util.js'][64]++;
  window.vs.core = {};
  _$jscoverage['js/vs_util.js'][70]++;
  window.vs.data = {};
  _$jscoverage['js/vs_util.js'][76]++;
  window.vs.ui = {};
  _$jscoverage['js/vs_util.js'][82]++;
  window.vs.fx = {};
  _$jscoverage['js/vs_util.js'][88]++;
  window.vs.av = {};
  _$jscoverage['js/vs_util.js'][94]++;
  window.vs.ext = {};
  _$jscoverage['js/vs_util.js'][100]++;
  window.vs.ext.ui = {};
  _$jscoverage['js/vs_util.js'][106]++;
  window.vs.ext.fx = {};
  _$jscoverage['js/vs_util.js'][108]++;
  window.vs.SUPPORT_3D_TRANSFORM = (("WebKitCSSMatrix" in window) && ("m11" in new WebKitCSSMatrix()));
  _$jscoverage['js/vs_util.js'][134]++;
  var vs = window.vs, util = vs.util;
  _$jscoverage['js/vs_util.js'][141]++;
  var vsTestElem = document.createElement("vstestelem");
  _$jscoverage['js/vs_util.js'][146]++;
  var vsTestStyle = vsTestElem.style;
  _$jscoverage['js/vs_util.js'][147]++;
  var __date_reg_exp = /\/Date\((-?\d+)\)\//;
  _$jscoverage['js/vs_util.js'][150]++;
  vs.SUPPORT_CSS_TRANSFORM = (vsTestStyle.webkitTransform || vsTestStyle.msTransform);
  _$jscoverage['js/vs_util.js'][162]++;
  function _extend_api1(destination, source) {
    _$jscoverage['js/vs_util.js'][164]++;
    for (var property in source) {
      _$jscoverage['js/vs_util.js'][166]++;
      getter = source.__lookupGetter__(property);
      _$jscoverage['js/vs_util.js'][167]++;
      setter = source.__lookupSetter__(property);
      _$jscoverage['js/vs_util.js'][169]++;
      if (getter) {
        _$jscoverage['js/vs_util.js'][171]++;
        destination.__defineGetter__(property, getter);
      }
      _$jscoverage['js/vs_util.js'][173]++;
      if (setter) {
        _$jscoverage['js/vs_util.js'][175]++;
        destination.__defineSetter__(property, setter);
      }
      _$jscoverage['js/vs_util.js'][177]++;
      if (((! getter) && (! setter))) {
        _$jscoverage['js/vs_util.js'][179]++;
        destination[property] = source[property];
      }
}
    _$jscoverage['js/vs_util.js'][182]++;
    return destination;
}
  _$jscoverage['js/vs_util.js'][190]++;
  function _extend_api2(destination, source) {
    _$jscoverage['js/vs_util.js'][192]++;
    for (var property in source) {
      _$jscoverage['js/vs_util.js'][194]++;
      var desc = Object.getOwnPropertyDescriptor(source, property);
      _$jscoverage['js/vs_util.js'][196]++;
      if ((desc && (desc.get || desc.set))) {
        _$jscoverage['js/vs_util.js'][198]++;
        util.defineProperty(destination, property, desc);
      }
      else {
        _$jscoverage['js/vs_util.js'][202]++;
        destination[property] = source[property];
      }
}
    _$jscoverage['js/vs_util.js'][205]++;
    return destination;
}
  _$jscoverage['js/vs_util.js'][216]++;
  vs.util.extend = (Object.defineProperty? _extend_api2: _extend_api1);
  _$jscoverage['js/vs_util.js'][226]++;
  var extendClass = (function (obj, extension) {
  _$jscoverage['js/vs_util.js'][228]++;
  if (((! obj) || (! extension))) {
    _$jscoverage['js/vs_util.js'][228]++;
    return;
  }
  _$jscoverage['js/vs_util.js'][229]++;
  if (((! obj.prototype) || (! extension.prototype))) {
    _$jscoverage['js/vs_util.js'][229]++;
    return;
  }
  _$jscoverage['js/vs_util.js'][231]++;
  try {
    _$jscoverage['js/vs_util.js'][233]++;
    if (Object.__proto__) {
      _$jscoverage['js/vs_util.js'][235]++;
      obj.prototype.__proto__ = extension.prototype;
    }
    else {
      _$jscoverage['js/vs_util.js'][239]++;
      var proto = obj.prototype;
      _$jscoverage['js/vs_util.js'][240]++;
      obj.prototype = new extension();
      _$jscoverage['js/vs_util.js'][242]++;
      util.extend(obj.prototype, proto);
    }
    _$jscoverage['js/vs_util.js'][245]++;
    if ((! obj._properties_)) {
      _$jscoverage['js/vs_util.js'][245]++;
      obj._properties_ = [];
    }
    _$jscoverage['js/vs_util.js'][246]++;
    if (extension._properties_) {
      _$jscoverage['js/vs_util.js'][248]++;
      obj._properties_ = obj._properties_.concat(extension._properties_);
    }
    _$jscoverage['js/vs_util.js'][251]++;
    return;
  }
  catch (e) {
    _$jscoverage['js/vs_util.js'][255]++;
    console.error(e.message());
  }
});
  _$jscoverage['js/vs_util.js'][266]++;
  function free(obj) {
    _$jscoverage['js/vs_util.js'][268]++;
    if ((! obj)) {
      _$jscoverage['js/vs_util.js'][268]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][269]++;
    if (obj._free) {
      _$jscoverage['js/vs_util.js'][269]++;
      obj._free();
    }
    _$jscoverage['js/vs_util.js'][270]++;
    if (obj.destructor) {
      _$jscoverage['js/vs_util.js'][270]++;
      obj.destructor();
    }
    _$jscoverage['js/vs_util.js'][271]++;
    (delete obj);
    _$jscoverage['js/vs_util.js'][272]++;
    obj = null;
}
  _$jscoverage['js/vs_util.js'][320]++;
  function _defineProperty_api1(obj, prop_name, desc) {
    _$jscoverage['js/vs_util.js'][322]++;
    function hasProperty(obj, prop) {
      _$jscoverage['js/vs_util.js'][324]++;
      return Object.prototype.hasOwnProperty.call(obj, prop);
}
    _$jscoverage['js/vs_util.js'][327]++;
    if (hasProperty(desc, "set")) {
      _$jscoverage['js/vs_util.js'][329]++;
      var s = desc.set;
      _$jscoverage['js/vs_util.js'][330]++;
      if (isFunction(s)) {
        _$jscoverage['js/vs_util.js'][330]++;
        obj.__defineSetter__(prop_name, s);
      }
    }
    _$jscoverage['js/vs_util.js'][333]++;
    if (hasProperty(desc, "get")) {
      _$jscoverage['js/vs_util.js'][335]++;
      var s = desc.get;
      _$jscoverage['js/vs_util.js'][336]++;
      if (isFunction(s)) {
        _$jscoverage['js/vs_util.js'][336]++;
        obj.__defineGetter__(prop_name, s);
      }
    }
}
  _$jscoverage['js/vs_util.js'][345]++;
  function _defineProperty_api2(obj, prop_name, desc) {
    _$jscoverage['js/vs_util.js'][347]++;
    function hasProperty(obj, prop) {
      _$jscoverage['js/vs_util.js'][349]++;
      return Object.prototype.hasOwnProperty.call(obj, prop);
}
    _$jscoverage['js/vs_util.js'][352]++;
    if ((((typeof desc) != "object") || (desc === null))) {
      _$jscoverage['js/vs_util.js'][354]++;
      throw new TypeError("bad desc");
    }
    _$jscoverage['js/vs_util.js'][357]++;
    if ((((typeof prop_name) != "string") || (prop_name === null))) {
      _$jscoverage['js/vs_util.js'][359]++;
      throw new TypeError("bad property name");
    }
    _$jscoverage['js/vs_util.js'][362]++;
    var d = {};
    _$jscoverage['js/vs_util.js'][364]++;
    if (hasProperty(desc, "enumerable")) {
      _$jscoverage['js/vs_util.js'][364]++;
      d.enumerable = (! (! desc.enumerable));
    }
    else {
      _$jscoverage['js/vs_util.js'][365]++;
      d.enumerable = true;
    }
    _$jscoverage['js/vs_util.js'][366]++;
    if (hasProperty(desc, "configurable")) {
      _$jscoverage['js/vs_util.js'][366]++;
      d.configurable = (! (! desc.configurable));
    }
    else {
      _$jscoverage['js/vs_util.js'][367]++;
      d.configurable = true;
    }
    _$jscoverage['js/vs_util.js'][368]++;
    if (hasProperty(desc, "value")) {
      _$jscoverage['js/vs_util.js'][368]++;
      d.value = desc.value;
    }
    _$jscoverage['js/vs_util.js'][369]++;
    if (hasProperty(desc, "writable")) {
      _$jscoverage['js/vs_util.js'][369]++;
      d.writable = (! (! desc.writable));
    }
    _$jscoverage['js/vs_util.js'][370]++;
    if (hasProperty(desc, "get")) {
      _$jscoverage['js/vs_util.js'][372]++;
      var g = desc.get;
      _$jscoverage['js/vs_util.js'][373]++;
      if (isFunction(g)) {
        _$jscoverage['js/vs_util.js'][373]++;
        d.get = g;
      }
    }
    _$jscoverage['js/vs_util.js'][375]++;
    if (hasProperty(desc, "set")) {
      _$jscoverage['js/vs_util.js'][377]++;
      var s = desc.set;
      _$jscoverage['js/vs_util.js'][378]++;
      if (isFunction(s)) {
        _$jscoverage['js/vs_util.js'][378]++;
        d.set = s;
      }
    }
    _$jscoverage['js/vs_util.js'][381]++;
    if (((("get" in d) || ("set" in d)) && (("value" in d) || ("writable" in d)))) {
      _$jscoverage['js/vs_util.js'][382]++;
      throw new TypeError("identity-confused descriptor");
    }
    _$jscoverage['js/vs_util.js'][384]++;
    Object.defineProperty(obj, prop_name, d);
}
  _$jscoverage['js/vs_util.js'][426]++;
  function defineClassProperty(the_class, prop_name, desc) {
    _$jscoverage['js/vs_util.js'][428]++;
    if ((! desc)) {
      _$jscoverage['js/vs_util.js'][428]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][429]++;
    if ((! the_class._properties_)) {
      _$jscoverage['js/vs_util.js'][429]++;
      the_class._properties_ = [];
    }
    _$jscoverage['js/vs_util.js'][430]++;
    util.defineProperty(the_class.prototype, prop_name, desc);
    _$jscoverage['js/vs_util.js'][431]++;
    if ((desc.enumerable != false)) {
      _$jscoverage['js/vs_util.js'][431]++;
      the_class._properties_.push(prop_name);
    }
}
  _$jscoverage['js/vs_util.js'][437]++;
  var _keys = (((typeof Object.keys) === "function")? Object.keys: (function (o) {
  _$jscoverage['js/vs_util.js'][439]++;
  var array = new Array(), key;
  _$jscoverage['js/vs_util.js'][440]++;
  for (key in o) {
    _$jscoverage['js/vs_util.js'][442]++;
    if (Object.prototype.hasOwnProperty.call(o, key)) {
      _$jscoverage['js/vs_util.js'][442]++;
      array.push(key);
    }
}
  _$jscoverage['js/vs_util.js'][444]++;
  return array;
}));
  _$jscoverage['js/vs_util.js'][458]++;
  function defineClassProperties(the_class, properties) {
    _$jscoverage['js/vs_util.js'][460]++;
    properties = Object(properties);
    _$jscoverage['js/vs_util.js'][461]++;
    var keys = _keys(properties);
    _$jscoverage['js/vs_util.js'][462]++;
    for (var i = 0; (i < keys.length); (i++)) {
      _$jscoverage['js/vs_util.js'][464]++;
      var prop_name = keys[i];
      _$jscoverage['js/vs_util.js'][465]++;
      var desc = properties[keys[i]];
      _$jscoverage['js/vs_util.js'][466]++;
      defineClassProperty(the_class, prop_name, desc);
}
}
  _$jscoverage['js/vs_util.js'][478]++;
  NULL_TYPE = "Null";
  _$jscoverage['js/vs_util.js'][484]++;
  UNDEFINED_TYPE = "Undefined";
  _$jscoverage['js/vs_util.js'][490]++;
  BOOLEAN_TYPE = "Boolean";
  _$jscoverage['js/vs_util.js'][496]++;
  NUMBER_TYPE = "Number";
  _$jscoverage['js/vs_util.js'][502]++;
  STRING_TYPE = "String";
  _$jscoverage['js/vs_util.js'][508]++;
  OBJECT_TYPE = "Object";
  _$jscoverage['js/vs_util.js'][514]++;
  BOOLEAN_CLASS = "[object Boolean]";
  _$jscoverage['js/vs_util.js'][520]++;
  NUMBER_CLASS = "[object Number]";
  _$jscoverage['js/vs_util.js'][526]++;
  STRING_CLASS = "[object String]";
  _$jscoverage['js/vs_util.js'][532]++;
  ARRAY_CLASS = "[object Array]";
  _$jscoverage['js/vs_util.js'][538]++;
  OBJECT_CLASS = "[object Object]";
  _$jscoverage['js/vs_util.js'][543]++;
  function clone(object) {
    _$jscoverage['js/vs_util.js'][545]++;
    var destination;
    _$jscoverage['js/vs_util.js'][547]++;
    switch (object) {
    case null:
      _$jscoverage['js/vs_util.js'][549]++;
      return null;
    case undefined:
      _$jscoverage['js/vs_util.js'][550]++;
      return undefined;
    }
    _$jscoverage['js/vs_util.js'][553]++;
    switch (_toString.call(object)) {
    case OBJECT_CLASS:
    case OBJECT_TYPE:
      _$jscoverage['js/vs_util.js'][557]++;
      destination = {};
      _$jscoverage['js/vs_util.js'][558]++;
      for (var property in object) {
        _$jscoverage['js/vs_util.js'][560]++;
        destination[property] = clone(object[property]);
}
      _$jscoverage['js/vs_util.js'][562]++;
      return destination;
      _$jscoverage['js/vs_util.js'][562]++;
      break;
    case ARRAY_CLASS:
      _$jscoverage['js/vs_util.js'][565]++;
      destination = [];
      _$jscoverage['js/vs_util.js'][566]++;
      for (var i = 0; (i < object.length); (i++)) {
        _$jscoverage['js/vs_util.js'][568]++;
        destination[i] = clone(object[i]);
}
      _$jscoverage['js/vs_util.js'][570]++;
      return destination;
      _$jscoverage['js/vs_util.js'][570]++;
      break;
    case BOOLEAN_TYPE:
    case NUMBER_TYPE:
    case STRING_TYPE:
    case BOOLEAN_CLASS:
    case NUMBER_CLASS:
    case STRING_CLASS:
    default:
      _$jscoverage['js/vs_util.js'][579]++;
      return object;
      _$jscoverage['js/vs_util.js'][579]++;
      break;
    }
}
  _$jscoverage['js/vs_util.js'][581]++;
  ;
  _$jscoverage['js/vs_util.js'][590]++;
  function toJSON(value) {
    _$jscoverage['js/vs_util.js'][592]++;
    return JSON.stringify(value);
}
  _$jscoverage['js/vs_util.js'][593]++;
  ;
  _$jscoverage['js/vs_util.js'][602]++;
  var _toString = Object.prototype.toString;
  _$jscoverage['js/vs_util.js'][622]++;
  function isElement(object) {
    _$jscoverage['js/vs_util.js'][624]++;
    return (! (! (object && (object.nodeType === 1))));
}
  _$jscoverage['js/vs_util.js'][625]++;
  ;
  _$jscoverage['js/vs_util.js'][642]++;
  function isArray(object) {
    _$jscoverage['js/vs_util.js'][644]++;
    if (((typeof Array.isArray) == "function")) {
      _$jscoverage['js/vs_util.js'][646]++;
      return Array.isArray(object);
    }
    _$jscoverage['js/vs_util.js'][648]++;
    return (_toString.call(object) === ARRAY_CLASS);
}
  _$jscoverage['js/vs_util.js'][649]++;
  ;
  _$jscoverage['js/vs_util.js'][658]++;
  function isFunction(object) {
    _$jscoverage['js/vs_util.js'][660]++;
    return ((typeof object) === "function");
}
  _$jscoverage['js/vs_util.js'][661]++;
  ;
  _$jscoverage['js/vs_util.js'][678]++;
  function isString(object) {
    _$jscoverage['js/vs_util.js'][680]++;
    return (_toString.call(object) === STRING_CLASS);
}
  _$jscoverage['js/vs_util.js'][681]++;
  ;
  _$jscoverage['js/vs_util.js'][701]++;
  function isNumber(object) {
    _$jscoverage['js/vs_util.js'][703]++;
    return (_toString.call(object) === NUMBER_CLASS);
}
  _$jscoverage['js/vs_util.js'][704]++;
  ;
  _$jscoverage['js/vs_util.js'][727]++;
  function isUndefined(object) {
    _$jscoverage['js/vs_util.js'][729]++;
    return ((typeof object) === "undefined");
}
  _$jscoverage['js/vs_util.js'][730]++;
  ;
  _$jscoverage['js/vs_util.js'][749]++;
  function hasClassName(element, className) {
    _$jscoverage['js/vs_util.js'][751]++;
    if ((! element)) {
      _$jscoverage['js/vs_util.js'][751]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][752]++;
    var elementClassName = element.className;
    _$jscoverage['js/vs_util.js'][753]++;
    return ((elementClassName.length > 0) && ((elementClassName === className) || new RegExp(("(^|\\s)" + className + "(\\s|$)")).test(elementClassName)));
}
  _$jscoverage['js/vs_util.js'][767]++;
  function addClassName() {
    _$jscoverage['js/vs_util.js'][769]++;
    var element = arguments[0], className, i = 1;
    _$jscoverage['js/vs_util.js'][770]++;
    if ((! element)) {
      _$jscoverage['js/vs_util.js'][770]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][771]++;
    for (; (i < arguments.length); (i++)) {
      _$jscoverage['js/vs_util.js'][773]++;
      className = arguments[i];
      _$jscoverage['js/vs_util.js'][774]++;
      if ((! hasClassName(element, className))) {
        _$jscoverage['js/vs_util.js'][776]++;
        element.className += ((element.className? " ": "") + className);
      }
}
    _$jscoverage['js/vs_util.js'][779]++;
    return element;
}
  _$jscoverage['js/vs_util.js'][793]++;
  function removeClassName() {
    _$jscoverage['js/vs_util.js'][795]++;
    var element = arguments[0], className, i = 1;
    _$jscoverage['js/vs_util.js'][796]++;
    if ((! element)) {
      _$jscoverage['js/vs_util.js'][796]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][797]++;
    for (; (i < arguments.length); (i++)) {
      _$jscoverage['js/vs_util.js'][799]++;
      className = arguments[i];
      _$jscoverage['js/vs_util.js'][800]++;
      element.className = strip(element.className.replace(new RegExp(("(^|\\s+)" + className + "(\\s+|$)")), " "));
}
    _$jscoverage['js/vs_util.js'][803]++;
    return element;
}
  _$jscoverage['js/vs_util.js'][817]++;
  function toggleClassName(element, className) {
    _$jscoverage['js/vs_util.js'][819]++;
    if ((! element)) {
      _$jscoverage['js/vs_util.js'][819]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][820]++;
    return (hasClassName(element, className)? removeClassName(element, className): addClassName(element, className));
}
  _$jscoverage['js/vs_util.js'][835]++;
  function htmlEncode(str) {
    _$jscoverage['js/vs_util.js'][837]++;
    if ((! isString(str))) {
      _$jscoverage['js/vs_util.js'][837]++;
      return "";
    }
    _$jscoverage['js/vs_util.js'][839]++;
    return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
  _$jscoverage['js/vs_util.js'][850]++;
  function strip(str) {
    _$jscoverage['js/vs_util.js'][852]++;
    if ((! isString(str))) {
      _$jscoverage['js/vs_util.js'][852]++;
      return "";
    }
    _$jscoverage['js/vs_util.js'][854]++;
    return str.replace(/^\s+/, "").replace(/\s+$/, "");
}
  _$jscoverage['js/vs_util.js'][865]++;
  function camelize(str) {
    _$jscoverage['js/vs_util.js'][867]++;
    if ((! isString(str))) {
      _$jscoverage['js/vs_util.js'][867]++;
      return "";
    }
    _$jscoverage['js/vs_util.js'][869]++;
    var parts = str.split("-"), len = parts.length;
    _$jscoverage['js/vs_util.js'][870]++;
    if ((len === 1)) {
      _$jscoverage['js/vs_util.js'][870]++;
      return parts[0];
    }
    _$jscoverage['js/vs_util.js'][872]++;
    var camelized = ((str.charAt(0) === "-")? (parts[0].charAt(0).toUpperCase() + parts[0].substring(1)): parts[0]);
    _$jscoverage['js/vs_util.js'][876]++;
    for (var i = 1; (i < len); (i++)) {
      _$jscoverage['js/vs_util.js'][877]++;
      camelized += (parts[i].charAt(0).toUpperCase() + parts[i].substring(1));
}
    _$jscoverage['js/vs_util.js'][879]++;
    return camelized;
}
  _$jscoverage['js/vs_util.js'][890]++;
  function capitalize(str) {
    _$jscoverage['js/vs_util.js'][892]++;
    if ((! isString(str))) {
      _$jscoverage['js/vs_util.js'][892]++;
      return "";
    }
    _$jscoverage['js/vs_util.js'][894]++;
    return (str.charAt(0).toUpperCase() + str.substring(1).toLowerCase());
}
  _$jscoverage['js/vs_util.js'][906]++;
  function underscore(str) {
    _$jscoverage['js/vs_util.js'][908]++;
    if ((! isString(str))) {
      _$jscoverage['js/vs_util.js'][908]++;
      return "";
    }
    _$jscoverage['js/vs_util.js'][910]++;
    return str.replace(/::/g, "/").replace(/([A-Z]+)([A-Z][a-z])/g, "$1_$2").replace(/([a-z\d])([A-Z])/g, "$1_$2").replace(/-/g, "_").toLowerCase();
}
  _$jscoverage['js/vs_util.js'][928]++;
  function parseJSON(json) {
    _$jscoverage['js/vs_util.js'][930]++;
    if ((! json)) {
      _$jscoverage['js/vs_util.js'][930]++;
      return null;
    }
    _$jscoverage['js/vs_util.js'][931]++;
    var temp = JSON.parse(json);
    _$jscoverage['js/vs_util.js'][933]++;
    if ((! __date_reg_exp.test(json))) {
      _$jscoverage['js/vs_util.js'][933]++;
      return temp;
    }
    _$jscoverage['js/vs_util.js'][935]++;
    function manageDate(obj) {
      _$jscoverage['js/vs_util.js'][937]++;
      if (isString(obj)) {
        _$jscoverage['js/vs_util.js'][939]++;
        var result = __date_reg_exp.exec(obj);
        _$jscoverage['js/vs_util.js'][940]++;
        if ((result && result[1])) {
          _$jscoverage['js/vs_util.js'][942]++;
          obj = new Date(parseInt(result[1]));
        }
      }
      else {
        _$jscoverage['js/vs_util.js'][945]++;
        if (isArray(obj)) {
          _$jscoverage['js/vs_util.js'][947]++;
          for (var i = 0; (i < obj.length); (i++)) {
            _$jscoverage['js/vs_util.js'][947]++;
            obj[i] = manageDate(obj[i]);
}
        }
        else {
          _$jscoverage['js/vs_util.js'][949]++;
          if ((obj instanceof Date)) {
            _$jscoverage['js/vs_util.js'][949]++;
            return obj;
          }
          else {
            _$jscoverage['js/vs_util.js'][950]++;
            if ((obj instanceof Object)) {
              _$jscoverage['js/vs_util.js'][952]++;
              for (var key in obj) {
                _$jscoverage['js/vs_util.js'][952]++;
                obj[key] = manageDate(obj[key]);
}
            }
          }
        }
      }
      _$jscoverage['js/vs_util.js'][954]++;
      return obj;
}
    _$jscoverage['js/vs_util.js'][956]++;
    return manageDate(temp);
}
  _$jscoverage['js/vs_util.js'][957]++;
  ;
  _$jscoverage['js/vs_util.js'][974]++;
  function getElementHeight(elem) {
    _$jscoverage['js/vs_util.js'][976]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][976]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][978]++;
    return getElementDimensions(elem).height;
}
  _$jscoverage['js/vs_util.js'][979]++;
  ;
  _$jscoverage['js/vs_util.js'][992]++;
  function getElementWidth(elem) {
    _$jscoverage['js/vs_util.js'][994]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][994]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][996]++;
    return getElementDimensions(elem).width;
}
  _$jscoverage['js/vs_util.js'][997]++;
  ;
  _$jscoverage['js/vs_util.js'][1013]++;
  function getElementDimensions(elem) {
    _$jscoverage['js/vs_util.js'][1015]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][1015]++;
      return ({});
    }
    _$jscoverage['js/vs_util.js'][1017]++;
    var display = getElementStyle(elem, "display"), els = elem.style, originalVisibility = els.visibility, originalPosition = els.position, originalDisplay = els.display, originalWidth = 0, originalHeight = 0;
    _$jscoverage['js/vs_util.js'][1022]++;
    if (((display !== "none") && (display !== null))) {
      _$jscoverage['js/vs_util.js'][1024]++;
      return ({width: elem.offsetWidth, height: elem.offsetHeight});
    }
    _$jscoverage['js/vs_util.js'][1029]++;
    els.visibility = "hidden";
    _$jscoverage['js/vs_util.js'][1030]++;
    els.position = "absolute";
    _$jscoverage['js/vs_util.js'][1031]++;
    els.display = "block";
    _$jscoverage['js/vs_util.js'][1033]++;
    originalWidth = elem.clientWidth;
    _$jscoverage['js/vs_util.js'][1034]++;
    originalHeight = elem.clientHeight;
    _$jscoverage['js/vs_util.js'][1035]++;
    els.display = originalDisplay;
    _$jscoverage['js/vs_util.js'][1036]++;
    els.position = originalPosition;
    _$jscoverage['js/vs_util.js'][1037]++;
    els.visibility = originalVisibility;
    _$jscoverage['js/vs_util.js'][1039]++;
    return ({width: originalWidth, height: originalHeight});
}
  _$jscoverage['js/vs_util.js'][1040]++;
  ;
  _$jscoverage['js/vs_util.js'][1065]++;
  function getElementStyle(elem, style) {
    _$jscoverage['js/vs_util.js'][1067]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][1067]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1069]++;
    style = ((style === "float")? "cssFloat": camelize(style));
    _$jscoverage['js/vs_util.js'][1070]++;
    var value = elem.style[style], css;
    _$jscoverage['js/vs_util.js'][1071]++;
    if (((! value) || (value === "auto"))) {
      _$jscoverage['js/vs_util.js'][1073]++;
      css = document.defaultView.getComputedStyle(elem, null);
      _$jscoverage['js/vs_util.js'][1074]++;
      value = (css? css[style]: null);
    }
    _$jscoverage['js/vs_util.js'][1076]++;
    if ((style === "opacity")) {
      _$jscoverage['js/vs_util.js'][1076]++;
      return (value? parseFloat(value): 1);
    }
    _$jscoverage['js/vs_util.js'][1077]++;
    return ((value === "auto")? null: value);
}
  _$jscoverage['js/vs_util.js'][1078]++;
  ;
  _$jscoverage['js/vs_util.js'][1096]++;
  function setElementStyle(elem, styles) {
    _$jscoverage['js/vs_util.js'][1098]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][1098]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1100]++;
    var elementStyle = elem.style, property;
    _$jscoverage['js/vs_util.js'][1102]++;
    for (property in styles) {
      _$jscoverage['js/vs_util.js'][1104]++;
      if ((property === "opacity")) {
        _$jscoverage['js/vs_util.js'][1106]++;
        setElementOpacity(elem, styles[property]);
      }
      else {
        _$jscoverage['js/vs_util.js'][1110]++;
        if ((! styles[property])) {
          _$jscoverage['js/vs_util.js'][1112]++;
          elementStyle.removeProperty(property);
        }
        _$jscoverage['js/vs_util.js'][1114]++;
        elementStyle[(((property === "float") || (property === "cssFloat"))? (isUndefined(elementStyle.styleFloat)? "cssFloat": "styleFloat"): property)] = styles[property];
      }
}
}
  _$jscoverage['js/vs_util.js'][1119]++;
  ;
  _$jscoverage['js/vs_util.js'][1140]++;
  function setElementOpacity(elem, value) {
    _$jscoverage['js/vs_util.js'][1142]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][1142]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1143]++;
    var elementStyle = elem.style;
    _$jscoverage['js/vs_util.js'][1145]++;
    if (isUndefined(value)) {
      _$jscoverage['js/vs_util.js'][1145]++;
      elementStyle.removeProperty("opacity");
    }
    _$jscoverage['js/vs_util.js'][1147]++;
    elementStyle.opacity = (((value === 1) || (value === ""))? "": ((value < 1.0000000000000001e-05)? 0: value));
}
  _$jscoverage['js/vs_util.js'][1149]++;
  ;
  _$jscoverage['js/vs_util.js'][1159]++;
  function getElementOpacity(elem) {
    _$jscoverage['js/vs_util.js'][1161]++;
    if ((! isElement(elem))) {
      _$jscoverage['js/vs_util.js'][1161]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1163]++;
    return getElementStyle(elem, "opacity");
}
  _$jscoverage['js/vs_util.js'][1164]++;
  ;
  _$jscoverage['js/vs_util.js'][1174]++;
  function getElementAbsolutePosition(element) {
    _$jscoverage['js/vs_util.js'][1176]++;
    if ((! element)) {
      _$jscoverage['js/vs_util.js'][1177]++;
      return null;
    }
    _$jscoverage['js/vs_util.js'][1178]++;
    if (element.getBoundingClientRect) {
      _$jscoverage['js/vs_util.js'][1180]++;
      var rec = element.getBoundingClientRect();
      _$jscoverage['js/vs_util.js'][1181]++;
      if (rec) {
        _$jscoverage['js/vs_util.js'][1181]++;
        return ({x: rec.left, y: rec.top});
      }
    }
    _$jscoverage['js/vs_util.js'][1183]++;
    var x = 0;
    _$jscoverage['js/vs_util.js'][1184]++;
    var y = 0;
    _$jscoverage['js/vs_util.js'][1185]++;
    var parent = element;
    _$jscoverage['js/vs_util.js'][1186]++;
    while (parent) {
      _$jscoverage['js/vs_util.js'][1188]++;
      var borderXOffset = 0;
      _$jscoverage['js/vs_util.js'][1189]++;
      var borderYOffset = 0;
      _$jscoverage['js/vs_util.js'][1190]++;
      if ((parent != element)) {
        _$jscoverage['js/vs_util.js'][1192]++;
        borderXOffset = parseInt((parent.currentStyle? parent.currentStyle.borderLeftWidth: 0), 0);
        _$jscoverage['js/vs_util.js'][1195]++;
        borderYOffset = parseInt((parent.currentStyle? parent.currentStyle.borderTopWidth: 0), 0);
        _$jscoverage['js/vs_util.js'][1198]++;
        borderXOffset = (isNaN(borderXOffset)? 0: borderXOffset);
        _$jscoverage['js/vs_util.js'][1199]++;
        borderYOffset = (isNaN(borderYOffset)? 0: borderYOffset);
      }
      _$jscoverage['js/vs_util.js'][1202]++;
      x += ((parent.offsetLeft - parent.scrollLeft) + borderXOffset);
      _$jscoverage['js/vs_util.js'][1203]++;
      y += ((parent.offsetTop - parent.scrollTop) + borderYOffset);
      _$jscoverage['js/vs_util.js'][1204]++;
      parent = parent.offsetParent;
}
    _$jscoverage['js/vs_util.js'][1206]++;
    return ({x: x, y: y});
}
  _$jscoverage['js/vs_util.js'][1212]++;
  function _getBoundingClientRect_api1(e) {
    _$jscoverage['js/vs_util.js'][1214]++;
    var rec = getElementAbsolutePosition(e);
    _$jscoverage['js/vs_util.js'][1215]++;
    return ({width: e.offsetWidth, height: e.offsetWidth, left: rec.x, top: rec.y});
}
  _$jscoverage['js/vs_util.js'][1221]++;
  ;
  _$jscoverage['js/vs_util.js'][1226]++;
  function _getBoundingClientRect_api2(e) {
    _$jscoverage['js/vs_util.js'][1228]++;
    return ((e && e.getBoundingClientRect)? e.getBoundingClientRect(): null);
}
  _$jscoverage['js/vs_util.js'][1229]++;
  ;
  _$jscoverage['js/vs_util.js'][1240]++;
  function setElementPos(elem, x, y) {
    _$jscoverage['js/vs_util.js'][1242]++;
    if ((! elem)) {
      _$jscoverage['js/vs_util.js'][1242]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1243]++;
    var elementStyle = elem.style;
    _$jscoverage['js/vs_util.js'][1245]++;
    elementStyle.left = (x + "px");
    _$jscoverage['js/vs_util.js'][1246]++;
    elementStyle.top = (y + "px");
}
  _$jscoverage['js/vs_util.js'][1258]++;
  function setElementSize(elem, w, h) {
    _$jscoverage['js/vs_util.js'][1260]++;
    if ((! elem)) {
      _$jscoverage['js/vs_util.js'][1260]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1261]++;
    var elementStyle = elem.style;
    _$jscoverage['js/vs_util.js'][1263]++;
    elementStyle.width = (w + "px");
    _$jscoverage['js/vs_util.js'][1264]++;
    elementStyle.height = (h + "px");
}
  _$jscoverage['js/vs_util.js'][1275]++;
  function setElementVisibility(elem, v) {
    _$jscoverage['js/vs_util.js'][1277]++;
    if ((! elem)) {
      _$jscoverage['js/vs_util.js'][1277]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1278]++;
    var elementStyle = elem.style;
    _$jscoverage['js/vs_util.js'][1280]++;
    if ((elementStyle || util.isString(elem.innerHTML))) {
      _$jscoverage['js/vs_util.js'][1282]++;
      if (v) {
        _$jscoverage['js/vs_util.js'][1284]++;
        elementStyle.visibility = "visible";
      }
      else {
        _$jscoverage['js/vs_util.js'][1288]++;
        elementStyle.visibility = "hidden";
      }
    }
    else {
      _$jscoverage['js/vs_util.js'][1295]++;
      if (v) {
        _$jscoverage['js/vs_util.js'][1297]++;
        elem.setAttribute("visibility", "visible");
      }
      else {
        _$jscoverage['js/vs_util.js'][1301]++;
        elem.setAttribute("visibility", "hidden");
      }
    }
}
  _$jscoverage['js/vs_util.js'][1314]++;
  function isElementVisible(elem) {
    _$jscoverage['js/vs_util.js'][1316]++;
    if ((! elem)) {
      _$jscoverage['js/vs_util.js'][1316]++;
      return false;
    }
    _$jscoverage['js/vs_util.js'][1317]++;
    var elementStyle = elem.style;
    _$jscoverage['js/vs_util.js'][1319]++;
    if ((elementStyle || util.isString(elem.innerHTML))) {
      _$jscoverage['js/vs_util.js'][1321]++;
      if ((elementStyle.visibility === "hidden")) {
        _$jscoverage['js/vs_util.js'][1321]++;
        return false;
      }
      else {
        _$jscoverage['js/vs_util.js'][1322]++;
        return true;
      }
    }
    else {
      _$jscoverage['js/vs_util.js'][1324]++;
      if ((elem instanceof CharacterData)) {
        _$jscoverage['js/vs_util.js'][1326]++;
        return true;
      }
      else {
        _$jscoverage['js/vs_util.js'][1330]++;
        if ((elem.getAttribute("visibility") === "hidden")) {
          _$jscoverage['js/vs_util.js'][1330]++;
          return false;
        }
        else {
          _$jscoverage['js/vs_util.js'][1331]++;
          return true;
        }
      }
    }
}
  _$jscoverage['js/vs_util.js'][1342]++;
  function removeAllElementChild(elem) {
    _$jscoverage['js/vs_util.js'][1344]++;
    if ((! elem)) {
      _$jscoverage['js/vs_util.js'][1344]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1346]++;
    while (elem.firstChild) {
      _$jscoverage['js/vs_util.js'][1348]++;
      elem.removeChild(elem.firstChild);
}
}
  _$jscoverage['js/vs_util.js'][1350]++;
  ;
  _$jscoverage['js/vs_util.js'][1360]++;
  function setElementInnerText(elem, text) {
    _$jscoverage['js/vs_util.js'][1362]++;
    if ((! elem)) {
      _$jscoverage['js/vs_util.js'][1362]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1364]++;
    removeAllElementChild(elem);
    _$jscoverage['js/vs_util.js'][1366]++;
    if ((! util.isString(text))) {
      _$jscoverage['js/vs_util.js'][1368]++;
      if ((text === undefined)) {
        _$jscoverage['js/vs_util.js'][1368]++;
        text = "";
      }
      else {
        _$jscoverage['js/vs_util.js'][1369]++;
        if ((text === null)) {
          _$jscoverage['js/vs_util.js'][1369]++;
          text = "";
        }
        else {
          _$jscoverage['js/vs_util.js'][1370]++;
          if (util.isNumber(text)) {
            _$jscoverage['js/vs_util.js'][1370]++;
            text = ("" + text);
          }
          else {
            _$jscoverage['js/vs_util.js'][1371]++;
            if (text.toString) {
              _$jscoverage['js/vs_util.js'][1371]++;
              text = text.toString();
            }
            else {
              _$jscoverage['js/vs_util.js'][1372]++;
              text = "";
            }
          }
        }
      }
    }
    _$jscoverage['js/vs_util.js'][1374]++;
    var lines = text.split("\n"), i = 0;
    _$jscoverage['js/vs_util.js'][1375]++;
    if ((! lines.length)) {
      _$jscoverage['js/vs_util.js'][1375]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1376]++;
    elem.appendChild(document.createTextNode(lines[i]));
    _$jscoverage['js/vs_util.js'][1377]++;
    (i++);
    _$jscoverage['js/vs_util.js'][1378]++;
    for (; (i < lines.length); (i++)) {
      _$jscoverage['js/vs_util.js'][1380]++;
      elem.appendChild(document.createElement("br"));
      _$jscoverage['js/vs_util.js'][1381]++;
      elem.appendChild(document.createTextNode(lines[i]));
}
}
  _$jscoverage['js/vs_util.js'][1383]++;
  ;
  _$jscoverage['js/vs_util.js'][1388]++;
  function setElementWebkitTransform(elem, transform) {
    _$jscoverage['js/vs_util.js'][1390]++;
    if ((elem && elem.style)) {
      _$jscoverage['js/vs_util.js'][1390]++;
      elem.style.webkitTransform = transform;
    }
}
  _$jscoverage['js/vs_util.js'][1396]++;
  function getElementWebkitTransform(elem, transform) {
    _$jscoverage['js/vs_util.js'][1398]++;
    if (elem) {
      _$jscoverage['js/vs_util.js'][1398]++;
      return window.getComputedStyle(elem).webkitTransform;
    }
}
  _$jscoverage['js/vs_util.js'][1404]++;
  function setElementMSTransform(elem, transform) {
    _$jscoverage['js/vs_util.js'][1406]++;
    if ((elem && elem.style)) {
      _$jscoverage['js/vs_util.js'][1406]++;
      elem.style.msTransform = transform;
    }
}
  _$jscoverage['js/vs_util.js'][1412]++;
  function getElementMSTransform(elem, transform) {
    _$jscoverage['js/vs_util.js'][1414]++;
    if (elem) {
      _$jscoverage['js/vs_util.js'][1414]++;
      return window.getComputedStyle(elem).msTransform;
    }
}
  _$jscoverage['js/vs_util.js'][1425]++;
  var setElementTransform;
  _$jscoverage['js/vs_util.js'][1435]++;
  var getElementTransform;
  _$jscoverage['js/vs_util.js'][1437]++;
  if ((vsTestStyle.webkitTransform !== undefined)) {
    _$jscoverage['js/vs_util.js'][1439]++;
    setElementTransform = setElementWebkitTransform;
    _$jscoverage['js/vs_util.js'][1440]++;
    getElementTransform = getElementWebkitTransform;
  }
  else {
    _$jscoverage['js/vs_util.js'][1442]++;
    if ((vsTestStyle.msTransform !== undefined)) {
      _$jscoverage['js/vs_util.js'][1444]++;
      setElementTransform = setElementMSTransform;
      _$jscoverage['js/vs_util.js'][1445]++;
      getElementTransform = getElementMSTransform;
    }
  }
  _$jscoverage['js/vs_util.js'][1460]++;
  Array.prototype._remove = (function (from, to) {
  _$jscoverage['js/vs_util.js'][1462]++;
  var rest = this.slice((((to || from) + 1) || this.length));
  _$jscoverage['js/vs_util.js'][1463]++;
  this.length = ((from < 0)? (this.length + from): from);
  _$jscoverage['js/vs_util.js'][1464]++;
  return this.push.apply(this, rest);
});
  _$jscoverage['js/vs_util.js'][1471]++;
  var _findItem = (function (obj, from) {
  _$jscoverage['js/vs_util.js'][1473]++;
  var len = this.length;
  _$jscoverage['js/vs_util.js'][1475]++;
  var from = (from? from: 0);
  _$jscoverage['js/vs_util.js'][1476]++;
  from = ((from < 0)? 0: from);
  _$jscoverage['js/vs_util.js'][1478]++;
  while ((from < len)) {
    _$jscoverage['js/vs_util.js'][1480]++;
    if ((this[from] === obj)) {
      _$jscoverage['js/vs_util.js'][1480]++;
      return from;
    }
    _$jscoverage['js/vs_util.js'][1481]++;
    (from++);
}
  _$jscoverage['js/vs_util.js'][1483]++;
  return -1;
});
  _$jscoverage['js/vs_util.js'][1496]++;
  Array.prototype.findItem = (Array.prototype.indexOf? Array.prototype.indexOf: _findItem);
  _$jscoverage['js/vs_util.js'][1508]++;
  Array.prototype.remove = (function (from, to) {
  _$jscoverage['js/vs_util.js'][1510]++;
  if ((((typeof from) === "object") || util.isString(from))) {
    _$jscoverage['js/vs_util.js'][1512]++;
    var i = 0;
    _$jscoverage['js/vs_util.js'][1513]++;
    while ((i < this.length)) {
      _$jscoverage['js/vs_util.js'][1515]++;
      if ((this[i] === from)) {
        _$jscoverage['js/vs_util.js'][1515]++;
        this._remove(i);
      }
      else {
        _$jscoverage['js/vs_util.js'][1516]++;
        (i++);
      }
}
  }
  else {
    _$jscoverage['js/vs_util.js'][1519]++;
    this._remove(from, to);
  }
  _$jscoverage['js/vs_util.js'][1520]++;
  return this;
});
  _$jscoverage['js/vs_util.js'][1528]++;
  Array.prototype.removeAll = (function () {
  _$jscoverage['js/vs_util.js'][1530]++;
  while ((this.length > 0)) {
    _$jscoverage['js/vs_util.js'][1530]++;
    this._remove(0);
}
  _$jscoverage['js/vs_util.js'][1531]++;
  return this;
});
  _$jscoverage['js/vs_util.js'][1539]++;
  Array.prototype.clone = (function () {
  _$jscoverage['js/vs_util.js'][1541]++;
  return this.slice();
});
  _$jscoverage['js/vs_util.js'][1558]++;
  function importFile(path, doc, clb, type) {
    _$jscoverage['js/vs_util.js'][1560]++;
    if ((! doc)) {
      _$jscoverage['js/vs_util.js'][1560]++;
      doc = document;
    }
    _$jscoverage['js/vs_util.js'][1562]++;
    var js_effets, css_style;
    _$jscoverage['js/vs_util.js'][1564]++;
    if (((type === "js") || (path.search("\\.js") >= 0))) {
      _$jscoverage['js/vs_util.js'][1566]++;
      js_effets = doc.createElement("script");
      _$jscoverage['js/vs_util.js'][1567]++;
      js_effets.setAttribute("type", "text/javascript");
      _$jscoverage['js/vs_util.js'][1568]++;
      js_effets.setAttribute("src", path);
      _$jscoverage['js/vs_util.js'][1569]++;
      if (clb) {
        _$jscoverage['js/vs_util.js'][1571]++;
        js_effets.onload = (function () {
  _$jscoverage['js/vs_util.js'][1573]++;
  clb.call(this, path);
});
      }
      _$jscoverage['js/vs_util.js'][1576]++;
      if ((! doc.head)) {
        _$jscoverage['js/vs_util.js'][1576]++;
        doc.head = doc.querySelector("head");
      }
      _$jscoverage['js/vs_util.js'][1577]++;
      doc.head.appendChild(js_effets);
    }
    else {
      _$jscoverage['js/vs_util.js'][1579]++;
      if (((type === "css") || (path.search("\\.css") >= 0))) {
        _$jscoverage['js/vs_util.js'][1581]++;
        css_style = doc.createElement("link");
        _$jscoverage['js/vs_util.js'][1582]++;
        css_style.setAttribute("rel", "stylesheet");
        _$jscoverage['js/vs_util.js'][1583]++;
        css_style.setAttribute("type", "text/css");
        _$jscoverage['js/vs_util.js'][1584]++;
        css_style.setAttribute("href", path);
        _$jscoverage['js/vs_util.js'][1585]++;
        css_style.setAttribute("media", "screen");
        _$jscoverage['js/vs_util.js'][1586]++;
        if (util.isFunction(clb)) {
          _$jscoverage['js/vs_util.js'][1588]++;
          var count = 0;
          _$jscoverage['js/vs_util.js'][1593]++;
          (function () {
  _$jscoverage['js/vs_util.js'][1595]++;
  if (((! css_style.sheet) || (! css_style.sheet.cssRules))) {
    _$jscoverage['js/vs_util.js'][1597]++;
    if (((count++) < 100)) {
      _$jscoverage['js/vs_util.js'][1599]++;
      cssTimeout = setTimeout(arguments.callee, 100);
    }
    else {
      _$jscoverage['js/vs_util.js'][1603]++;
      console.error(("CSS load of " + path + " failed!"));
    }
    _$jscoverage['js/vs_util.js'][1605]++;
    return;
  }
  _$jscoverage['js/vs_util.js'][1606]++;
  ;
  _$jscoverage['js/vs_util.js'][1607]++;
  if ((css_style.sheet.cssRules && (css_style.sheet.cssRules.length === 0))) {
    _$jscoverage['js/vs_util.js'][1610]++;
    console.error(("CSS load of " + path + " failed!"));
  }
  else {
    _$jscoverage['js/vs_util.js'][1614]++;
    clb.call(document, path);
  }
})();
        }
        _$jscoverage['js/vs_util.js'][1618]++;
        if ((! doc.head)) {
          _$jscoverage['js/vs_util.js'][1618]++;
          doc.head = doc.querySelector("head");
        }
        _$jscoverage['js/vs_util.js'][1619]++;
        doc.head.appendChild(css_style);
      }
    }
}
  _$jscoverage['js/vs_util.js'][1630]++;
  var SET_STYLE_OPTIMIZATION = true;
  _$jscoverage['js/vs_util.js'][1635]++;
  var _current_platform_id = 0;
  _$jscoverage['js/vs_util.js'][1636]++;
  window._current_platform_id = _current_platform_id;
  _$jscoverage['js/vs_util.js'][1646]++;
  var setActiveStyleSheet = (function (title) {
  _$jscoverage['js/vs_util.js'][1648]++;
  var i = 0, stylesheets = document.getElementsByTagName("link"), stylesheet, info, id, app, size;
  _$jscoverage['js/vs_util.js'][1651]++;
  _current_platform_id = title;
  _$jscoverage['js/vs_util.js'][1652]++;
  var apps = window.Application_applications;
  _$jscoverage['js/vs_util.js'][1654]++;
  if (SET_STYLE_OPTIMIZATION) {
    _$jscoverage['js/vs_util.js'][1656]++;
    if (apps) {
      _$jscoverage['js/vs_util.js'][1656]++;
      for (id in apps) {
        _$jscoverage['js/vs_util.js'][1658]++;
        app = apps[id];
        _$jscoverage['js/vs_util.js'][1659]++;
        if (app.view) {
          _$jscoverage['js/vs_util.js'][1659]++;
          app.view.style.display = "none";
        }
}
    }
  }
  _$jscoverage['js/vs_util.js'][1663]++;
  for (i = 0; (i < stylesheets.length); (i++)) {
    _$jscoverage['js/vs_util.js'][1665]++;
    stylesheet = stylesheets[i];
    _$jscoverage['js/vs_util.js'][1668]++;
    if ((! stylesheet.getAttribute("title"))) {
      _$jscoverage['js/vs_util.js'][1668]++;
      continue;
    }
    _$jscoverage['js/vs_util.js'][1671]++;
    if ((stylesheet.getAttribute("title") !== title)) {
      _$jscoverage['js/vs_util.js'][1673]++;
      stylesheet.setAttribute("disabled", true);
    }
    else {
      _$jscoverage['js/vs_util.js'][1676]++;
      stylesheet.removeAttribute("disabled");
    }
}
  _$jscoverage['js/vs_util.js'][1680]++;
  if (SET_STYLE_OPTIMIZATION) {
    _$jscoverage['js/vs_util.js'][1682]++;
    if (apps) {
      _$jscoverage['js/vs_util.js'][1682]++;
      for (id in apps) {
        _$jscoverage['js/vs_util.js'][1684]++;
        app = apps[id];
        _$jscoverage['js/vs_util.js'][1685]++;
        if (app.view) {
          _$jscoverage['js/vs_util.js'][1685]++;
          app.view.style.display = "block";
        }
}
    }
  }
});
  _$jscoverage['js/vs_util.js'][1742]++;
  function preloadTemplate(comp_name) {
    _$jscoverage['js/vs_util.js'][1744]++;
    var path = (comp_name + ".xhtml"), xmlRequest;
    _$jscoverage['js/vs_util.js'][1746]++;
    if ((vs.ui && vs.ui.View && vs.ui.View.__comp_templates[path])) {
      _$jscoverage['js/vs_util.js'][1746]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1748]++;
    xmlRequest = new XMLHttpRequest();
    _$jscoverage['js/vs_util.js'][1749]++;
    xmlRequest.open("GET", path, false);
    _$jscoverage['js/vs_util.js'][1750]++;
    xmlRequest.send(null);
    _$jscoverage['js/vs_util.js'][1752]++;
    if ((xmlRequest.readyState === 4)) {
      _$jscoverage['js/vs_util.js'][1754]++;
      if (((xmlRequest.status === 200) || (xmlRequest.status === 0))) {
        _$jscoverage['js/vs_util.js'][1756]++;
        data = xmlRequest.responseText;
        _$jscoverage['js/vs_util.js'][1757]++;
        if ((vs.ui && vs.ui.View)) {
          _$jscoverage['js/vs_util.js'][1757]++;
          vs.ui.View.__comp_templates[path] = data;
        }
      }
      else {
        _$jscoverage['js/vs_util.js'][1761]++;
        console.error(("Template file for component '" + comp_name + "' unfound"));
        _$jscoverage['js/vs_util.js'][1763]++;
        return;
      }
    }
    else {
      _$jscoverage['js/vs_util.js'][1768]++;
      console.error(("Pb when load the component '" + comp_name + "' template"));
      _$jscoverage['js/vs_util.js'][1770]++;
      return;
    }
    _$jscoverage['js/vs_util.js'][1772]++;
    xmlRequest = null;
}
  _$jscoverage['js/vs_util.js'][1779]++;
  util.extend(util, {vsTestElem: vsTestElem, vsTestStyle: vsTestStyle, extendClass: extendClass, defineProperty: (Object.defineProperty? _defineProperty_api2: _defineProperty_api1), defineClassProperty: defineClassProperty, defineClassProperties: defineClassProperties, clone: clone, free: free, toJSON: toJSON, isElement: isElement, isArray: isArray, isFunction: isFunction, isString: isString, isNumber: isNumber, isUndefined: isUndefined, hasClassName: hasClassName, addClassName: addClassName, removeClassName: removeClassName, toggleClassName: toggleClassName, htmlEncode: htmlEncode, strip: strip, camelize: camelize, capitalize: capitalize, underscore: underscore, parseJSON: parseJSON, getElementHeight: getElementHeight, getElementWidth: getElementWidth, getElementDimensions: getElementDimensions, getElementStyle: getElementStyle, setElementStyle: setElementStyle, setElementOpacity: setElementOpacity, getElementOpacity: getElementOpacity, getElementAbsolutePosition: getElementAbsolutePosition, setElementPos: setElementPos, setElementSize: setElementSize, setElementVisibility: setElementVisibility, isElementVisible: isElementVisible, removeAllElementChild: removeAllElementChild, setElementInnerText: setElementInnerText, setElementTransform: setElementTransform, getElementTransform: getElementTransform, getBoundingClientRect: (vsTestElem.getBoundingClientRect? _getBoundingClientRect_api2: _getBoundingClientRect_api1), importFile: importFile, setActiveStyleSheet: setActiveStyleSheet, preloadTemplate: preloadTemplate, __date_reg_exp: __date_reg_exp, _findItem: _findItem, _defineProperty_api1: _defineProperty_api1, _defineProperty_api2: _defineProperty_api2, _extend_api1: _extend_api1, _extend_api2: _extend_api2});
})(window);
