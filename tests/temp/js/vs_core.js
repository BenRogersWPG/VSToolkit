/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
}
if (! _$jscoverage['js/vs_core.js']) {
  _$jscoverage['js/vs_core.js'] = [];
  _$jscoverage['js/vs_core.js'][19] = 0;
  _$jscoverage['js/vs_core.js'][21] = 0;
  _$jscoverage['js/vs_core.js'][45] = 0;
  _$jscoverage['js/vs_core.js'][52] = 0;
  _$jscoverage['js/vs_core.js'][62] = 0;
  _$jscoverage['js/vs_core.js'][64] = 0;
  _$jscoverage['js/vs_core.js'][75] = 0;
  _$jscoverage['js/vs_core.js'][77] = 0;
  _$jscoverage['js/vs_core.js'][86] = 0;
  _$jscoverage['js/vs_core.js'][87] = 0;
  _$jscoverage['js/vs_core.js'][123] = 0;
  _$jscoverage['js/vs_core.js'][125] = 0;
  _$jscoverage['js/vs_core.js'][126] = 0;
  _$jscoverage['js/vs_core.js'][127] = 0;
  _$jscoverage['js/vs_core.js'][128] = 0;
  _$jscoverage['js/vs_core.js'][130] = 0;
  _$jscoverage['js/vs_core.js'][132] = 0;
  _$jscoverage['js/vs_core.js'][136] = 0;
  _$jscoverage['js/vs_core.js'][169] = 0;
  _$jscoverage['js/vs_core.js'][171] = 0;
  _$jscoverage['js/vs_core.js'][173] = 0;
  _$jscoverage['js/vs_core.js'][177] = 0;
  _$jscoverage['js/vs_core.js'][179] = 0;
  _$jscoverage['js/vs_core.js'][180] = 0;
  _$jscoverage['js/vs_core.js'][183] = 0;
  _$jscoverage['js/vs_core.js'][185] = 0;
  _$jscoverage['js/vs_core.js'][187] = 0;
  _$jscoverage['js/vs_core.js'][188] = 0;
  _$jscoverage['js/vs_core.js'][192] = 0;
  _$jscoverage['js/vs_core.js'][196] = 0;
  _$jscoverage['js/vs_core.js'][198] = 0;
  _$jscoverage['js/vs_core.js'][201] = 0;
  _$jscoverage['js/vs_core.js'][204] = 0;
  _$jscoverage['js/vs_core.js'][207] = 0;
  _$jscoverage['js/vs_core.js'][210] = 0;
  _$jscoverage['js/vs_core.js'][226] = 0;
  _$jscoverage['js/vs_core.js'][228] = 0;
  _$jscoverage['js/vs_core.js'][256] = 0;
  _$jscoverage['js/vs_core.js'][257] = 0;
  _$jscoverage['js/vs_core.js'][259] = 0;
  _$jscoverage['js/vs_core.js'][260] = 0;
  _$jscoverage['js/vs_core.js'][263] = 0;
  _$jscoverage['js/vs_core.js'][265] = 0;
  _$jscoverage['js/vs_core.js'][266] = 0;
  _$jscoverage['js/vs_core.js'][269] = 0;
  _$jscoverage['js/vs_core.js'][270] = 0;
  _$jscoverage['js/vs_core.js'][275] = 0;
  _$jscoverage['js/vs_core.js'][276] = 0;
  _$jscoverage['js/vs_core.js'][278] = 0;
  _$jscoverage['js/vs_core.js'][279] = 0;
  _$jscoverage['js/vs_core.js'][280] = 0;
  _$jscoverage['js/vs_core.js'][281] = 0;
  _$jscoverage['js/vs_core.js'][287] = 0;
  _$jscoverage['js/vs_core.js'][289] = 0;
  _$jscoverage['js/vs_core.js'][291] = 0;
  _$jscoverage['js/vs_core.js'][292] = 0;
  _$jscoverage['js/vs_core.js'][293] = 0;
  _$jscoverage['js/vs_core.js'][297] = 0;
  _$jscoverage['js/vs_core.js'][299] = 0;
  _$jscoverage['js/vs_core.js'][300] = 0;
  _$jscoverage['js/vs_core.js'][302] = 0;
  _$jscoverage['js/vs_core.js'][303] = 0;
  _$jscoverage['js/vs_core.js'][306] = 0;
  _$jscoverage['js/vs_core.js'][307] = 0;
  _$jscoverage['js/vs_core.js'][319] = 0;
  _$jscoverage['js/vs_core.js'][321] = 0;
  _$jscoverage['js/vs_core.js'][334] = 0;
  _$jscoverage['js/vs_core.js'][347] = 0;
  _$jscoverage['js/vs_core.js'][348] = 0;
  _$jscoverage['js/vs_core.js'][350] = 0;
  _$jscoverage['js/vs_core.js'][362] = 0;
  _$jscoverage['js/vs_core.js'][367] = 0;
  _$jscoverage['js/vs_core.js'][380] = 0;
  _$jscoverage['js/vs_core.js'][383] = 0;
  _$jscoverage['js/vs_core.js'][385] = 0;
  _$jscoverage['js/vs_core.js'][387] = 0;
  _$jscoverage['js/vs_core.js'][388] = 0;
  _$jscoverage['js/vs_core.js'][389] = 0;
  _$jscoverage['js/vs_core.js'][390] = 0;
  _$jscoverage['js/vs_core.js'][391] = 0;
  _$jscoverage['js/vs_core.js'][392] = 0;
  _$jscoverage['js/vs_core.js'][395] = 0;
  _$jscoverage['js/vs_core.js'][396] = 0;
  _$jscoverage['js/vs_core.js'][397] = 0;
  _$jscoverage['js/vs_core.js'][400] = 0;
  _$jscoverage['js/vs_core.js'][401] = 0;
  _$jscoverage['js/vs_core.js'][404] = 0;
  _$jscoverage['js/vs_core.js'][405] = 0;
  _$jscoverage['js/vs_core.js'][408] = 0;
  _$jscoverage['js/vs_core.js'][431] = 0;
  _$jscoverage['js/vs_core.js'][432] = 0;
  _$jscoverage['js/vs_core.js'][446] = 0;
  _$jscoverage['js/vs_core.js'][483] = 0;
  _$jscoverage['js/vs_core.js'][485] = 0;
  _$jscoverage['js/vs_core.js'][486] = 0;
  _$jscoverage['js/vs_core.js'][487] = 0;
  _$jscoverage['js/vs_core.js'][490] = 0;
  _$jscoverage['js/vs_core.js'][492] = 0;
  _$jscoverage['js/vs_core.js'][505] = 0;
  _$jscoverage['js/vs_core.js'][507] = 0;
  _$jscoverage['js/vs_core.js'][509] = 0;
  _$jscoverage['js/vs_core.js'][510] = 0;
  _$jscoverage['js/vs_core.js'][512] = 0;
  _$jscoverage['js/vs_core.js'][513] = 0;
  _$jscoverage['js/vs_core.js'][515] = 0;
  _$jscoverage['js/vs_core.js'][530] = 0;
  _$jscoverage['js/vs_core.js'][532] = 0;
  _$jscoverage['js/vs_core.js'][535] = 0;
  _$jscoverage['js/vs_core.js'][537] = 0;
  _$jscoverage['js/vs_core.js'][538] = 0;
  _$jscoverage['js/vs_core.js'][540] = 0;
  _$jscoverage['js/vs_core.js'][542] = 0;
  _$jscoverage['js/vs_core.js'][546] = 0;
  _$jscoverage['js/vs_core.js'][547] = 0;
  _$jscoverage['js/vs_core.js'][550] = 0;
  _$jscoverage['js/vs_core.js'][552] = 0;
  _$jscoverage['js/vs_core.js'][554] = 0;
  _$jscoverage['js/vs_core.js'][560] = 0;
  _$jscoverage['js/vs_core.js'][562] = 0;
  _$jscoverage['js/vs_core.js'][565] = 0;
  _$jscoverage['js/vs_core.js'][567] = 0;
  _$jscoverage['js/vs_core.js'][570] = 0;
  _$jscoverage['js/vs_core.js'][572] = 0;
  _$jscoverage['js/vs_core.js'][573] = 0;
  _$jscoverage['js/vs_core.js'][574] = 0;
  _$jscoverage['js/vs_core.js'][578] = 0;
  _$jscoverage['js/vs_core.js'][580] = 0;
  _$jscoverage['js/vs_core.js'][584] = 0;
  _$jscoverage['js/vs_core.js'][587] = 0;
  _$jscoverage['js/vs_core.js'][592] = 0;
  _$jscoverage['js/vs_core.js'][593] = 0;
  _$jscoverage['js/vs_core.js'][594] = 0;
  _$jscoverage['js/vs_core.js'][598] = 0;
  _$jscoverage['js/vs_core.js'][601] = 0;
  _$jscoverage['js/vs_core.js'][603] = 0;
  _$jscoverage['js/vs_core.js'][608] = 0;
  _$jscoverage['js/vs_core.js'][610] = 0;
  _$jscoverage['js/vs_core.js'][611] = 0;
  _$jscoverage['js/vs_core.js'][615] = 0;
  _$jscoverage['js/vs_core.js'][617] = 0;
  _$jscoverage['js/vs_core.js'][621] = 0;
  _$jscoverage['js/vs_core.js'][623] = 0;
  _$jscoverage['js/vs_core.js'][624] = 0;
  _$jscoverage['js/vs_core.js'][628] = 0;
  _$jscoverage['js/vs_core.js'][632] = 0;
  _$jscoverage['js/vs_core.js'][634] = 0;
  _$jscoverage['js/vs_core.js'][636] = 0;
  _$jscoverage['js/vs_core.js'][637] = 0;
  _$jscoverage['js/vs_core.js'][638] = 0;
  _$jscoverage['js/vs_core.js'][641] = 0;
  _$jscoverage['js/vs_core.js'][642] = 0;
  _$jscoverage['js/vs_core.js'][645] = 0;
  _$jscoverage['js/vs_core.js'][648] = 0;
  _$jscoverage['js/vs_core.js'][650] = 0;
  _$jscoverage['js/vs_core.js'][651] = 0;
  _$jscoverage['js/vs_core.js'][653] = 0;
  _$jscoverage['js/vs_core.js'][657] = 0;
  _$jscoverage['js/vs_core.js'][659] = 0;
  _$jscoverage['js/vs_core.js'][660] = 0;
  _$jscoverage['js/vs_core.js'][661] = 0;
  _$jscoverage['js/vs_core.js'][664] = 0;
  _$jscoverage['js/vs_core.js'][694] = 0;
  _$jscoverage['js/vs_core.js'][695] = 0;
  _$jscoverage['js/vs_core.js'][696] = 0;
  _$jscoverage['js/vs_core.js'][711] = 0;
  _$jscoverage['js/vs_core.js'][713] = 0;
  _$jscoverage['js/vs_core.js'][714] = 0;
  _$jscoverage['js/vs_core.js'][715] = 0;
  _$jscoverage['js/vs_core.js'][716] = 0;
  _$jscoverage['js/vs_core.js'][717] = 0;
  _$jscoverage['js/vs_core.js'][718] = 0;
  _$jscoverage['js/vs_core.js'][721] = 0;
  _$jscoverage['js/vs_core.js'][729] = 0;
  _$jscoverage['js/vs_core.js'][730] = 0;
  _$jscoverage['js/vs_core.js'][738] = 0;
  _$jscoverage['js/vs_core.js'][745] = 0;
  _$jscoverage['js/vs_core.js'][752] = 0;
  _$jscoverage['js/vs_core.js'][758] = 0;
  _$jscoverage['js/vs_core.js'][781] = 0;
  _$jscoverage['js/vs_core.js'][804] = 0;
  _$jscoverage['js/vs_core.js'][806] = 0;
  _$jscoverage['js/vs_core.js'][810] = 0;
  _$jscoverage['js/vs_core.js'][812] = 0;
  _$jscoverage['js/vs_core.js'][814] = 0;
  _$jscoverage['js/vs_core.js'][816] = 0;
  _$jscoverage['js/vs_core.js'][819] = 0;
  _$jscoverage['js/vs_core.js'][821] = 0;
  _$jscoverage['js/vs_core.js'][824] = 0;
  _$jscoverage['js/vs_core.js'][826] = 0;
  _$jscoverage['js/vs_core.js'][828] = 0;
  _$jscoverage['js/vs_core.js'][829] = 0;
  _$jscoverage['js/vs_core.js'][831] = 0;
  _$jscoverage['js/vs_core.js'][833] = 0;
  _$jscoverage['js/vs_core.js'][834] = 0;
  _$jscoverage['js/vs_core.js'][837] = 0;
  _$jscoverage['js/vs_core.js'][838] = 0;
  _$jscoverage['js/vs_core.js'][840] = 0;
  _$jscoverage['js/vs_core.js'][841] = 0;
  _$jscoverage['js/vs_core.js'][843] = 0;
  _$jscoverage['js/vs_core.js'][846] = 0;
  _$jscoverage['js/vs_core.js'][848] = 0;
  _$jscoverage['js/vs_core.js'][849] = 0;
  _$jscoverage['js/vs_core.js'][851] = 0;
  _$jscoverage['js/vs_core.js'][854] = 0;
  _$jscoverage['js/vs_core.js'][856] = 0;
  _$jscoverage['js/vs_core.js'][857] = 0;
  _$jscoverage['js/vs_core.js'][858] = 0;
  _$jscoverage['js/vs_core.js'][859] = 0;
  _$jscoverage['js/vs_core.js'][862] = 0;
  _$jscoverage['js/vs_core.js'][881] = 0;
  _$jscoverage['js/vs_core.js'][883] = 0;
  _$jscoverage['js/vs_core.js'][891] = 0;
  _$jscoverage['js/vs_core.js'][898] = 0;
  _$jscoverage['js/vs_core.js'][905] = 0;
  _$jscoverage['js/vs_core.js'][913] = 0;
  _$jscoverage['js/vs_core.js'][918] = 0;
  _$jscoverage['js/vs_core.js'][920] = 0;
  _$jscoverage['js/vs_core.js'][921] = 0;
  _$jscoverage['js/vs_core.js'][923] = 0;
  _$jscoverage['js/vs_core.js'][926] = 0;
  _$jscoverage['js/vs_core.js'][928] = 0;
  _$jscoverage['js/vs_core.js'][929] = 0;
  _$jscoverage['js/vs_core.js'][930] = 0;
  _$jscoverage['js/vs_core.js'][932] = 0;
  _$jscoverage['js/vs_core.js'][934] = 0;
  _$jscoverage['js/vs_core.js'][936] = 0;
  _$jscoverage['js/vs_core.js'][937] = 0;
  _$jscoverage['js/vs_core.js'][941] = 0;
  _$jscoverage['js/vs_core.js'][943] = 0;
  _$jscoverage['js/vs_core.js'][945] = 0;
  _$jscoverage['js/vs_core.js'][947] = 0;
  _$jscoverage['js/vs_core.js'][954] = 0;
  _$jscoverage['js/vs_core.js'][956] = 0;
  _$jscoverage['js/vs_core.js'][957] = 0;
  _$jscoverage['js/vs_core.js'][959] = 0;
  _$jscoverage['js/vs_core.js'][961] = 0;
  _$jscoverage['js/vs_core.js'][962] = 0;
  _$jscoverage['js/vs_core.js'][964] = 0;
  _$jscoverage['js/vs_core.js'][966] = 0;
  _$jscoverage['js/vs_core.js'][967] = 0;
  _$jscoverage['js/vs_core.js'][971] = 0;
  _$jscoverage['js/vs_core.js'][973] = 0;
  _$jscoverage['js/vs_core.js'][975] = 0;
  _$jscoverage['js/vs_core.js'][981] = 0;
  _$jscoverage['js/vs_core.js'][983] = 0;
  _$jscoverage['js/vs_core.js'][985] = 0;
  _$jscoverage['js/vs_core.js'][987] = 0;
  _$jscoverage['js/vs_core.js'][994] = 0;
  _$jscoverage['js/vs_core.js'][1072] = 0;
  _$jscoverage['js/vs_core.js'][1074] = 0;
  _$jscoverage['js/vs_core.js'][1075] = 0;
  _$jscoverage['js/vs_core.js'][1076] = 0;
  _$jscoverage['js/vs_core.js'][1078] = 0;
  _$jscoverage['js/vs_core.js'][1079] = 0;
  _$jscoverage['js/vs_core.js'][1082] = 0;
  _$jscoverage['js/vs_core.js'][1122] = 0;
  _$jscoverage['js/vs_core.js'][1124] = 0;
  _$jscoverage['js/vs_core.js'][1126] = 0;
  _$jscoverage['js/vs_core.js'][1128] = 0;
  _$jscoverage['js/vs_core.js'][1130] = 0;
  _$jscoverage['js/vs_core.js'][1131] = 0;
  _$jscoverage['js/vs_core.js'][1133] = 0;
  _$jscoverage['js/vs_core.js'][1134] = 0;
  _$jscoverage['js/vs_core.js'][1136] = 0;
  _$jscoverage['js/vs_core.js'][1138] = 0;
  _$jscoverage['js/vs_core.js'][1140] = 0;
  _$jscoverage['js/vs_core.js'][1141] = 0;
  _$jscoverage['js/vs_core.js'][1144] = 0;
  _$jscoverage['js/vs_core.js'][1173] = 0;
  _$jscoverage['js/vs_core.js'][1174] = 0;
  _$jscoverage['js/vs_core.js'][1176] = 0;
  _$jscoverage['js/vs_core.js'][1177] = 0;
  _$jscoverage['js/vs_core.js'][1179] = 0;
  _$jscoverage['js/vs_core.js'][1180] = 0;
  _$jscoverage['js/vs_core.js'][1182] = 0;
  _$jscoverage['js/vs_core.js'][1183] = 0;
  _$jscoverage['js/vs_core.js'][1185] = 0;
  _$jscoverage['js/vs_core.js'][1203] = 0;
  _$jscoverage['js/vs_core.js'][1205] = 0;
  _$jscoverage['js/vs_core.js'][1207] = 0;
  _$jscoverage['js/vs_core.js'][1209] = 0;
  _$jscoverage['js/vs_core.js'][1210] = 0;
  _$jscoverage['js/vs_core.js'][1212] = 0;
  _$jscoverage['js/vs_core.js'][1213] = 0;
  _$jscoverage['js/vs_core.js'][1215] = 0;
  _$jscoverage['js/vs_core.js'][1217] = 0;
  _$jscoverage['js/vs_core.js'][1219] = 0;
  _$jscoverage['js/vs_core.js'][1221] = 0;
  _$jscoverage['js/vs_core.js'][1222] = 0;
  _$jscoverage['js/vs_core.js'][1224] = 0;
  _$jscoverage['js/vs_core.js'][1228] = 0;
  _$jscoverage['js/vs_core.js'][1229] = 0;
  _$jscoverage['js/vs_core.js'][1232] = 0;
  _$jscoverage['js/vs_core.js'][1234] = 0;
  _$jscoverage['js/vs_core.js'][1236] = 0;
  _$jscoverage['js/vs_core.js'][1238] = 0;
  _$jscoverage['js/vs_core.js'][1255] = 0;
  _$jscoverage['js/vs_core.js'][1270] = 0;
  _$jscoverage['js/vs_core.js'][1288] = 0;
  _$jscoverage['js/vs_core.js'][1290] = 0;
  _$jscoverage['js/vs_core.js'][1292] = 0;
  _$jscoverage['js/vs_core.js'][1294] = 0;
  _$jscoverage['js/vs_core.js'][1297] = 0;
  _$jscoverage['js/vs_core.js'][1299] = 0;
  _$jscoverage['js/vs_core.js'][1300] = 0;
  _$jscoverage['js/vs_core.js'][1304] = 0;
  _$jscoverage['js/vs_core.js'][1306] = 0;
  _$jscoverage['js/vs_core.js'][1307] = 0;
  _$jscoverage['js/vs_core.js'][1309] = 0;
  _$jscoverage['js/vs_core.js'][1312] = 0;
  _$jscoverage['js/vs_core.js'][1314] = 0;
  _$jscoverage['js/vs_core.js'][1316] = 0;
  _$jscoverage['js/vs_core.js'][1318] = 0;
  _$jscoverage['js/vs_core.js'][1320] = 0;
  _$jscoverage['js/vs_core.js'][1324] = 0;
  _$jscoverage['js/vs_core.js'][1327] = 0;
  _$jscoverage['js/vs_core.js'][1329] = 0;
  _$jscoverage['js/vs_core.js'][1330] = 0;
  _$jscoverage['js/vs_core.js'][1334] = 0;
  _$jscoverage['js/vs_core.js'][1348] = 0;
  _$jscoverage['js/vs_core.js'][1350] = 0;
  _$jscoverage['js/vs_core.js'][1351] = 0;
  _$jscoverage['js/vs_core.js'][1365] = 0;
  _$jscoverage['js/vs_core.js'][1367] = 0;
  _$jscoverage['js/vs_core.js'][1384] = 0;
  _$jscoverage['js/vs_core.js'][1385] = 0;
  _$jscoverage['js/vs_core.js'][1387] = 0;
  _$jscoverage['js/vs_core.js'][1389] = 0;
  _$jscoverage['js/vs_core.js'][1390] = 0;
  _$jscoverage['js/vs_core.js'][1391] = 0;
  _$jscoverage['js/vs_core.js'][1392] = 0;
  _$jscoverage['js/vs_core.js'][1394] = 0;
  _$jscoverage['js/vs_core.js'][1398] = 0;
  _$jscoverage['js/vs_core.js'][1404] = 0;
  _$jscoverage['js/vs_core.js'][1426] = 0;
  _$jscoverage['js/vs_core.js'][1432] = 0;
  _$jscoverage['js/vs_core.js'][1433] = 0;
  _$jscoverage['js/vs_core.js'][1435] = 0;
  _$jscoverage['js/vs_core.js'][1437] = 0;
  _$jscoverage['js/vs_core.js'][1447] = 0;
  _$jscoverage['js/vs_core.js'][1455] = 0;
  _$jscoverage['js/vs_core.js'][1463] = 0;
  _$jscoverage['js/vs_core.js'][1471] = 0;
  _$jscoverage['js/vs_core.js'][1473] = 0;
  _$jscoverage['js/vs_core.js'][1475] = 0;
  _$jscoverage['js/vs_core.js'][1476] = 0;
  _$jscoverage['js/vs_core.js'][1477] = 0;
  _$jscoverage['js/vs_core.js'][1478] = 0;
  _$jscoverage['js/vs_core.js'][1482] = 0;
  _$jscoverage['js/vs_core.js'][1483] = 0;
  _$jscoverage['js/vs_core.js'][1484] = 0;
  _$jscoverage['js/vs_core.js'][1485] = 0;
  _$jscoverage['js/vs_core.js'][1511] = 0;
  _$jscoverage['js/vs_core.js'][1513] = 0;
  _$jscoverage['js/vs_core.js'][1514] = 0;
  _$jscoverage['js/vs_core.js'][1515] = 0;
  _$jscoverage['js/vs_core.js'][1516] = 0;
  _$jscoverage['js/vs_core.js'][1519] = 0;
  _$jscoverage['js/vs_core.js'][1558] = 0;
  _$jscoverage['js/vs_core.js'][1559] = 0;
  _$jscoverage['js/vs_core.js'][1560] = 0;
  _$jscoverage['js/vs_core.js'][1561] = 0;
  _$jscoverage['js/vs_core.js'][1569] = 0;
  _$jscoverage['js/vs_core.js'][1570] = 0;
  _$jscoverage['js/vs_core.js'][1571] = 0;
  _$jscoverage['js/vs_core.js'][1594] = 0;
  _$jscoverage['js/vs_core.js'][1596] = 0;
  _$jscoverage['js/vs_core.js'][1597] = 0;
  _$jscoverage['js/vs_core.js'][1598] = 0;
  _$jscoverage['js/vs_core.js'][1599] = 0;
  _$jscoverage['js/vs_core.js'][1601] = 0;
  _$jscoverage['js/vs_core.js'][1605] = 0;
  _$jscoverage['js/vs_core.js'][1612] = 0;
  _$jscoverage['js/vs_core.js'][1614] = 0;
  _$jscoverage['js/vs_core.js'][1615] = 0;
  _$jscoverage['js/vs_core.js'][1616] = 0;
  _$jscoverage['js/vs_core.js'][1617] = 0;
  _$jscoverage['js/vs_core.js'][1618] = 0;
  _$jscoverage['js/vs_core.js'][1636] = 0;
  _$jscoverage['js/vs_core.js'][1638] = 0;
  _$jscoverage['js/vs_core.js'][1639] = 0;
  _$jscoverage['js/vs_core.js'][1640] = 0;
  _$jscoverage['js/vs_core.js'][1642] = 0;
  _$jscoverage['js/vs_core.js'][1643] = 0;
  _$jscoverage['js/vs_core.js'][1647] = 0;
  _$jscoverage['js/vs_core.js'][1671] = 0;
  _$jscoverage['js/vs_core.js'][1673] = 0;
  _$jscoverage['js/vs_core.js'][1675] = 0;
  _$jscoverage['js/vs_core.js'][1676] = 0;
  _$jscoverage['js/vs_core.js'][1677] = 0;
  _$jscoverage['js/vs_core.js'][1679] = 0;
  _$jscoverage['js/vs_core.js'][1680] = 0;
  _$jscoverage['js/vs_core.js'][1682] = 0;
  _$jscoverage['js/vs_core.js'][1685] = 0;
  _$jscoverage['js/vs_core.js'][1687] = 0;
  _$jscoverage['js/vs_core.js'][1689] = 0;
  _$jscoverage['js/vs_core.js'][1690] = 0;
  _$jscoverage['js/vs_core.js'][1692] = 0;
  _$jscoverage['js/vs_core.js'][1694] = 0;
  _$jscoverage['js/vs_core.js'][1696] = 0;
  _$jscoverage['js/vs_core.js'][1698] = 0;
  _$jscoverage['js/vs_core.js'][1699] = 0;
  _$jscoverage['js/vs_core.js'][1702] = 0;
  _$jscoverage['js/vs_core.js'][1715] = 0;
  _$jscoverage['js/vs_core.js'][1717] = 0;
  _$jscoverage['js/vs_core.js'][1718] = 0;
  _$jscoverage['js/vs_core.js'][1748] = 0;
  _$jscoverage['js/vs_core.js'][1751] = 0;
  _$jscoverage['js/vs_core.js'][1753] = 0;
  _$jscoverage['js/vs_core.js'][1755] = 0;
  _$jscoverage['js/vs_core.js'][1756] = 0;
  _$jscoverage['js/vs_core.js'][1758] = 0;
  _$jscoverage['js/vs_core.js'][1760] = 0;
  _$jscoverage['js/vs_core.js'][1778] = 0;
  _$jscoverage['js/vs_core.js'][1779] = 0;
  _$jscoverage['js/vs_core.js'][1781] = 0;
  _$jscoverage['js/vs_core.js'][1783] = 0;
  _$jscoverage['js/vs_core.js'][1784] = 0;
  _$jscoverage['js/vs_core.js'][1786] = 0;
  _$jscoverage['js/vs_core.js'][1788] = 0;
  _$jscoverage['js/vs_core.js'][1790] = 0;
  _$jscoverage['js/vs_core.js'][1792] = 0;
  _$jscoverage['js/vs_core.js'][1793] = 0;
  _$jscoverage['js/vs_core.js'][1795] = 0;
  _$jscoverage['js/vs_core.js'][1799] = 0;
  _$jscoverage['js/vs_core.js'][1800] = 0;
  _$jscoverage['js/vs_core.js'][1803] = 0;
  _$jscoverage['js/vs_core.js'][1805] = 0;
  _$jscoverage['js/vs_core.js'][1827] = 0;
  _$jscoverage['js/vs_core.js'][1828] = 0;
  _$jscoverage['js/vs_core.js'][1830] = 0;
  _$jscoverage['js/vs_core.js'][1832] = 0;
  _$jscoverage['js/vs_core.js'][1833] = 0;
  _$jscoverage['js/vs_core.js'][1835] = 0;
  _$jscoverage['js/vs_core.js'][1837] = 0;
  _$jscoverage['js/vs_core.js'][1838] = 0;
  _$jscoverage['js/vs_core.js'][1840] = 0;
  _$jscoverage['js/vs_core.js'][1841] = 0;
  _$jscoverage['js/vs_core.js'][1843] = 0;
  _$jscoverage['js/vs_core.js'][1845] = 0;
  _$jscoverage['js/vs_core.js'][1848] = 0;
  _$jscoverage['js/vs_core.js'][1850] = 0;
  _$jscoverage['js/vs_core.js'][1852] = 0;
  _$jscoverage['js/vs_core.js'][1856] = 0;
  _$jscoverage['js/vs_core.js'][1860] = 0;
  _$jscoverage['js/vs_core.js'][1863] = 0;
  _$jscoverage['js/vs_core.js'][1865] = 0;
  _$jscoverage['js/vs_core.js'][1866] = 0;
  _$jscoverage['js/vs_core.js'][1871] = 0;
  _$jscoverage['js/vs_core.js'][1886] = 0;
  _$jscoverage['js/vs_core.js'][1905] = 0;
  _$jscoverage['js/vs_core.js'][1906] = 0;
  _$jscoverage['js/vs_core.js'][1908] = 0;
  _$jscoverage['js/vs_core.js'][1910] = 0;
  _$jscoverage['js/vs_core.js'][1911] = 0;
  _$jscoverage['js/vs_core.js'][1913] = 0;
  _$jscoverage['js/vs_core.js'][1915] = 0;
  _$jscoverage['js/vs_core.js'][1917] = 0;
  _$jscoverage['js/vs_core.js'][1920] = 0;
  _$jscoverage['js/vs_core.js'][1922] = 0;
  _$jscoverage['js/vs_core.js'][1923] = 0;
  _$jscoverage['js/vs_core.js'][1927] = 0;
  _$jscoverage['js/vs_core.js'][1928] = 0;
  _$jscoverage['js/vs_core.js'][1931] = 0;
  _$jscoverage['js/vs_core.js'][1936] = 0;
  _$jscoverage['js/vs_core.js'][1941] = 0;
  _$jscoverage['js/vs_core.js'][1943] = 0;
  _$jscoverage['js/vs_core.js'][1944] = 0;
  _$jscoverage['js/vs_core.js'][1946] = 0;
  _$jscoverage['js/vs_core.js'][1947] = 0;
  _$jscoverage['js/vs_core.js'][1951] = 0;
  _$jscoverage['js/vs_core.js'][1957] = 0;
  _$jscoverage['js/vs_core.js'][1960] = 0;
  _$jscoverage['js/vs_core.js'][1962] = 0;
  _$jscoverage['js/vs_core.js'][1964] = 0;
  _$jscoverage['js/vs_core.js'][1966] = 0;
  _$jscoverage['js/vs_core.js'][1967] = 0;
  _$jscoverage['js/vs_core.js'][1968] = 0;
  _$jscoverage['js/vs_core.js'][1969] = 0;
  _$jscoverage['js/vs_core.js'][1970] = 0;
  _$jscoverage['js/vs_core.js'][1971] = 0;
  _$jscoverage['js/vs_core.js'][1972] = 0;
  _$jscoverage['js/vs_core.js'][1973] = 0;
  _$jscoverage['js/vs_core.js'][1974] = 0;
  _$jscoverage['js/vs_core.js'][1975] = 0;
  _$jscoverage['js/vs_core.js'][1976] = 0;
  _$jscoverage['js/vs_core.js'][1978] = 0;
  _$jscoverage['js/vs_core.js'][1979] = 0;
  _$jscoverage['js/vs_core.js'][1983] = 0;
  _$jscoverage['js/vs_core.js'][1989] = 0;
  _$jscoverage['js/vs_core.js'][1990] = 0;
  _$jscoverage['js/vs_core.js'][1992] = 0;
  _$jscoverage['js/vs_core.js'][1993] = 0;
  _$jscoverage['js/vs_core.js'][1995] = 0;
  _$jscoverage['js/vs_core.js'][1996] = 0;
  _$jscoverage['js/vs_core.js'][1998] = 0;
  _$jscoverage['js/vs_core.js'][1999] = 0;
  _$jscoverage['js/vs_core.js'][2001] = 0;
  _$jscoverage['js/vs_core.js'][2004] = 0;
  _$jscoverage['js/vs_core.js'][2021] = 0;
  _$jscoverage['js/vs_core.js'][2022] = 0;
  _$jscoverage['js/vs_core.js'][2024] = 0;
  _$jscoverage['js/vs_core.js'][2025] = 0;
  _$jscoverage['js/vs_core.js'][2026] = 0;
  _$jscoverage['js/vs_core.js'][2028] = 0;
  _$jscoverage['js/vs_core.js'][2030] = 0;
  _$jscoverage['js/vs_core.js'][2031] = 0;
  _$jscoverage['js/vs_core.js'][2034] = 0;
  _$jscoverage['js/vs_core.js'][2036] = 0;
  _$jscoverage['js/vs_core.js'][2037] = 0;
  _$jscoverage['js/vs_core.js'][2041] = 0;
  _$jscoverage['js/vs_core.js'][2042] = 0;
  _$jscoverage['js/vs_core.js'][2045] = 0;
  _$jscoverage['js/vs_core.js'][2046] = 0;
  _$jscoverage['js/vs_core.js'][2047] = 0;
  _$jscoverage['js/vs_core.js'][2049] = 0;
  _$jscoverage['js/vs_core.js'][2051] = 0;
  _$jscoverage['js/vs_core.js'][2053] = 0;
  _$jscoverage['js/vs_core.js'][2055] = 0;
  _$jscoverage['js/vs_core.js'][2056] = 0;
  _$jscoverage['js/vs_core.js'][2058] = 0;
  _$jscoverage['js/vs_core.js'][2059] = 0;
  _$jscoverage['js/vs_core.js'][2063] = 0;
  _$jscoverage['js/vs_core.js'][2068] = 0;
  _$jscoverage['js/vs_core.js'][2159] = 0;
  _$jscoverage['js/vs_core.js'][2165] = 0;
  _$jscoverage['js/vs_core.js'][2219] = 0;
  _$jscoverage['js/vs_core.js'][2224] = 0;
  _$jscoverage['js/vs_core.js'][2229] = 0;
  _$jscoverage['js/vs_core.js'][2255] = 0;
  _$jscoverage['js/vs_core.js'][2257] = 0;
  _$jscoverage['js/vs_core.js'][2259] = 0;
  _$jscoverage['js/vs_core.js'][2260] = 0;
  _$jscoverage['js/vs_core.js'][2262] = 0;
  _$jscoverage['js/vs_core.js'][2264] = 0;
  _$jscoverage['js/vs_core.js'][2267] = 0;
  _$jscoverage['js/vs_core.js'][2268] = 0;
  _$jscoverage['js/vs_core.js'][2270] = 0;
  _$jscoverage['js/vs_core.js'][2275] = 0;
  _$jscoverage['js/vs_core.js'][2277] = 0;
  _$jscoverage['js/vs_core.js'][2280] = 0;
  _$jscoverage['js/vs_core.js'][2283] = 0;
  _$jscoverage['js/vs_core.js'][2284] = 0;
  _$jscoverage['js/vs_core.js'][2286] = 0;
  _$jscoverage['js/vs_core.js'][2289] = 0;
  _$jscoverage['js/vs_core.js'][2290] = 0;
  _$jscoverage['js/vs_core.js'][2292] = 0;
  _$jscoverage['js/vs_core.js'][2294] = 0;
  _$jscoverage['js/vs_core.js'][2295] = 0;
  _$jscoverage['js/vs_core.js'][2297] = 0;
  _$jscoverage['js/vs_core.js'][2299] = 0;
  _$jscoverage['js/vs_core.js'][2300] = 0;
  _$jscoverage['js/vs_core.js'][2305] = 0;
  _$jscoverage['js/vs_core.js'][2306] = 0;
  _$jscoverage['js/vs_core.js'][2309] = 0;
  _$jscoverage['js/vs_core.js'][2312] = 0;
  _$jscoverage['js/vs_core.js'][2317] = 0;
  _$jscoverage['js/vs_core.js'][2319] = 0;
  _$jscoverage['js/vs_core.js'][2320] = 0;
  _$jscoverage['js/vs_core.js'][2322] = 0;
  _$jscoverage['js/vs_core.js'][2324] = 0;
  _$jscoverage['js/vs_core.js'][2325] = 0;
  _$jscoverage['js/vs_core.js'][2327] = 0;
  _$jscoverage['js/vs_core.js'][2328] = 0;
  _$jscoverage['js/vs_core.js'][2333] = 0;
  _$jscoverage['js/vs_core.js'][2334] = 0;
  _$jscoverage['js/vs_core.js'][2335] = 0;
  _$jscoverage['js/vs_core.js'][2336] = 0;
  _$jscoverage['js/vs_core.js'][2337] = 0;
  _$jscoverage['js/vs_core.js'][2338] = 0;
  _$jscoverage['js/vs_core.js'][2339] = 0;
  _$jscoverage['js/vs_core.js'][2340] = 0;
  _$jscoverage['js/vs_core.js'][2341] = 0;
  _$jscoverage['js/vs_core.js'][2343] = 0;
  _$jscoverage['js/vs_core.js'][2344] = 0;
  _$jscoverage['js/vs_core.js'][2345] = 0;
  _$jscoverage['js/vs_core.js'][2346] = 0;
  _$jscoverage['js/vs_core.js'][2348] = 0;
  _$jscoverage['js/vs_core.js'][2349] = 0;
  _$jscoverage['js/vs_core.js'][2350] = 0;
  _$jscoverage['js/vs_core.js'][2353] = 0;
  _$jscoverage['js/vs_core.js'][2354] = 0;
  _$jscoverage['js/vs_core.js'][2356] = 0;
  _$jscoverage['js/vs_core.js'][2357] = 0;
  _$jscoverage['js/vs_core.js'][2358] = 0;
  _$jscoverage['js/vs_core.js'][2363] = 0;
  _$jscoverage['js/vs_core.js'][2364] = 0;
  _$jscoverage['js/vs_core.js'][2466] = 0;
  _$jscoverage['js/vs_core.js'][2468] = 0;
  _$jscoverage['js/vs_core.js'][2469] = 0;
  _$jscoverage['js/vs_core.js'][2470] = 0;
  _$jscoverage['js/vs_core.js'][2472] = 0;
  _$jscoverage['js/vs_core.js'][2474] = 0;
  _$jscoverage['js/vs_core.js'][2475] = 0;
  _$jscoverage['js/vs_core.js'][2476] = 0;
  _$jscoverage['js/vs_core.js'][2478] = 0;
  _$jscoverage['js/vs_core.js'][2479] = 0;
  _$jscoverage['js/vs_core.js'][2481] = 0;
  _$jscoverage['js/vs_core.js'][2482] = 0;
  _$jscoverage['js/vs_core.js'][2485] = 0;
  _$jscoverage['js/vs_core.js'][2493] = 0;
  _$jscoverage['js/vs_core.js'][2495] = 0;
  _$jscoverage['js/vs_core.js'][2497] = 0;
  _$jscoverage['js/vs_core.js'][2498] = 0;
  _$jscoverage['js/vs_core.js'][2499] = 0;
  _$jscoverage['js/vs_core.js'][2500] = 0;
  _$jscoverage['js/vs_core.js'][2501] = 0;
  _$jscoverage['js/vs_core.js'][2517] = 0;
  _$jscoverage['js/vs_core.js'][2519] = 0;
  _$jscoverage['js/vs_core.js'][2520] = 0;
  _$jscoverage['js/vs_core.js'][2522] = 0;
  _$jscoverage['js/vs_core.js'][2523] = 0;
  _$jscoverage['js/vs_core.js'][2543] = 0;
  _$jscoverage['js/vs_core.js'][2545] = 0;
  _$jscoverage['js/vs_core.js'][2546] = 0;
  _$jscoverage['js/vs_core.js'][2548] = 0;
  _$jscoverage['js/vs_core.js'][2549] = 0;
  _$jscoverage['js/vs_core.js'][2551] = 0;
  _$jscoverage['js/vs_core.js'][2552] = 0;
  _$jscoverage['js/vs_core.js'][2554] = 0;
  _$jscoverage['js/vs_core.js'][2556] = 0;
  _$jscoverage['js/vs_core.js'][2595] = 0;
  _$jscoverage['js/vs_core.js'][2596] = 0;
  _$jscoverage['js/vs_core.js'][2599] = 0;
  _$jscoverage['js/vs_core.js'][2601] = 0;
  _$jscoverage['js/vs_core.js'][2603] = 0;
  _$jscoverage['js/vs_core.js'][2605] = 0;
  _$jscoverage['js/vs_core.js'][2606] = 0;
  _$jscoverage['js/vs_core.js'][2607] = 0;
  _$jscoverage['js/vs_core.js'][2609] = 0;
  _$jscoverage['js/vs_core.js'][2610] = 0;
  _$jscoverage['js/vs_core.js'][2611] = 0;
  _$jscoverage['js/vs_core.js'][2613] = 0;
  _$jscoverage['js/vs_core.js'][2634] = 0;
  _$jscoverage['js/vs_core.js'][2636] = 0;
  _$jscoverage['js/vs_core.js'][2649] = 0;
  _$jscoverage['js/vs_core.js'][2663] = 0;
  _$jscoverage['js/vs_core.js'][2665] = 0;
  _$jscoverage['js/vs_core.js'][2682] = 0;
  _$jscoverage['js/vs_core.js'][2684] = 0;
  _$jscoverage['js/vs_core.js'][2697] = 0;
  _$jscoverage['js/vs_core.js'][2711] = 0;
  _$jscoverage['js/vs_core.js'][2713] = 0;
  _$jscoverage['js/vs_core.js'][2729] = 0;
  _$jscoverage['js/vs_core.js'][2731] = 0;
  _$jscoverage['js/vs_core.js'][2732] = 0;
  _$jscoverage['js/vs_core.js'][2734] = 0;
  _$jscoverage['js/vs_core.js'][2735] = 0;
  _$jscoverage['js/vs_core.js'][2748] = 0;
  _$jscoverage['js/vs_core.js'][2750] = 0;
  _$jscoverage['js/vs_core.js'][2751] = 0;
  _$jscoverage['js/vs_core.js'][2765] = 0;
  _$jscoverage['js/vs_core.js'][2766] = 0;
  _$jscoverage['js/vs_core.js'][2769] = 0;
  _$jscoverage['js/vs_core.js'][2770] = 0;
  _$jscoverage['js/vs_core.js'][2773] = 0;
  _$jscoverage['js/vs_core.js'][2775] = 0;
  _$jscoverage['js/vs_core.js'][2779] = 0;
  _$jscoverage['js/vs_core.js'][2781] = 0;
  _$jscoverage['js/vs_core.js'][2782] = 0;
  _$jscoverage['js/vs_core.js'][2784] = 0;
  _$jscoverage['js/vs_core.js'][2786] = 0;
  _$jscoverage['js/vs_core.js'][2788] = 0;
  _$jscoverage['js/vs_core.js'][2790] = 0;
  _$jscoverage['js/vs_core.js'][2795] = 0;
  _$jscoverage['js/vs_core.js'][2808] = 0;
  _$jscoverage['js/vs_core.js'][2810] = 0;
  _$jscoverage['js/vs_core.js'][2812] = 0;
  _$jscoverage['js/vs_core.js'][2814] = 0;
  _$jscoverage['js/vs_core.js'][2828] = 0;
  _$jscoverage['js/vs_core.js'][2830] = 0;
  _$jscoverage['js/vs_core.js'][2831] = 0;
  _$jscoverage['js/vs_core.js'][2850] = 0;
  _$jscoverage['js/vs_core.js'][2851] = 0;
  _$jscoverage['js/vs_core.js'][2852] = 0;
  _$jscoverage['js/vs_core.js'][2854] = 0;
  _$jscoverage['js/vs_core.js'][2859] = 0;
  _$jscoverage['js/vs_core.js'][2873] = 0;
  _$jscoverage['js/vs_core.js'][2874] = 0;
  _$jscoverage['js/vs_core.js'][2876] = 0;
  _$jscoverage['js/vs_core.js'][2877] = 0;
  _$jscoverage['js/vs_core.js'][2879] = 0;
  _$jscoverage['js/vs_core.js'][2894] = 0;
  _$jscoverage['js/vs_core.js'][2895] = 0;
  _$jscoverage['js/vs_core.js'][2898] = 0;
  _$jscoverage['js/vs_core.js'][2900] = 0;
  _$jscoverage['js/vs_core.js'][2901] = 0;
  _$jscoverage['js/vs_core.js'][2902] = 0;
  _$jscoverage['js/vs_core.js'][2904] = 0;
  _$jscoverage['js/vs_core.js'][2919] = 0;
  _$jscoverage['js/vs_core.js'][2921] = 0;
  _$jscoverage['js/vs_core.js'][2923] = 0;
  _$jscoverage['js/vs_core.js'][2925] = 0;
  _$jscoverage['js/vs_core.js'][2926] = 0;
  _$jscoverage['js/vs_core.js'][2928] = 0;
  _$jscoverage['js/vs_core.js'][2930] = 0;
  _$jscoverage['js/vs_core.js'][2932] = 0;
  _$jscoverage['js/vs_core.js'][2934] = 0;
  _$jscoverage['js/vs_core.js'][2935] = 0;
  _$jscoverage['js/vs_core.js'][2936] = 0;
  _$jscoverage['js/vs_core.js'][2940] = 0;
  _$jscoverage['js/vs_core.js'][2954] = 0;
  _$jscoverage['js/vs_core.js'][2956] = 0;
  _$jscoverage['js/vs_core.js'][2958] = 0;
  _$jscoverage['js/vs_core.js'][2959] = 0;
  _$jscoverage['js/vs_core.js'][2961] = 0;
  _$jscoverage['js/vs_core.js'][2963] = 0;
  _$jscoverage['js/vs_core.js'][2965] = 0;
  _$jscoverage['js/vs_core.js'][2966] = 0;
  _$jscoverage['js/vs_core.js'][2967] = 0;
  _$jscoverage['js/vs_core.js'][2970] = 0;
  _$jscoverage['js/vs_core.js'][2987] = 0;
  _$jscoverage['js/vs_core.js'][2989] = 0;
  _$jscoverage['js/vs_core.js'][2990] = 0;
  _$jscoverage['js/vs_core.js'][2994] = 0;
  _$jscoverage['js/vs_core.js'][2995] = 0;
  _$jscoverage['js/vs_core.js'][2996] = 0;
  _$jscoverage['js/vs_core.js'][2997] = 0;
  _$jscoverage['js/vs_core.js'][3001] = 0;
  _$jscoverage['js/vs_core.js'][3003] = 0;
  _$jscoverage['js/vs_core.js'][3004] = 0;
  _$jscoverage['js/vs_core.js'][3005] = 0;
  _$jscoverage['js/vs_core.js'][3007] = 0;
  _$jscoverage['js/vs_core.js'][3009] = 0;
  _$jscoverage['js/vs_core.js'][3010] = 0;
  _$jscoverage['js/vs_core.js'][3011] = 0;
  _$jscoverage['js/vs_core.js'][3015] = 0;
  _$jscoverage['js/vs_core.js'][3017] = 0;
  _$jscoverage['js/vs_core.js'][3018] = 0;
  _$jscoverage['js/vs_core.js'][3020] = 0;
  _$jscoverage['js/vs_core.js'][3022] = 0;
  _$jscoverage['js/vs_core.js'][3023] = 0;
  _$jscoverage['js/vs_core.js'][3025] = 0;
  _$jscoverage['js/vs_core.js'][3027] = 0;
  _$jscoverage['js/vs_core.js'][3028] = 0;
  _$jscoverage['js/vs_core.js'][3030] = 0;
  _$jscoverage['js/vs_core.js'][3032] = 0;
  _$jscoverage['js/vs_core.js'][3033] = 0;
  _$jscoverage['js/vs_core.js'][3037] = 0;
  _$jscoverage['js/vs_core.js'][3039] = 0;
  _$jscoverage['js/vs_core.js'][3041] = 0;
  _$jscoverage['js/vs_core.js'][3042] = 0;
  _$jscoverage['js/vs_core.js'][3044] = 0;
  _$jscoverage['js/vs_core.js'][3046] = 0;
  _$jscoverage['js/vs_core.js'][3048] = 0;
  _$jscoverage['js/vs_core.js'][3049] = 0;
  _$jscoverage['js/vs_core.js'][3051] = 0;
  _$jscoverage['js/vs_core.js'][3053] = 0;
  _$jscoverage['js/vs_core.js'][3055] = 0;
  _$jscoverage['js/vs_core.js'][3056] = 0;
  _$jscoverage['js/vs_core.js'][3058] = 0;
  _$jscoverage['js/vs_core.js'][3060] = 0;
  _$jscoverage['js/vs_core.js'][3062] = 0;
  _$jscoverage['js/vs_core.js'][3063] = 0;
  _$jscoverage['js/vs_core.js'][3066] = 0;
  _$jscoverage['js/vs_core.js'][3067] = 0;
  _$jscoverage['js/vs_core.js'][3068] = 0;
  _$jscoverage['js/vs_core.js'][3069] = 0;
  _$jscoverage['js/vs_core.js'][3094] = 0;
  _$jscoverage['js/vs_core.js'][3096] = 0;
  _$jscoverage['js/vs_core.js'][3098] = 0;
  _$jscoverage['js/vs_core.js'][3100] = 0;
  _$jscoverage['js/vs_core.js'][3102] = 0;
  _$jscoverage['js/vs_core.js'][3104] = 0;
  _$jscoverage['js/vs_core.js'][3106] = 0;
  _$jscoverage['js/vs_core.js'][3107] = 0;
  _$jscoverage['js/vs_core.js'][3109] = 0;
  _$jscoverage['js/vs_core.js'][3110] = 0;
  _$jscoverage['js/vs_core.js'][3112] = 0;
  _$jscoverage['js/vs_core.js'][3134] = 0;
  _$jscoverage['js/vs_core.js'][3136] = 0;
  _$jscoverage['js/vs_core.js'][3155] = 0;
  _$jscoverage['js/vs_core.js'][3156] = 0;
  _$jscoverage['js/vs_core.js'][3158] = 0;
  _$jscoverage['js/vs_core.js'][3159] = 0;
  _$jscoverage['js/vs_core.js'][3180] = 0;
  _$jscoverage['js/vs_core.js'][3182] = 0;
  _$jscoverage['js/vs_core.js'][3183] = 0;
  _$jscoverage['js/vs_core.js'][3186] = 0;
  _$jscoverage['js/vs_core.js'][3188] = 0;
  _$jscoverage['js/vs_core.js'][3192] = 0;
  _$jscoverage['js/vs_core.js'][3194] = 0;
  _$jscoverage['js/vs_core.js'][3196] = 0;
  _$jscoverage['js/vs_core.js'][3197] = 0;
  _$jscoverage['js/vs_core.js'][3199] = 0;
  _$jscoverage['js/vs_core.js'][3201] = 0;
  _$jscoverage['js/vs_core.js'][3203] = 0;
  _$jscoverage['js/vs_core.js'][3207] = 0;
  _$jscoverage['js/vs_core.js'][3219] = 0;
  _$jscoverage['js/vs_core.js'][3221] = 0;
  _$jscoverage['js/vs_core.js'][3222] = 0;
  _$jscoverage['js/vs_core.js'][3224] = 0;
  _$jscoverage['js/vs_core.js'][3225] = 0;
  _$jscoverage['js/vs_core.js'][3227] = 0;
  _$jscoverage['js/vs_core.js'][3230] = 0;
  _$jscoverage['js/vs_core.js'][3232] = 0;
  _$jscoverage['js/vs_core.js'][3234] = 0;
  _$jscoverage['js/vs_core.js'][3236] = 0;
  _$jscoverage['js/vs_core.js'][3237] = 0;
  _$jscoverage['js/vs_core.js'][3238] = 0;
  _$jscoverage['js/vs_core.js'][3240] = 0;
  _$jscoverage['js/vs_core.js'][3242] = 0;
  _$jscoverage['js/vs_core.js'][3244] = 0;
  _$jscoverage['js/vs_core.js'][3249] = 0;
  _$jscoverage['js/vs_core.js'][3262] = 0;
  _$jscoverage['js/vs_core.js'][3263] = 0;
  _$jscoverage['js/vs_core.js'][3265] = 0;
  _$jscoverage['js/vs_core.js'][3267] = 0;
  _$jscoverage['js/vs_core.js'][3268] = 0;
  _$jscoverage['js/vs_core.js'][3270] = 0;
  _$jscoverage['js/vs_core.js'][3272] = 0;
  _$jscoverage['js/vs_core.js'][3287] = 0;
  _$jscoverage['js/vs_core.js'][3289] = 0;
  _$jscoverage['js/vs_core.js'][3292] = 0;
  _$jscoverage['js/vs_core.js'][3294] = 0;
  _$jscoverage['js/vs_core.js'][3295] = 0;
  _$jscoverage['js/vs_core.js'][3298] = 0;
  _$jscoverage['js/vs_core.js'][3304] = 0;
  _$jscoverage['js/vs_core.js'][3314] = 0;
  _$jscoverage['js/vs_core.js'][3316] = 0;
  _$jscoverage['js/vs_core.js'][3317] = 0;
  _$jscoverage['js/vs_core.js'][3320] = 0;
  _$jscoverage['js/vs_core.js'][3323] = 0;
  _$jscoverage['js/vs_core.js'][3331] = 0;
  _$jscoverage['js/vs_core.js'][3341] = 0;
  _$jscoverage['js/vs_core.js'][3360] = 0;
  _$jscoverage['js/vs_core.js'][3362] = 0;
  _$jscoverage['js/vs_core.js'][3363] = 0;
  _$jscoverage['js/vs_core.js'][3364] = 0;
  _$jscoverage['js/vs_core.js'][3365] = 0;
  _$jscoverage['js/vs_core.js'][3366] = 0;
  _$jscoverage['js/vs_core.js'][3369] = 0;
  _$jscoverage['js/vs_core.js'][3373] = 0;
  _$jscoverage['js/vs_core.js'][3375] = 0;
  _$jscoverage['js/vs_core.js'][3377] = 0;
  _$jscoverage['js/vs_core.js'][3379] = 0;
  _$jscoverage['js/vs_core.js'][3381] = 0;
  _$jscoverage['js/vs_core.js'][3382] = 0;
  _$jscoverage['js/vs_core.js'][3384] = 0;
  _$jscoverage['js/vs_core.js'][3385] = 0;
  _$jscoverage['js/vs_core.js'][3388] = 0;
  _$jscoverage['js/vs_core.js'][3390] = 0;
  _$jscoverage['js/vs_core.js'][3391] = 0;
  _$jscoverage['js/vs_core.js'][3393] = 0;
  _$jscoverage['js/vs_core.js'][3394] = 0;
  _$jscoverage['js/vs_core.js'][3396] = 0;
  _$jscoverage['js/vs_core.js'][3398] = 0;
  _$jscoverage['js/vs_core.js'][3399] = 0;
  _$jscoverage['js/vs_core.js'][3401] = 0;
  _$jscoverage['js/vs_core.js'][3404] = 0;
  _$jscoverage['js/vs_core.js'][3406] = 0;
  _$jscoverage['js/vs_core.js'][3407] = 0;
  _$jscoverage['js/vs_core.js'][3409] = 0;
  _$jscoverage['js/vs_core.js'][3413] = 0;
  _$jscoverage['js/vs_core.js'][3416] = 0;
  _$jscoverage['js/vs_core.js'][3423] = 0;
  _$jscoverage['js/vs_core.js'][3425] = 0;
  _$jscoverage['js/vs_core.js'][3427] = 0;
  _$jscoverage['js/vs_core.js'][3428] = 0;
  _$jscoverage['js/vs_core.js'][3431] = 0;
  _$jscoverage['js/vs_core.js'][3432] = 0;
  _$jscoverage['js/vs_core.js'][3435] = 0;
  _$jscoverage['js/vs_core.js'][3437] = 0;
  _$jscoverage['js/vs_core.js'][3438] = 0;
  _$jscoverage['js/vs_core.js'][3443] = 0;
  _$jscoverage['js/vs_core.js'][3445] = 0;
  _$jscoverage['js/vs_core.js'][3446] = 0;
  _$jscoverage['js/vs_core.js'][3448] = 0;
  _$jscoverage['js/vs_core.js'][3450] = 0;
  _$jscoverage['js/vs_core.js'][3451] = 0;
  _$jscoverage['js/vs_core.js'][3454] = 0;
  _$jscoverage['js/vs_core.js'][3456] = 0;
  _$jscoverage['js/vs_core.js'][3461] = 0;
  _$jscoverage['js/vs_core.js'][3463] = 0;
  _$jscoverage['js/vs_core.js'][3464] = 0;
  _$jscoverage['js/vs_core.js'][3466] = 0;
  _$jscoverage['js/vs_core.js'][3467] = 0;
  _$jscoverage['js/vs_core.js'][3470] = 0;
  _$jscoverage['js/vs_core.js'][3473] = 0;
  _$jscoverage['js/vs_core.js'][3475] = 0;
  _$jscoverage['js/vs_core.js'][3477] = 0;
  _$jscoverage['js/vs_core.js'][3478] = 0;
  _$jscoverage['js/vs_core.js'][3480] = 0;
  _$jscoverage['js/vs_core.js'][3483] = 0;
  _$jscoverage['js/vs_core.js'][3486] = 0;
  _$jscoverage['js/vs_core.js'][3487] = 0;
  _$jscoverage['js/vs_core.js'][3488] = 0;
  _$jscoverage['js/vs_core.js'][3490] = 0;
  _$jscoverage['js/vs_core.js'][3491] = 0;
  _$jscoverage['js/vs_core.js'][3493] = 0;
  _$jscoverage['js/vs_core.js'][3496] = 0;
  _$jscoverage['js/vs_core.js'][3498] = 0;
  _$jscoverage['js/vs_core.js'][3499] = 0;
  _$jscoverage['js/vs_core.js'][3500] = 0;
  _$jscoverage['js/vs_core.js'][3502] = 0;
  _$jscoverage['js/vs_core.js'][3505] = 0;
  _$jscoverage['js/vs_core.js'][3507] = 0;
  _$jscoverage['js/vs_core.js'][3512] = 0;
  _$jscoverage['js/vs_core.js'][3513] = 0;
  _$jscoverage['js/vs_core.js'][3518] = 0;
  _$jscoverage['js/vs_core.js'][3519] = 0;
  _$jscoverage['js/vs_core.js'][3527] = 0;
  _$jscoverage['js/vs_core.js'][3535] = 0;
  _$jscoverage['js/vs_core.js'][3536] = 0;
  _$jscoverage['js/vs_core.js'][3541] = 0;
  _$jscoverage['js/vs_core.js'][3543] = 0;
  _$jscoverage['js/vs_core.js'][3545] = 0;
  _$jscoverage['js/vs_core.js'][3546] = 0;
  _$jscoverage['js/vs_core.js'][3547] = 0;
  _$jscoverage['js/vs_core.js'][3549] = 0;
  _$jscoverage['js/vs_core.js'][3550] = 0;
  _$jscoverage['js/vs_core.js'][3552] = 0;
  _$jscoverage['js/vs_core.js'][3554] = 0;
  _$jscoverage['js/vs_core.js'][3556] = 0;
  _$jscoverage['js/vs_core.js'][3558] = 0;
  _$jscoverage['js/vs_core.js'][3559] = 0;
  _$jscoverage['js/vs_core.js'][3561] = 0;
  _$jscoverage['js/vs_core.js'][3563] = 0;
  _$jscoverage['js/vs_core.js'][3565] = 0;
  _$jscoverage['js/vs_core.js'][3567] = 0;
  _$jscoverage['js/vs_core.js'][3569] = 0;
  _$jscoverage['js/vs_core.js'][3570] = 0;
  _$jscoverage['js/vs_core.js'][3572] = 0;
  _$jscoverage['js/vs_core.js'][3574] = 0;
  _$jscoverage['js/vs_core.js'][3576] = 0;
  _$jscoverage['js/vs_core.js'][3578] = 0;
  _$jscoverage['js/vs_core.js'][3580] = 0;
  _$jscoverage['js/vs_core.js'][3581] = 0;
  _$jscoverage['js/vs_core.js'][3583] = 0;
  _$jscoverage['js/vs_core.js'][3585] = 0;
  _$jscoverage['js/vs_core.js'][3587] = 0;
  _$jscoverage['js/vs_core.js'][3589] = 0;
  _$jscoverage['js/vs_core.js'][3591] = 0;
  _$jscoverage['js/vs_core.js'][3592] = 0;
  _$jscoverage['js/vs_core.js'][3594] = 0;
  _$jscoverage['js/vs_core.js'][3596] = 0;
  _$jscoverage['js/vs_core.js'][3601] = 0;
  _$jscoverage['js/vs_core.js'][3656] = 0;
  _$jscoverage['js/vs_core.js'][3658] = 0;
  _$jscoverage['js/vs_core.js'][3659] = 0;
  _$jscoverage['js/vs_core.js'][3660] = 0;
  _$jscoverage['js/vs_core.js'][3661] = 0;
  _$jscoverage['js/vs_core.js'][3668] = 0;
  _$jscoverage['js/vs_core.js'][3675] = 0;
  _$jscoverage['js/vs_core.js'][3682] = 0;
  _$jscoverage['js/vs_core.js'][3684] = 0;
  _$jscoverage['js/vs_core.js'][3751] = 0;
  _$jscoverage['js/vs_core.js'][3757] = 0;
  _$jscoverage['js/vs_core.js'][3770] = 0;
  _$jscoverage['js/vs_core.js'][3831] = 0;
  _$jscoverage['js/vs_core.js'][3833] = 0;
  _$jscoverage['js/vs_core.js'][3834] = 0;
  _$jscoverage['js/vs_core.js'][3835] = 0;
  _$jscoverage['js/vs_core.js'][3837] = 0;
  _$jscoverage['js/vs_core.js'][3839] = 0;
  _$jscoverage['js/vs_core.js'][3840] = 0;
  _$jscoverage['js/vs_core.js'][3842] = 0;
  _$jscoverage['js/vs_core.js'][3874] = 0;
  _$jscoverage['js/vs_core.js'][3875] = 0;
  _$jscoverage['js/vs_core.js'][3877] = 0;
  _$jscoverage['js/vs_core.js'][3878] = 0;
  _$jscoverage['js/vs_core.js'][3880] = 0;
  _$jscoverage['js/vs_core.js'][3881] = 0;
  _$jscoverage['js/vs_core.js'][3883] = 0;
  _$jscoverage['js/vs_core.js'][3885] = 0;
  _$jscoverage['js/vs_core.js'][3887] = 0;
  _$jscoverage['js/vs_core.js'][3889] = 0;
  _$jscoverage['js/vs_core.js'][3891] = 0;
  _$jscoverage['js/vs_core.js'][3893] = 0;
  _$jscoverage['js/vs_core.js'][3894] = 0;
  _$jscoverage['js/vs_core.js'][3899] = 0;
  _$jscoverage['js/vs_core.js'][3900] = 0;
  _$jscoverage['js/vs_core.js'][3903] = 0;
  _$jscoverage['js/vs_core.js'][3905] = 0;
  _$jscoverage['js/vs_core.js'][3906] = 0;
  _$jscoverage['js/vs_core.js'][3909] = 0;
  _$jscoverage['js/vs_core.js'][3911] = 0;
  _$jscoverage['js/vs_core.js'][3912] = 0;
  _$jscoverage['js/vs_core.js'][3915] = 0;
  _$jscoverage['js/vs_core.js'][3929] = 0;
  _$jscoverage['js/vs_core.js'][3930] = 0;
  _$jscoverage['js/vs_core.js'][3931] = 0;
  _$jscoverage['js/vs_core.js'][3933] = 0;
  _$jscoverage['js/vs_core.js'][3934] = 0;
  _$jscoverage['js/vs_core.js'][3936] = 0;
  _$jscoverage['js/vs_core.js'][3938] = 0;
  _$jscoverage['js/vs_core.js'][3939] = 0;
  _$jscoverage['js/vs_core.js'][3942] = 0;
  _$jscoverage['js/vs_core.js'][3953] = 0;
  _$jscoverage['js/vs_core.js'][3954] = 0;
  _$jscoverage['js/vs_core.js'][3956] = 0;
  _$jscoverage['js/vs_core.js'][3957] = 0;
  _$jscoverage['js/vs_core.js'][3959] = 0;
  _$jscoverage['js/vs_core.js'][3960] = 0;
  _$jscoverage['js/vs_core.js'][3963] = 0;
  _$jscoverage['js/vs_core.js'][3974] = 0;
  _$jscoverage['js/vs_core.js'][3975] = 0;
  _$jscoverage['js/vs_core.js'][3977] = 0;
  _$jscoverage['js/vs_core.js'][3978] = 0;
  _$jscoverage['js/vs_core.js'][3980] = 0;
  _$jscoverage['js/vs_core.js'][3981] = 0;
  _$jscoverage['js/vs_core.js'][3984] = 0;
  _$jscoverage['js/vs_core.js'][3997] = 0;
  _$jscoverage['js/vs_core.js'][3999] = 0;
  _$jscoverage['js/vs_core.js'][4000] = 0;
  _$jscoverage['js/vs_core.js'][4002] = 0;
  _$jscoverage['js/vs_core.js'][4003] = 0;
  _$jscoverage['js/vs_core.js'][4013] = 0;
  _$jscoverage['js/vs_core.js'][4015] = 0;
  _$jscoverage['js/vs_core.js'][4016] = 0;
  _$jscoverage['js/vs_core.js'][4018] = 0;
  _$jscoverage['js/vs_core.js'][4019] = 0;
  _$jscoverage['js/vs_core.js'][4029] = 0;
  _$jscoverage['js/vs_core.js'][4031] = 0;
  _$jscoverage['js/vs_core.js'][4032] = 0;
  _$jscoverage['js/vs_core.js'][4034] = 0;
  _$jscoverage['js/vs_core.js'][4035] = 0;
  _$jscoverage['js/vs_core.js'][4039] = 0;
  _$jscoverage['js/vs_core.js'][4098] = 0;
  _$jscoverage['js/vs_core.js'][4100] = 0;
  _$jscoverage['js/vs_core.js'][4101] = 0;
  _$jscoverage['js/vs_core.js'][4102] = 0;
  _$jscoverage['js/vs_core.js'][4104] = 0;
  _$jscoverage['js/vs_core.js'][4106] = 0;
  _$jscoverage['js/vs_core.js'][4107] = 0;
  _$jscoverage['js/vs_core.js'][4109] = 0;
  _$jscoverage['js/vs_core.js'][4145] = 0;
  _$jscoverage['js/vs_core.js'][4146] = 0;
  _$jscoverage['js/vs_core.js'][4148] = 0;
  _$jscoverage['js/vs_core.js'][4149] = 0;
  _$jscoverage['js/vs_core.js'][4151] = 0;
  _$jscoverage['js/vs_core.js'][4152] = 0;
  _$jscoverage['js/vs_core.js'][4154] = 0;
  _$jscoverage['js/vs_core.js'][4156] = 0;
  _$jscoverage['js/vs_core.js'][4158] = 0;
  _$jscoverage['js/vs_core.js'][4160] = 0;
  _$jscoverage['js/vs_core.js'][4162] = 0;
  _$jscoverage['js/vs_core.js'][4164] = 0;
  _$jscoverage['js/vs_core.js'][4165] = 0;
  _$jscoverage['js/vs_core.js'][4170] = 0;
  _$jscoverage['js/vs_core.js'][4171] = 0;
  _$jscoverage['js/vs_core.js'][4174] = 0;
  _$jscoverage['js/vs_core.js'][4176] = 0;
  _$jscoverage['js/vs_core.js'][4177] = 0;
  _$jscoverage['js/vs_core.js'][4180] = 0;
  _$jscoverage['js/vs_core.js'][4182] = 0;
  _$jscoverage['js/vs_core.js'][4183] = 0;
  _$jscoverage['js/vs_core.js'][4186] = 0;
  _$jscoverage['js/vs_core.js'][4199] = 0;
  _$jscoverage['js/vs_core.js'][4200] = 0;
  _$jscoverage['js/vs_core.js'][4202] = 0;
  _$jscoverage['js/vs_core.js'][4204] = 0;
  _$jscoverage['js/vs_core.js'][4205] = 0;
  _$jscoverage['js/vs_core.js'][4207] = 0;
  _$jscoverage['js/vs_core.js'][4208] = 0;
  _$jscoverage['js/vs_core.js'][4209] = 0;
  _$jscoverage['js/vs_core.js'][4211] = 0;
  _$jscoverage['js/vs_core.js'][4222] = 0;
  _$jscoverage['js/vs_core.js'][4223] = 0;
  _$jscoverage['js/vs_core.js'][4225] = 0;
  _$jscoverage['js/vs_core.js'][4226] = 0;
  _$jscoverage['js/vs_core.js'][4228] = 0;
  _$jscoverage['js/vs_core.js'][4229] = 0;
  _$jscoverage['js/vs_core.js'][4231] = 0;
  _$jscoverage['js/vs_core.js'][4243] = 0;
  _$jscoverage['js/vs_core.js'][4244] = 0;
  _$jscoverage['js/vs_core.js'][4246] = 0;
  _$jscoverage['js/vs_core.js'][4247] = 0;
  _$jscoverage['js/vs_core.js'][4249] = 0;
  _$jscoverage['js/vs_core.js'][4251] = 0;
  _$jscoverage['js/vs_core.js'][4264] = 0;
  _$jscoverage['js/vs_core.js'][4266] = 0;
  _$jscoverage['js/vs_core.js'][4267] = 0;
  _$jscoverage['js/vs_core.js'][4269] = 0;
  _$jscoverage['js/vs_core.js'][4270] = 0;
  _$jscoverage['js/vs_core.js'][4279] = 0;
  _$jscoverage['js/vs_core.js'][4281] = 0;
  _$jscoverage['js/vs_core.js'][4283] = 0;
  _$jscoverage['js/vs_core.js'][4284] = 0;
  _$jscoverage['js/vs_core.js'][4293] = 0;
  _$jscoverage['js/vs_core.js'][4295] = 0;
  _$jscoverage['js/vs_core.js'][4298] = 0;
  _$jscoverage['js/vs_core.js'][4302] = 0;
  _$jscoverage['js/vs_core.js'][4303] = 0;
  _$jscoverage['js/vs_core.js'][4304] = 0;
  _$jscoverage['js/vs_core.js'][4308] = 0;
  _$jscoverage['js/vs_core.js'][4330] = 0;
  _$jscoverage['js/vs_core.js'][4332] = 0;
  _$jscoverage['js/vs_core.js'][4333] = 0;
  _$jscoverage['js/vs_core.js'][4334] = 0;
  _$jscoverage['js/vs_core.js'][4336] = 0;
  _$jscoverage['js/vs_core.js'][4337] = 0;
  _$jscoverage['js/vs_core.js'][4339] = 0;
  _$jscoverage['js/vs_core.js'][4373] = 0;
  _$jscoverage['js/vs_core.js'][4374] = 0;
  _$jscoverage['js/vs_core.js'][4375] = 0;
  _$jscoverage['js/vs_core.js'][4376] = 0;
  _$jscoverage['js/vs_core.js'][4378] = 0;
  _$jscoverage['js/vs_core.js'][4380] = 0;
  _$jscoverage['js/vs_core.js'][4382] = 0;
  _$jscoverage['js/vs_core.js'][4383] = 0;
  _$jscoverage['js/vs_core.js'][4384] = 0;
  _$jscoverage['js/vs_core.js'][4386] = 0;
  _$jscoverage['js/vs_core.js'][4387] = 0;
  _$jscoverage['js/vs_core.js'][4388] = 0;
  _$jscoverage['js/vs_core.js'][4391] = 0;
  _$jscoverage['js/vs_core.js'][4402] = 0;
  _$jscoverage['js/vs_core.js'][4403] = 0;
  _$jscoverage['js/vs_core.js'][4405] = 0;
  _$jscoverage['js/vs_core.js'][4406] = 0;
  _$jscoverage['js/vs_core.js'][4408] = 0;
  _$jscoverage['js/vs_core.js'][4410] = 0;
  _$jscoverage['js/vs_core.js'][4411] = 0;
  _$jscoverage['js/vs_core.js'][4413] = 0;
  _$jscoverage['js/vs_core.js'][4425] = 0;
  _$jscoverage['js/vs_core.js'][4426] = 0;
  _$jscoverage['js/vs_core.js'][4428] = 0;
  _$jscoverage['js/vs_core.js'][4431] = 0;
  _$jscoverage['js/vs_core.js'][4432] = 0;
  _$jscoverage['js/vs_core.js'][4434] = 0;
  _$jscoverage['js/vs_core.js'][4437] = 0;
  _$jscoverage['js/vs_core.js'][4439] = 0;
  _$jscoverage['js/vs_core.js'][4448] = 0;
  _$jscoverage['js/vs_core.js'][4449] = 0;
  _$jscoverage['js/vs_core.js'][4456] = 0;
  _$jscoverage['js/vs_core.js'][4499] = 0;
  _$jscoverage['js/vs_core.js'][4501] = 0;
  _$jscoverage['js/vs_core.js'][4502] = 0;
  _$jscoverage['js/vs_core.js'][4503] = 0;
  _$jscoverage['js/vs_core.js'][4505] = 0;
  _$jscoverage['js/vs_core.js'][4506] = 0;
  _$jscoverage['js/vs_core.js'][4507] = 0;
  _$jscoverage['js/vs_core.js'][4508] = 0;
  _$jscoverage['js/vs_core.js'][4510] = 0;
  _$jscoverage['js/vs_core.js'][4517] = 0;
  _$jscoverage['js/vs_core.js'][4523] = 0;
  _$jscoverage['js/vs_core.js'][4529] = 0;
  _$jscoverage['js/vs_core.js'][4535] = 0;
  _$jscoverage['js/vs_core.js'][4541] = 0;
  _$jscoverage['js/vs_core.js'][4547] = 0;
  _$jscoverage['js/vs_core.js'][4553] = 0;
  _$jscoverage['js/vs_core.js'][4559] = 0;
  _$jscoverage['js/vs_core.js'][4565] = 0;
  _$jscoverage['js/vs_core.js'][4571] = 0;
  _$jscoverage['js/vs_core.js'][4579] = 0;
  _$jscoverage['js/vs_core.js'][4586] = 0;
  _$jscoverage['js/vs_core.js'][4593] = 0;
  _$jscoverage['js/vs_core.js'][4600] = 0;
  _$jscoverage['js/vs_core.js'][4607] = 0;
  _$jscoverage['js/vs_core.js'][4614] = 0;
  _$jscoverage['js/vs_core.js'][4621] = 0;
  _$jscoverage['js/vs_core.js'][4628] = 0;
  _$jscoverage['js/vs_core.js'][4635] = 0;
  _$jscoverage['js/vs_core.js'][4642] = 0;
  _$jscoverage['js/vs_core.js'][4649] = 0;
  _$jscoverage['js/vs_core.js'][4656] = 0;
  _$jscoverage['js/vs_core.js'][4662] = 0;
  _$jscoverage['js/vs_core.js'][4668] = 0;
  _$jscoverage['js/vs_core.js'][4674] = 0;
  _$jscoverage['js/vs_core.js'][4680] = 0;
  _$jscoverage['js/vs_core.js'][4686] = 0;
  _$jscoverage['js/vs_core.js'][4692] = 0;
  _$jscoverage['js/vs_core.js'][4695] = 0;
  _$jscoverage['js/vs_core.js'][4703] = 0;
  _$jscoverage['js/vs_core.js'][4705] = 0;
  _$jscoverage['js/vs_core.js'][4706] = 0;
  _$jscoverage['js/vs_core.js'][4708] = 0;
  _$jscoverage['js/vs_core.js'][4709] = 0;
  _$jscoverage['js/vs_core.js'][4710] = 0;
  _$jscoverage['js/vs_core.js'][4711] = 0;
  _$jscoverage['js/vs_core.js'][4713] = 0;
  _$jscoverage['js/vs_core.js'][4714] = 0;
  _$jscoverage['js/vs_core.js'][4716] = 0;
  _$jscoverage['js/vs_core.js'][4720] = 0;
  _$jscoverage['js/vs_core.js'][4723] = 0;
  _$jscoverage['js/vs_core.js'][4743] = 0;
  _$jscoverage['js/vs_core.js'][4752] = 0;
  _$jscoverage['js/vs_core.js'][4754] = 0;
  _$jscoverage['js/vs_core.js'][4756] = 0;
  _$jscoverage['js/vs_core.js'][4758] = 0;
  _$jscoverage['js/vs_core.js'][4759] = 0;
  _$jscoverage['js/vs_core.js'][4760] = 0;
  _$jscoverage['js/vs_core.js'][4762] = 0;
  _$jscoverage['js/vs_core.js'][4764] = 0;
  _$jscoverage['js/vs_core.js'][4765] = 0;
  _$jscoverage['js/vs_core.js'][4766] = 0;
  _$jscoverage['js/vs_core.js'][4768] = 0;
  _$jscoverage['js/vs_core.js'][4770] = 0;
  _$jscoverage['js/vs_core.js'][4771] = 0;
  _$jscoverage['js/vs_core.js'][4772] = 0;
  _$jscoverage['js/vs_core.js'][4774] = 0;
  _$jscoverage['js/vs_core.js'][4776] = 0;
  _$jscoverage['js/vs_core.js'][4777] = 0;
  _$jscoverage['js/vs_core.js'][4778] = 0;
  _$jscoverage['js/vs_core.js'][4780] = 0;
  _$jscoverage['js/vs_core.js'][4782] = 0;
  _$jscoverage['js/vs_core.js'][4783] = 0;
  _$jscoverage['js/vs_core.js'][4784] = 0;
  _$jscoverage['js/vs_core.js'][4785] = 0;
  _$jscoverage['js/vs_core.js'][4787] = 0;
  _$jscoverage['js/vs_core.js'][4788] = 0;
  _$jscoverage['js/vs_core.js'][4789] = 0;
  _$jscoverage['js/vs_core.js'][4791] = 0;
  _$jscoverage['js/vs_core.js'][4792] = 0;
  _$jscoverage['js/vs_core.js'][4795] = 0;
  _$jscoverage['js/vs_core.js'][4798] = 0;
  _$jscoverage['js/vs_core.js'][4800] = 0;
  _$jscoverage['js/vs_core.js'][4801] = 0;
  _$jscoverage['js/vs_core.js'][4802] = 0;
  _$jscoverage['js/vs_core.js'][4803] = 0;
  _$jscoverage['js/vs_core.js'][4805] = 0;
  _$jscoverage['js/vs_core.js'][4806] = 0;
  _$jscoverage['js/vs_core.js'][4808] = 0;
  _$jscoverage['js/vs_core.js'][4823] = 0;
  _$jscoverage['js/vs_core.js'][4826] = 0;
  _$jscoverage['js/vs_core.js'][4827] = 0;
  _$jscoverage['js/vs_core.js'][4829] = 0;
  _$jscoverage['js/vs_core.js'][4831] = 0;
  _$jscoverage['js/vs_core.js'][4832] = 0;
  _$jscoverage['js/vs_core.js'][4833] = 0;
  _$jscoverage['js/vs_core.js'][4836] = 0;
  _$jscoverage['js/vs_core.js'][4838] = 0;
  _$jscoverage['js/vs_core.js'][4839] = 0;
  _$jscoverage['js/vs_core.js'][4841] = 0;
  _$jscoverage['js/vs_core.js'][4842] = 0;
  _$jscoverage['js/vs_core.js'][4843] = 0;
  _$jscoverage['js/vs_core.js'][4844] = 0;
  _$jscoverage['js/vs_core.js'][4847] = 0;
  _$jscoverage['js/vs_core.js'][4849] = 0;
  _$jscoverage['js/vs_core.js'][4850] = 0;
  _$jscoverage['js/vs_core.js'][4853] = 0;
  _$jscoverage['js/vs_core.js'][4856] = 0;
  _$jscoverage['js/vs_core.js'][4858] = 0;
  _$jscoverage['js/vs_core.js'][4860] = 0;
  _$jscoverage['js/vs_core.js'][4865] = 0;
  _$jscoverage['js/vs_core.js'][4867] = 0;
  _$jscoverage['js/vs_core.js'][4868] = 0;
  _$jscoverage['js/vs_core.js'][4870] = 0;
  _$jscoverage['js/vs_core.js'][4871] = 0;
  _$jscoverage['js/vs_core.js'][4873] = 0;
  _$jscoverage['js/vs_core.js'][4876] = 0;
  _$jscoverage['js/vs_core.js'][4878] = 0;
  _$jscoverage['js/vs_core.js'][4882] = 0;
  _$jscoverage['js/vs_core.js'][4885] = 0;
  _$jscoverage['js/vs_core.js'][4895] = 0;
  _$jscoverage['js/vs_core.js'][4896] = 0;
  _$jscoverage['js/vs_core.js'][4905] = 0;
  _$jscoverage['js/vs_core.js'][4912] = 0;
  _$jscoverage['js/vs_core.js'][4914] = 0;
  _$jscoverage['js/vs_core.js'][4915] = 0;
  _$jscoverage['js/vs_core.js'][4916] = 0;
  _$jscoverage['js/vs_core.js'][4917] = 0;
  _$jscoverage['js/vs_core.js'][4918] = 0;
  _$jscoverage['js/vs_core.js'][4919] = 0;
  _$jscoverage['js/vs_core.js'][4920] = 0;
  _$jscoverage['js/vs_core.js'][4921] = 0;
  _$jscoverage['js/vs_core.js'][4922] = 0;
  _$jscoverage['js/vs_core.js'][4923] = 0;
  _$jscoverage['js/vs_core.js'][4924] = 0;
  _$jscoverage['js/vs_core.js'][4930] = 0;
  _$jscoverage['js/vs_core.js'][4932] = 0;
  _$jscoverage['js/vs_core.js'][4933] = 0;
  _$jscoverage['js/vs_core.js'][4934] = 0;
  _$jscoverage['js/vs_core.js'][4936] = 0;
  _$jscoverage['js/vs_core.js'][4937] = 0;
  _$jscoverage['js/vs_core.js'][4938] = 0;
  _$jscoverage['js/vs_core.js'][4945] = 0;
  _$jscoverage['js/vs_core.js'][4979] = 0;
  _$jscoverage['js/vs_core.js'][5008] = 0;
  _$jscoverage['js/vs_core.js'][5010] = 0;
  _$jscoverage['js/vs_core.js'][5017] = 0;
  _$jscoverage['js/vs_core.js'][5058] = 0;
  _$jscoverage['js/vs_core.js'][5060] = 0;
  _$jscoverage['js/vs_core.js'][5061] = 0;
  _$jscoverage['js/vs_core.js'][5062] = 0;
  _$jscoverage['js/vs_core.js'][5065] = 0;
  _$jscoverage['js/vs_core.js'][5120] = 0;
  _$jscoverage['js/vs_core.js'][5122] = 0;
  _$jscoverage['js/vs_core.js'][5123] = 0;
  _$jscoverage['js/vs_core.js'][5126] = 0;
  _$jscoverage['js/vs_core.js'][5127] = 0;
  _$jscoverage['js/vs_core.js'][5128] = 0;
  _$jscoverage['js/vs_core.js'][5130] = 0;
  _$jscoverage['js/vs_core.js'][5131] = 0;
  _$jscoverage['js/vs_core.js'][5133] = 0;
  _$jscoverage['js/vs_core.js'][5134] = 0;
  _$jscoverage['js/vs_core.js'][5136] = 0;
  _$jscoverage['js/vs_core.js'][5138] = 0;
  _$jscoverage['js/vs_core.js'][5140] = 0;
  _$jscoverage['js/vs_core.js'][5142] = 0;
  _$jscoverage['js/vs_core.js'][5143] = 0;
  _$jscoverage['js/vs_core.js'][5145] = 0;
  _$jscoverage['js/vs_core.js'][5147] = 0;
  _$jscoverage['js/vs_core.js'][5148] = 0;
  _$jscoverage['js/vs_core.js'][5152] = 0;
  _$jscoverage['js/vs_core.js'][5153] = 0;
  _$jscoverage['js/vs_core.js'][5158] = 0;
  _$jscoverage['js/vs_core.js'][5159] = 0;
  _$jscoverage['js/vs_core.js'][5165] = 0;
  _$jscoverage['js/vs_core.js'][5169] = 0;
  _$jscoverage['js/vs_core.js'][5175] = 0;
  _$jscoverage['js/vs_core.js'][5184] = 0;
  _$jscoverage['js/vs_core.js'][5186] = 0;
  _$jscoverage['js/vs_core.js'][5198] = 0;
  _$jscoverage['js/vs_core.js'][5200] = 0;
  _$jscoverage['js/vs_core.js'][5212] = 0;
  _$jscoverage['js/vs_core.js'][5214] = 0;
  _$jscoverage['js/vs_core.js'][5226] = 0;
  _$jscoverage['js/vs_core.js'][5228] = 0;
  _$jscoverage['js/vs_core.js'][5240] = 0;
  _$jscoverage['js/vs_core.js'][5242] = 0;
  _$jscoverage['js/vs_core.js'][5254] = 0;
  _$jscoverage['js/vs_core.js'][5266] = 0;
  _$jscoverage['js/vs_core.js'][5275] = 0;
  _$jscoverage['js/vs_core.js'][5309] = 0;
  _$jscoverage['js/vs_core.js'][5311] = 0;
  _$jscoverage['js/vs_core.js'][5312] = 0;
  _$jscoverage['js/vs_core.js'][5313] = 0;
  _$jscoverage['js/vs_core.js'][5316] = 0;
  _$jscoverage['js/vs_core.js'][5336] = 0;
  _$jscoverage['js/vs_core.js'][5353] = 0;
  _$jscoverage['js/vs_core.js'][5363] = 0;
  _$jscoverage['js/vs_core.js'][5364] = 0;
  _$jscoverage['js/vs_core.js'][5366] = 0;
  _$jscoverage['js/vs_core.js'][5368] = 0;
  _$jscoverage['js/vs_core.js'][5369] = 0;
  _$jscoverage['js/vs_core.js'][5370] = 0;
  _$jscoverage['js/vs_core.js'][5374] = 0;
  _$jscoverage['js/vs_core.js'][5378] = 0;
  _$jscoverage['js/vs_core.js'][5392] = 0;
  _$jscoverage['js/vs_core.js'][5393] = 0;
  _$jscoverage['js/vs_core.js'][5394] = 0;
  _$jscoverage['js/vs_core.js'][5396] = 0;
  _$jscoverage['js/vs_core.js'][5398] = 0;
  _$jscoverage['js/vs_core.js'][5400] = 0;
  _$jscoverage['js/vs_core.js'][5414] = 0;
  _$jscoverage['js/vs_core.js'][5415] = 0;
  _$jscoverage['js/vs_core.js'][5416] = 0;
  _$jscoverage['js/vs_core.js'][5417] = 0;
  _$jscoverage['js/vs_core.js'][5419] = 0;
  _$jscoverage['js/vs_core.js'][5420] = 0;
  _$jscoverage['js/vs_core.js'][5421] = 0;
  _$jscoverage['js/vs_core.js'][5442] = 0;
  _$jscoverage['js/vs_core.js'][5443] = 0;
  _$jscoverage['js/vs_core.js'][5453] = 0;
  _$jscoverage['js/vs_core.js'][5454] = 0;
  _$jscoverage['js/vs_core.js'][5466] = 0;
  _$jscoverage['js/vs_core.js'][5484] = 0;
  _$jscoverage['js/vs_core.js'][5486] = 0;
  _$jscoverage['js/vs_core.js'][5487] = 0;
  _$jscoverage['js/vs_core.js'][5489] = 0;
  _$jscoverage['js/vs_core.js'][5490] = 0;
  _$jscoverage['js/vs_core.js'][5491] = 0;
  _$jscoverage['js/vs_core.js'][5492] = 0;
  _$jscoverage['js/vs_core.js'][5493] = 0;
  _$jscoverage['js/vs_core.js'][5496] = 0;
  _$jscoverage['js/vs_core.js'][5497] = 0;
  _$jscoverage['js/vs_core.js'][5510] = 0;
  _$jscoverage['js/vs_core.js'][5511] = 0;
  _$jscoverage['js/vs_core.js'][5513] = 0;
  _$jscoverage['js/vs_core.js'][5515] = 0;
  _$jscoverage['js/vs_core.js'][5516] = 0;
  _$jscoverage['js/vs_core.js'][5518] = 0;
  _$jscoverage['js/vs_core.js'][5520] = 0;
  _$jscoverage['js/vs_core.js'][5521] = 0;
  _$jscoverage['js/vs_core.js'][5523] = 0;
  _$jscoverage['js/vs_core.js'][5524] = 0;
  _$jscoverage['js/vs_core.js'][5526] = 0;
  _$jscoverage['js/vs_core.js'][5527] = 0;
  _$jscoverage['js/vs_core.js'][5529] = 0;
  _$jscoverage['js/vs_core.js'][5532] = 0;
  _$jscoverage['js/vs_core.js'][5537] = 0;
  _$jscoverage['js/vs_core.js'][5541] = 0;
  _$jscoverage['js/vs_core.js'][5547] = 0;
  _$jscoverage['js/vs_core.js'][5559] = 0;
  _$jscoverage['js/vs_core.js'][5560] = 0;
  _$jscoverage['js/vs_core.js'][5573] = 0;
  _$jscoverage['js/vs_core.js'][5575] = 0;
  _$jscoverage['js/vs_core.js'][5584] = 0;
  _$jscoverage['js/vs_core.js'][5620] = 0;
  _$jscoverage['js/vs_core.js'][5622] = 0;
  _$jscoverage['js/vs_core.js'][5623] = 0;
  _$jscoverage['js/vs_core.js'][5624] = 0;
  _$jscoverage['js/vs_core.js'][5626] = 0;
  _$jscoverage['js/vs_core.js'][5629] = 0;
  _$jscoverage['js/vs_core.js'][5655] = 0;
  _$jscoverage['js/vs_core.js'][5657] = 0;
  _$jscoverage['js/vs_core.js'][5658] = 0;
  _$jscoverage['js/vs_core.js'][5660] = 0;
  _$jscoverage['js/vs_core.js'][5662] = 0;
  _$jscoverage['js/vs_core.js'][5676] = 0;
  _$jscoverage['js/vs_core.js'][5678] = 0;
  _$jscoverage['js/vs_core.js'][5680] = 0;
  _$jscoverage['js/vs_core.js'][5711] = 0;
  _$jscoverage['js/vs_core.js'][5717] = 0;
  _$jscoverage['js/vs_core.js'][5764] = 0;
  _$jscoverage['js/vs_core.js'][5766] = 0;
  _$jscoverage['js/vs_core.js'][5767] = 0;
  _$jscoverage['js/vs_core.js'][5768] = 0;
  _$jscoverage['js/vs_core.js'][5771] = 0;
  _$jscoverage['js/vs_core.js'][5795] = 0;
  _$jscoverage['js/vs_core.js'][5796] = 0;
  _$jscoverage['js/vs_core.js'][5798] = 0;
  _$jscoverage['js/vs_core.js'][5799] = 0;
  _$jscoverage['js/vs_core.js'][5801] = 0;
  _$jscoverage['js/vs_core.js'][5803] = 0;
  _$jscoverage['js/vs_core.js'][5804] = 0;
  _$jscoverage['js/vs_core.js'][5808] = 0;
  _$jscoverage['js/vs_core.js'][5809] = 0;
  _$jscoverage['js/vs_core.js'][5812] = 0;
  _$jscoverage['js/vs_core.js'][5814] = 0;
  _$jscoverage['js/vs_core.js'][5815] = 0;
  _$jscoverage['js/vs_core.js'][5817] = 0;
  _$jscoverage['js/vs_core.js'][5830] = 0;
  _$jscoverage['js/vs_core.js'][5831] = 0;
  _$jscoverage['js/vs_core.js'][5833] = 0;
  _$jscoverage['js/vs_core.js'][5834] = 0;
  _$jscoverage['js/vs_core.js'][5835] = 0;
  _$jscoverage['js/vs_core.js'][5837] = 0;
  _$jscoverage['js/vs_core.js'][5838] = 0;
  _$jscoverage['js/vs_core.js'][5842] = 0;
  _$jscoverage['js/vs_core.js'][5845] = 0;
  _$jscoverage['js/vs_core.js'][5846] = 0;
  _$jscoverage['js/vs_core.js'][5848] = 0;
  _$jscoverage['js/vs_core.js'][5851] = 0;
  _$jscoverage['js/vs_core.js'][5857] = 0;
}
_$jscoverage['js/vs_core.js'].source = ["<span class=\"c\">/** @license</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>window<span class=\"k\">,</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> document <span class=\"k\">=</span> window<span class=\"k\">.</span>document<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                   </span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"k\">var</span> vs <span class=\"k\">=</span> window<span class=\"k\">.</span>vs<span class=\"k\">,</span>","  util <span class=\"k\">=</span> vs<span class=\"k\">.</span>util<span class=\"k\">,</span>","  core <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">;</span>","  ","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> _id_index_ <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns a local unique Id &lt;p&gt;</span>","<span class=\"c\"> * The algorithm is based on an index initialized when the page is loaded.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.core</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {String}</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> createId <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"s\">\"vs_id_\"</span> <span class=\"k\">+</span> _id_index_<span class=\"k\">++;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns an unique Id &lt;p&gt;</span>","<span class=\"c\"> * The algorithm uses a time stamp and a random number to generate the id.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.core</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {String}</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> createUniqueId <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"s\">\"vs_id_\"</span> <span class=\"k\">+</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"\"</span> <span class=\"k\">+</span> Math<span class=\"k\">.</span>floor <span class=\"k\">(</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"s\">1000000</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","core<span class=\"k\">.</span>createId <span class=\"k\">=</span> createId<span class=\"k\">;</span>","core<span class=\"k\">.</span>createUniqueId <span class=\"k\">=</span> createUniqueId<span class=\"k\">;</span><span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class Object</span>","<span class=\"c\"> *  vs.core.Object is the root class of most class hierarchies. Through</span>","<span class=\"c\"> *  vs.core.Object, objects inherit a basic interface for configuration</span>","<span class=\"c\"> *  and clone mechanism. It provides an unique identifier for objects.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> VSObject <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>config<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> config<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> config<span class=\"k\">.</span>id<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> createId <span class=\"k\">();</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__config__ <span class=\"k\">=</span> util<span class=\"k\">.</span>clone <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","VSObject<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @String</span>","<span class=\"c\">   */</span>","   _id<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @boolean</span>","<span class=\"c\">   */</span>","   __i__<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @object</span>","<span class=\"c\">   */</span>","   __config__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Object default init. &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#init</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  myObject = new vs.core.Object (vs.core.createId ());</span>","<span class=\"c\">   *  myObject.init ();</span>","<span class=\"c\">   *  @return {Object} this</span>","<span class=\"c\">   */</span>","  init <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>fromClone<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__i__<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> createId <span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// save the current object</span>","    VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>fromClone<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>initComponent <span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__i__ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// Call initialization code generated by ViniSketch Designer</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>fromClone <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>vsdInit<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>vsdInit <span class=\"k\">();</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__config__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>configure <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__config__<span class=\"k\">);</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__config__<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Call optional end initialization method</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>componentDidInitialize<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>componentDidInitialize <span class=\"k\">();</span>","    ","    <span class=\"c\">// legacy code for application using the initSkin mechanism</span>","    <span class=\"c\">// @deprecated</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>initSkin<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">\"Your application shouldn't use initSkin anymore.</span><span class=\"t\">\\n</span><span class=\"s\">You should rename by componentDidInitialize.\"</span><span class=\"k\">);</span>","      ","      <span class=\"c\">// create a fake initSkin (for super call)</span>","      VSObject<span class=\"k\">.</span>prototype<span class=\"k\">.</span>initSkin <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      ","      <span class=\"c\">// call the initSkin</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>initSkin <span class=\"k\">();</span>","","      <span class=\"c\">// remove the fake initSkin</span>","      VSObject<span class=\"k\">.</span>prototype<span class=\"k\">.</span>initSkin <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  initComponent <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @deprecated</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  createId <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    console<span class=\"k\">.</span>warn","      <span class=\"k\">(</span><span class=\"s\">\"this.createId is deprecated, Use the static method vs.core.createId instead\"</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> createId <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Object configuation method. &lt;p&gt;</span>","<span class=\"c\">   *  Call this method to adjust some properties of the internal components</span>","<span class=\"c\">   *  using one call. &lt;br/&gt;</span>","<span class=\"c\">   *  It takes as parameters, an associated array &lt;propertyName, value&gt;.</span>","<span class=\"c\">   *  &lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\">   *  Ex:</span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  var myObject = new vs.core.Object ({id: 'myobject'});</span>","<span class=\"c\">   *  myObject.init ();</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  myObject.configure ({prop1: \"1\", prop2: 'hello', ..}); </span>","<span class=\"c\">   *  &lt;=&gt;</span>","<span class=\"c\">   *  myObject.prop1 = \"1\";</span>","<span class=\"c\">   *  myObject.prop2 = \"hello\";</span>","<span class=\"c\">   *  ...</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#configure</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Object} config the associated array used for configuring the </span>","<span class=\"c\">   *        object.</span>","<span class=\"c\">   */</span>","  configure <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>config<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> props<span class=\"k\">,</span> key<span class=\"k\">,</span> i<span class=\"k\">,</span> should_propagate <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span> desc<span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>df<span class=\"k\">)</span> df<span class=\"k\">.</span>pausePropagation <span class=\"k\">();</span>","","    <span class=\"c\">// Manage model</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">instanceof</span> Model<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      desc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getPropertyDescriptor <span class=\"k\">(</span><span class=\"s\">'model'</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc <span class=\"k\">&amp;&amp;</span> desc<span class=\"k\">.</span>set<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// model property assignation</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>model <span class=\"k\">=</span> config<span class=\"k\">;</span>","        should_propagate <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// one by one property copy</span>","        props <span class=\"k\">=</span> config<span class=\"k\">.</span>getProperties <span class=\"k\">();</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> props<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","        <span class=\"k\">{</span>","          key <span class=\"k\">=</span> props <span class=\"k\">[</span>i<span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">===</span> <span class=\"s\">'id'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> config <span class=\"k\">[</span>key<span class=\"k\">];</span>","          should_propagate <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span> <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> config<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">===</span> <span class=\"s\">'id'</span> <span class=\"k\">||</span> key <span class=\"k\">===</span> <span class=\"s\">'node'</span> <span class=\"k\">||</span>","            key <span class=\"k\">===</span> <span class=\"s\">'node_ref'</span> <span class=\"k\">||</span> key <span class=\"k\">===</span> <span class=\"s\">'view'</span><span class=\"k\">)</span> ","        <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> config <span class=\"k\">[</span>key<span class=\"k\">];</span>","        should_propagate <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>df<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      df<span class=\"k\">.</span>restartPropagation <span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>should_propagate<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange <span class=\"k\">();</span>","        df<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>should_propagate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange<span class=\"k\">)</span> ","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange <span class=\"k\">();</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns the list of object's properties name &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#getProperties</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @return {Array} Array of name of properties</span>","<span class=\"c\">   */</span>","  getProperties <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>_properties_<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>_properties_<span class=\"k\">.</span>slice <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns a copy of the objet's properties for JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used for persistence or serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#toJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @return {String} The JSON String</span>","<span class=\"c\">   */</span>","  toJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_toJSON <span class=\"k\">(</span><span class=\"s\">\"{\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"}\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set objet's properties from JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used when retrieve data from serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#parseJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} json The JSON String</span>","<span class=\"c\">   */</span>","  parseJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>json<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> obj <span class=\"k\">=</span> <span class=\"k\">(</span>json <span class=\"k\">&amp;&amp;</span> util<span class=\"k\">.</span>parseJSON <span class=\"k\">(</span>json<span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> value<span class=\"k\">,</span> result<span class=\"k\">;</span>","  ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span>","      <span class=\"k\">{</span>","<span class=\"c\">//         value = obj [key];</span>","<span class=\"c\">//         if (util.isString (value))</span>","<span class=\"c\">//         {</span>","<span class=\"c\">//           result = util.__date_reg_exp.exec (value);</span>","<span class=\"c\">//           if (result &amp;&amp; result [1]) // JSON Date -&gt; Date generation</span>","<span class=\"c\">//           {</span>","<span class=\"c\">//             this ['_' + key] = new Date (parseInt (result [1]));</span>","<span class=\"c\">//           }</span>","<span class=\"c\">//           else this ['_' + key] = value; // String</span>","<span class=\"c\">//         }</span>","        <span class=\"k\">this</span> <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.parseJSON failed. \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns a copy of the objet's properties for JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used for persistence or serialization.</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * @name vs.core.Object#_toJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  _toJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>json<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> prop_name<span class=\"k\">,</span> value<span class=\"k\">,</span> str<span class=\"k\">,</span>","      _properties_ <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>_properties_<span class=\"k\">,</span> n <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>_properties_<span class=\"k\">)</span> <span class=\"k\">return</span> json<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> _properties_<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      prop_name <span class=\"k\">=</span> _properties_ <span class=\"k\">[</span>i<span class=\"k\">];</span>","      value <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> str <span class=\"k\">=</span> <span class=\"s\">'null'</span><span class=\"k\">;</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">instanceof</span> Date<span class=\"k\">)</span>","      <span class=\"k\">{</span> str <span class=\"k\">=</span> <span class=\"s\">'\"</span><span class=\"t\">\\/</span><span class=\"s\">Date('</span> <span class=\"k\">+</span> value<span class=\"k\">.</span>getTime <span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">')</span><span class=\"t\">\\/</span><span class=\"s\">\"'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value<span class=\"k\">.</span>toJSON<span class=\"k\">)</span> <span class=\"k\">{</span> str <span class=\"k\">=</span> value<span class=\"k\">.</span>toJSON <span class=\"k\">();</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">try</span> <span class=\"k\">{</span>","          str <span class=\"k\">=</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","        <span class=\"k\">{</span> ","          console<span class=\"k\">.</span>warn <span class=\"k\">(</span>e<span class=\"k\">);</span>","          <span class=\"k\">continue</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>n<span class=\"k\">++)</span> json <span class=\"k\">+=</span> <span class=\"s\">','</span><span class=\"k\">;</span>","      json <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> prop_name <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">:\"</span> <span class=\"k\">+</span> str<span class=\"k\">;</span>","    <span class=\"k\">}</span>","        ","    <span class=\"k\">return</span> json<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually force properties change propagation.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * If no property name is specified, the system will assume all component's</span>","<span class=\"c\">   * properties have been modified.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#propertyChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} property the name of the modified property.[optional]</span>","<span class=\"c\">   */</span>","  propertyChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>property<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> df<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">,</span> property<span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually force properties change propagation.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * @deprecated</span>","<span class=\"c\">   * @name vs.core.Object#propagateChange</span>","<span class=\"c\">   * @see vs.core.Object#propertyChange</span>","<span class=\"c\">   * @param {String} property the name of the modified property.[optional]</span>","<span class=\"c\">   * @param {Object} data.[optional]</span>","<span class=\"c\">   */</span>","  propagateChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>property<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>propertyChange <span class=\"k\">(</span>property<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * The method allows to link a model to an other object (a view for </span>","<span class=\"c\">   * instance).&lt;br /&gt;</span>","<span class=\"c\">   * This is a simple way to create a MVC architecture; each model</span>","<span class=\"c\">   * modification will be propagated to the view.&lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\">   * Linking is quite different than dataflow.&lt;br/&gt;</span>","<span class=\"c\">   * You can use linking to connect 2 objects with the same properties name.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * With dataflow its possible to connect a set of object, and define precisely </span>","<span class=\"c\">   * witch properties are connected together.&lt;br/&gt;</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * Please notice that dataflow propagation is more optimized than linking </span>","<span class=\"c\">   * propagation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @example</span>","<span class=\"c\">   *  var myModel = new MyModel ().init ();</span>","<span class=\"c\">   *  var myView = new MyView ().init ();</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  myView.link (myModel);</span>","<span class=\"c\">   *  </span>","<span class=\"c\">   *  myModel.prop = \"value\"; // the myView.prop will be automatically updated.</span>","<span class=\"c\">   *  ...</span>","<span class=\"c\">   *  myModel.stopPropagation ();</span>","<span class=\"c\">   *  myModel.prop = \"value\";</span>","<span class=\"c\">   *  myModel.propBis = \"valueBis\";</span>","<span class=\"c\">   *  myModel.change (); // the view is updated</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#link</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {vs.core.Model} model The model to link with</span>","<span class=\"c\">   */</span>","  link <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>model<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">// model update management</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>model <span class=\"k\">instanceof</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">.</span>unlinkTo <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__model <span class=\"k\">=</span> model<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">.</span>linkTo <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      ","      <span class=\"c\">// first configuration</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>configure <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">)</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">throw</span> <span class=\"s\">\"vs.core.Object.link; parameter is not a vs.core.Model\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Unlink the model which was linked with this object</span>","<span class=\"c\">   * @see vs.core.Object#link</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#unlink</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  unlink <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"c\">// model update management</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">.</span>unlinkTo <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","        <span class=\"k\">var</span> props <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">.</span>getProperties <span class=\"k\">();</span> l <span class=\"k\">=</span> props<span class=\"k\">.</span>length<span class=\"k\">,</span>","          config <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>l<span class=\"k\">--)</span> <span class=\"k\">{</span> config <span class=\"k\">[</span>props<span class=\"k\">[</span>l<span class=\"k\">]]</span> <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>configure <span class=\"k\">(</span>config<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__model <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Clone the Object &lt;p&gt;</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @name vs.core.Object#clone</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Object} config the configuration structure for the new object</span>","<span class=\"c\">   * @return {vs.core.Object} the cloned object</span>","<span class=\"c\">   */</span>","  clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> obj<span class=\"k\">,</span> key<span class=\"k\">,</span> value<span class=\"k\">,</span> desc<span class=\"k\">,</span> desc_clone<span class=\"k\">,</span> getter<span class=\"k\">,</span> setter<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>cloned_map<span class=\"k\">)</span> <span class=\"k\">{</span> cloned_map <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// have already cloned;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span> cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">)</span> <span class=\"k\">{</span> config <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> config<span class=\"k\">.</span>id <span class=\"k\">=</span> createId <span class=\"k\">();</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      obj <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">(</span>config<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">\"impossible to clone this object.\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">null</span>","    <span class=\"k\">}</span>","    ","    cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">;</span>","    ","    <span class=\"k\">function</span> _propertyDecl_api1 <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> src<span class=\"k\">,</span> trg<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> getter <span class=\"k\">=</span> src<span class=\"k\">.</span>__lookupGetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">),</span>","        setter <span class=\"k\">=</span> src<span class=\"k\">.</span>__lookupSetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">),</span>","        getter_clone <span class=\"k\">=</span> trg<span class=\"k\">.</span>__lookupGetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">),</span>","        setter_clone <span class=\"k\">=</span> trg<span class=\"k\">.</span>__lookupSetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">);</span>","        ","      <span class=\"c\">// manage getter</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>getter <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>getter_clone<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        trg<span class=\"k\">.</span>__defineGetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> getter<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// manage setter</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>setter <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>setter_clone<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        trg<span class=\"k\">.</span>__defineSetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> setter<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// generic member copy</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>setter <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>getter<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> src <span class=\"k\">[</span>prop_name<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>value<span class=\"k\">))</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">.</span>slice <span class=\"k\">();</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> src <span class=\"k\">[</span>prop_name<span class=\"k\">];</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> _propertyDecl_api2 <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> src<span class=\"k\">,</span> trg<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> desc <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>src<span class=\"k\">,</span> prop_name<span class=\"k\">),</span>","        desc_clone <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>trg<span class=\"k\">,</span> prop_name<span class=\"k\">);</span>","      ","      <span class=\"c\">// manage getter and setter</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>desc<span class=\"k\">.</span>get <span class=\"k\">||</span> desc<span class=\"k\">.</span>set<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// the property description doesn't exist. Create it.</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>desc_clone<span class=\"k\">)</span> <span class=\"k\">{</span> util<span class=\"k\">.</span>defineProperty <span class=\"k\">(</span>trg<span class=\"k\">,</span> prop_name<span class=\"k\">,</span> desc<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// generic member copy</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> value <span class=\"k\">=</span> src <span class=\"k\">[</span>prop_name<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>value<span class=\"k\">))</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">.</span>slice <span class=\"k\">();</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> src <span class=\"k\">[</span>prop_name<span class=\"k\">];</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> propertyDecl <span class=\"k\">=</span>","      <span class=\"k\">(</span>Object<span class=\"k\">.</span>defineProperty<span class=\"k\">)?</span>_propertyDecl_api2<span class=\"k\">:</span>_propertyDecl_api1<span class=\"k\">;</span>","    ","    <span class=\"k\">function</span> _propertyCopy_api1 <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> src<span class=\"k\">,</span> trg<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> getter <span class=\"k\">=</span> src<span class=\"k\">.</span>__lookupGetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">),</span>","        setter <span class=\"k\">=</span> src<span class=\"k\">.</span>__lookupSetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">),</span>","        setter_clone <span class=\"k\">=</span> trg<span class=\"k\">.</span>__lookupSetter__ <span class=\"k\">(</span>prop_name<span class=\"k\">);</span>","        ","      <span class=\"c\">// Property value copy</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>setter <span class=\"k\">||</span> getter<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>setter_clone<span class=\"k\">)</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> src <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">];</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> src <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">];</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">function</span> _propertyCopy_api2 <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> src<span class=\"k\">,</span> trg<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> desc <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>src<span class=\"k\">,</span> prop_name<span class=\"k\">),</span>","        desc_clone <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>trg<span class=\"k\">,</span> prop_name<span class=\"k\">);</span>","      ","      <span class=\"c\">// Property value copy</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc <span class=\"k\">&amp;&amp;</span> desc_clone <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>desc<span class=\"k\">.</span>get <span class=\"k\">||</span> desc<span class=\"k\">.</span>set<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>desc_clone<span class=\"k\">.</span>set<span class=\"k\">)</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> src <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">];</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> trg <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> src <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">];</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> propertyCopy <span class=\"k\">=</span>","      <span class=\"k\">(</span>Object<span class=\"k\">.</span>defineProperty<span class=\"k\">)?</span>_propertyCopy_api2<span class=\"k\">:</span>_propertyCopy_api1<span class=\"k\">;</span>","    ","    <span class=\"c\">// property and function declaration copy</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>obj <span class=\"k\">[</span>key<span class=\"k\">]))</span>","      <span class=\"k\">{</span> obj <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">];</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> propertyDecl <span class=\"k\">(</span>key<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span>","    <span class=\"k\">}</span>","            ","    obj<span class=\"k\">.</span>__i__ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    obj<span class=\"k\">.</span>init <span class=\"k\">();</span>","    ","    <span class=\"c\">// call object specific clone implementation</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_clone <span class=\"k\">(</span>obj<span class=\"k\">,</span> config<span class=\"k\">,</span> cloned_map<span class=\"k\">);</span>","","    <span class=\"c\">// property values copy</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"s\">'id'</span> <span class=\"k\">||</span> key <span class=\"k\">==</span> <span class=\"s\">'_id'</span><span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      ","      propertyCopy <span class=\"k\">(</span>key<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span> ","    <span class=\"k\">}</span>","","    <span class=\"c\">// manage linking clone</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>cloned_map <span class=\"k\">&amp;&amp;</span> cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">.</span>_id<span class=\"k\">])</span>","      <span class=\"k\">{</span> obj<span class=\"k\">.</span>link <span class=\"k\">(</span>cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">.</span>_id<span class=\"k\">]);</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> obj<span class=\"k\">.</span>link <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__model<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @name vs.core.Object#_clone</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {vs.core.Object} obj The cloned object</span>","<span class=\"c\">   * @param {Object} map Map of cloned objects</span>","<span class=\"c\">   */</span>","  _clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*************************************************************</span>","<span class=\"c\">                  Properties introscpection</span>","<span class=\"c\">  *************************************************************/</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   * Returns a property descriptor for an own property (that is, one directly </span>","<span class=\"c\">   * present on an object, not present by dint of being along an object's </span>","<span class=\"c\">   * prototype chain) of a given object.</span>","<span class=\"c\">   * @name vs.core.Object#getOwnPropertyDescriptor </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} prop The name of the property whose description is to </span>","<span class=\"c\">   *   be retrieved</span>","<span class=\"c\">   * @return {Object} The property descriptor or null</span>","<span class=\"c\">   */</span> ","  getOwnPropertyDescriptor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>prop<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> proto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>proto<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>proto<span class=\"k\">,</span> prop<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   * Returns a property descriptor for a property (along the object's </span>","<span class=\"c\">   * prototype chain) of a given object.</span>","<span class=\"c\">   * @name vs.core.Object#getPropertyDescriptor </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} prop The name of the property whose description is to </span>","<span class=\"c\">   *   be retrieved</span>","<span class=\"c\">   * @return {Object} The property descriptor or null</span>","<span class=\"c\">   */</span> ","  getPropertyDescriptor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>prop<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">/** @private */</span>","    <span class=\"k\">function</span> _getOwnPropertyDescriptor <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> proto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>proto<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> desc <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>proto<span class=\"k\">,</span> prop<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc<span class=\"k\">)</span> <span class=\"k\">return</span> desc<span class=\"k\">;</span>","      <span class=\"k\">return</span> _getOwnPropertyDescriptor <span class=\"k\">(</span>proto<span class=\"k\">,</span> prop<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> _getOwnPropertyDescriptor <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> prop<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  _super <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> superFunc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_super<span class=\"k\">.</span>caller<span class=\"k\">.</span>_super_func_<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>superFunc<span class=\"k\">)</span> superFunc<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>VSObject<span class=\"k\">,</span> <span class=\"s\">\"id\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"c\">/** </span>","<span class=\"c\">   * Getter for vs.core.Object id</span>","<span class=\"c\">   * @name vs.core.Object#id </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @type {String}</span>","<span class=\"c\">   */</span> ","  get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">;</span> <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Static members</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","VSObject<span class=\"k\">.</span>_obs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Object <span class=\"k\">=</span> VSObject<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","","<span class=\"c\">*********************************************************************/</span>","","<span class=\"k\">var</span> _constructor_ <span class=\"k\">=</span> window<span class=\"k\">.</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *  var Class1 = vs.core.createClass ({</span>","<span class=\"c\"> *    properties: {name: vs.core.Object.PROPERTY_IN_OUT},{});</span>","<span class=\"c\"> *  var t = new Class1 ({name: 'Hello'});</span>","<span class=\"c\"> *  t.init ();</span>","<span class=\"c\"> *  console.log (t.name); // &gt; 'Hello'</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  var MyView = vs.core.createClass (</span>","<span class=\"c\"> *    parent: vs.ui.View,</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *    constructor : function ()</span>","<span class=\"c\"> *    {</span>","<span class=\"c\"> *      console.log ('MyView constructor');</span>","<span class=\"c\"> *    }  </span>","<span class=\"c\"> *  });</span>","<span class=\"c\"> *  var d = new Dest ({size: [20, 20]}); // &gt; 'MyView constructor'</span>","<span class=\"c\"> *  d.init ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @public</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> createClass <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> klass <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> __spec <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> ","    parent <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">,</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Create the class</span>","  klass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>parent<span class=\"k\">;</span>","    <span class=\"c\">// Call class constructor if it exists</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>klass<span class=\"k\">.</span>__spec <span class=\"k\">&amp;&amp;</span> klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>_constructor<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>_constructor<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// Otherwise the parent constructor</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>klass<span class=\"k\">.</span>__spec <span class=\"k\">&amp;&amp;</span> klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>parent<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>parent<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> klass<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>parent<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    parent <span class=\"k\">=</span> config<span class=\"k\">.</span>parent<span class=\"k\">;</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>parent<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>properties<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    properties <span class=\"k\">=</span> config<span class=\"k\">.</span>properties<span class=\"k\">;</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>properties<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  ","  __spec<span class=\"k\">.</span>parent <span class=\"k\">=</span> parent<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>constructor <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> _constructor_<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    __spec<span class=\"k\">.</span>_constructor <span class=\"k\">=</span> config<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","    __spec<span class=\"k\">.</span>_constructor<span class=\"k\">.</span>_super_func_ <span class=\"k\">=</span> parent<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  klass<span class=\"k\">.</span>__spec <span class=\"k\">=</span> __spec<span class=\"k\">;</span>","  ","  <span class=\"c\">// set class prototype  </span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    klass<span class=\"k\">.</span>prototype <span class=\"k\">=</span> config<span class=\"k\">;</span>","    config<span class=\"k\">.</span>constructor <span class=\"k\">=</span> klass<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>parent<span class=\"k\">.</span>prototype<span class=\"k\">)</span> util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>klass<span class=\"k\">,</span> parent<span class=\"k\">);</span>","  ","  <span class=\"c\">// declare super methods</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span> <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> func <span class=\"k\">=</span> config <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">var</span> superFunc <span class=\"k\">=</span> parent<span class=\"k\">.</span>prototype <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>superFunc<span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// new implementation</span>","    func<span class=\"k\">.</span>_super_func_ <span class=\"k\">=</span> superFunc<span class=\"k\">;</span>","","<span class=\"c\">//     Old implementation</span>","<span class=\"c\">//     The new one, base on this._super.caller._super_func_ (VSObject)</span>","<span class=\"c\">//     should be more efficient</span>","<span class=\"c\">//     config [key] =  (function (func, superFunc)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       return function ()</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         var result, _super = this._super;</span>","<span class=\"c\">//         this._super = superFunc;</span>","<span class=\"c\">//         result = func.apply (this, arguments);</span>","<span class=\"c\">//         this._super = _super;</span>","<span class=\"c\">//         return result;  </span>","<span class=\"c\">//       };</span>","<span class=\"c\">//     }(func, superFunc));  </span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// set class properties</span>","  _setProperties <span class=\"k\">(</span>klass<span class=\"k\">,</span> properties<span class=\"k\">);</span>","  ","  <span class=\"k\">return</span> klass<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @name vs.core.Object.PROPERTY_IN</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {number}</span>","<span class=\"c\"> */</span>","vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_IN <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @name vs.core.Object.PROPERTY_OUT</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {number}</span>","<span class=\"c\"> */</span>","vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_OUT <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @name vs.core.Object.PROPERTY_IN_OUT</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {number}</span>","<span class=\"c\"> */</span>","vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_IN_OUT <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Regular expression used for parsing property export path.</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {RegExp}</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> property_reg <span class=\"k\">=</span> <span class=\"s\">/(\\w+[.\\w+]*)#(\\w+)/</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _setProperties <span class=\"k\">(</span>klass<span class=\"k\">,</span> properties<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> descriptions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> export_value<span class=\"k\">,</span> desc<span class=\"k\">,</span> _prop_name<span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> prop_name <span class=\"k\">in</span> properties<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> value <span class=\"k\">=</span> properties <span class=\"k\">[</span>prop_name<span class=\"k\">];</span>","    ","    <span class=\"c\">// 1) simple description with In, OUT, IN_OUT export</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isNumber <span class=\"k\">(</span>value<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      export_value <span class=\"k\">=</span> value<span class=\"k\">;</span> desc <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      _prop_name <span class=\"k\">=</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> util<span class=\"k\">.</span>underscore <span class=\"k\">(</span>prop_name<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>export_value <span class=\"k\">&amp;</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_IN<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        desc<span class=\"k\">.</span>set <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>prop_name<span class=\"k\">,</span> _prop_name<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">[</span>_prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> v<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>propertyChange <span class=\"k\">(</span>prop_name<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">(</span>prop_name<span class=\"k\">,</span> _prop_name<span class=\"k\">));</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>export_value <span class=\"k\">&amp;</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_OUT<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        desc<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_prop_name<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","          <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">[</span>_prop_name<span class=\"k\">];</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">(</span>_prop_name<span class=\"k\">));</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// 2) export path</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>value<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> property_reg<span class=\"k\">.</span>exec <span class=\"k\">(</span>value<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>result <span class=\"k\">||</span> result<span class=\"k\">.</span>length <span class=\"k\">!=</span> <span class=\"s\">3</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"s\">\"Unvalid property path: \"</span> <span class=\"k\">+</span> value<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      desc <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      desc<span class=\"k\">.</span>set <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_path<span class=\"k\">,</span> _prop_name<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">[</span>_path<span class=\"k\">][</span>_prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> v<span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>propertyChange <span class=\"k\">(</span>_prop_name<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">(</span>result<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> result<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","","      desc<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_path<span class=\"k\">,</span> _prop_name<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","        <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">[</span>_path<span class=\"k\">][</span>_prop_name<span class=\"k\">];</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">(</span>result<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> result<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// 3) Full description</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      desc <span class=\"k\">=</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    descriptions <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> desc<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  util<span class=\"k\">.</span>defineClassProperties <span class=\"k\">(</span>klass<span class=\"k\">,</span> descriptions<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>createClass <span class=\"k\">=</span> createClass<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The vs.core.Model class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @extends vs.core.Object</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * vs.core.Model is a class that defines the basic Model mechanisms to implement</span>","<span class=\"c\"> * a MVC like architecture. If you need to implement a MVC component, you</span>","<span class=\"c\"> * should extend this class.&lt;br/&gt;&lt;br/&gt; &gt;&gt;&gt;&gt; THIS CODE IS STILL UNDER BETA AND </span>","<span class=\"c\"> * THE API MAY CHANGE IN THE FUTURE &lt;&lt;&lt; &lt;p&gt;</span>","<span class=\"c\"> * WikiPedia gives this following definition of a model:&lt;br&gt;</span>","<span class=\"c\"> * \"The model manages the behavior and data of the application, responds to </span>","<span class=\"c\"> * requests for information about its state (usually from the view), and </span>","<span class=\"c\"> * responds to instructions to change state (usually from the controller)\"</span>","<span class=\"c\"> * &lt;p&gt;</span>","<span class=\"c\"> * The Model class exposes 2 kinds of mechanisms you will need:</span>","<span class=\"c\"> * &lt;ul&gt;</span>","<span class=\"c\"> *  &lt;li&gt; Change event binding</span>","<span class=\"c\"> *  &lt;li&gt; Properties change propagation</span>","<span class=\"c\"> * &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * &lt;p/&gt;</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> * &lt;p/&gt;</span>","<span class=\"c\"> * The fallowing example show a TodoModel class with three properties</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *  var TodoModel = vs.core.createClass ({</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   // parent class</span>","<span class=\"c\"> *   parent: vs.core.Model,</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   // Properties definition</span>","<span class=\"c\"> *   properties : {</span>","<span class=\"c\"> *     content: vs.core.Object.PROPERTY_IN_OUT,</span>","<span class=\"c\"> *     done: vs.core.Object.PROPERTY_IN_OUT,</span>","<span class=\"c\"> *     date: vs.core.Object.PROPERTY_OUT</span>","<span class=\"c\"> *   },</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *   // Initialization</span>","<span class=\"c\"> *   initComponent : function ()</span>","<span class=\"c\"> *   {</span>","<span class=\"c\"> *     this._date = new Date ();</span>","<span class=\"c\"> *     this._done = false;</span>","<span class=\"c\"> *     this._content = \"\";</span>","<span class=\"c\"> *   } </span>","<span class=\"c\"> * });</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * var myModel = new TodoModel ({content:\"Something to do\"});</span>","<span class=\"c\"> * myModel.init ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @see vs.core.DataStorage </span>","<span class=\"c\"> * @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Model</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> Model <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>__links__ <span class=\"k\">=</span> <span class=\"k\">[];</span>","<span class=\"k\">}</span>","","Model<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {Object}</span>","<span class=\"c\">   */</span>","   __bindings__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {Array}</span>","<span class=\"c\">   */</span>","   __links__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {Boolean}</span>","<span class=\"c\">   */</span>","   __should_propagate_changes__<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {vs.core.DataStorage}</span>","<span class=\"c\">   */</span>","   _sync_service_<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    core<span class=\"k\">.</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>destructor<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_sync_service_<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>_sync_service_<span class=\"k\">.</span>removeModel <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    ","    <span class=\"k\">function</span> deleteBindings <span class=\"k\">(</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">var</span> bind<span class=\"k\">,</span> l <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>l<span class=\"k\">--)</span>","      <span class=\"k\">{</span>","        bind <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>l<span class=\"k\">];</span>","        util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> spec <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      deleteBindings <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * The event bind method to listen model changes</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   * When you want listen modificaan event generated by this object, you can</span>","<span class=\"c\">   * bind your object (the observer) to this object using 'bindChange' method.</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#bindChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @example</span>","<span class=\"c\">   *  // Listen every change of the model</span>","<span class=\"c\">   *  myModel.bindChange ('', this, this.onChange);</span>","<span class=\"c\">   *  // Listen all the 'add' change of the model</span>","<span class=\"c\">   *  myModel.bindChange ('add', this, this.onChange);</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} action the event specification [optional]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object interested to catch the event [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        notify method will be called [optional]</span>","<span class=\"c\">   */</span>","  bindChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> list_bind<span class=\"k\">,</span> handler<span class=\"k\">;</span>","    ","    spec <span class=\"k\">=</span> spec <span class=\"k\">||</span> <span class=\"s\">'change'</span>","    handler <span class=\"k\">=</span> <span class=\"k\">new</span> Handler <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>    ","    ","    list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]</span> <span class=\"k\">=</span> list_bind<span class=\"k\">;</span> ","    <span class=\"k\">}</span>","    list_bind<span class=\"k\">.</span>push <span class=\"k\">(</span>handler<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event unbind change method</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Should be call when you want stop event listening on this object</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#unbindChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} spec the event specification [optional]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object you want unbind [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        all binding with &lt;spec, obj&gt; will be removed</span>","<span class=\"c\">   */</span>","  unbindChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>spec<span class=\"k\">)</span> spec <span class=\"k\">=</span> <span class=\"s\">'change'</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> unbind <span class=\"k\">(</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">var</span> bind<span class=\"k\">,</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        bind <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>spec <span class=\"k\">===</span> spec<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>obj <span class=\"k\">===</span> obj<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">||</span> util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">)</span>","            <span class=\"k\">{</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>func <span class=\"k\">===</span> func <span class=\"k\">||</span> bind<span class=\"k\">.</span>func_ptr <span class=\"k\">===</span> func<span class=\"k\">)</span>","              <span class=\"k\">{</span>","                list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","                util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","              <span class=\"k\">}</span>","              <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span>","            <span class=\"k\">{</span>","              list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","              util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    unbind <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Configure the model to do not propagate event change.&lt;br/&gt;</span>","<span class=\"c\">   * In order to aggregate rapid changes to a model, you will deactivate</span>","<span class=\"c\">   * change event propagate.</span>","<span class=\"c\">   * After all change are finish you can manual call model.change () to </span>","<span class=\"c\">   * trigger the event.</span>","<span class=\"c\">   * &lt;p&gt;</span>","<span class=\"c\">   * Calling model.change () will reactivate event propagation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#stopPropagation</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stopPropagation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  When you override a Model, you should call this.hasToPropagateChange ()</span>","<span class=\"c\">   *  before calling this.change ().</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Calling model.change () will reactivate event propagation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#hasToPropagateChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   */</span>","  hasToPropagateChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually trigger the \"change\" event.</span>","<span class=\"c\">   * If you have deactivated propagation using myModel.stopPropagation ()</span>","<span class=\"c\">   * in order to aggregate changes to a model, you will want to call </span>","<span class=\"c\">   * myModel.change () when you're all finished.</span>","<span class=\"c\">   * &lt;p&gt;</span>","<span class=\"c\">   * Calling myModel.change () reactivate automatic change propagation</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#change</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {String} action the event specification [optional]</span>","<span class=\"c\">   */</span>","  change <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> doNotManageLinks<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> list_bind<span class=\"k\">,</span> event<span class=\"k\">,</span> handler<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","    event <span class=\"k\">=</span> <span class=\"k\">new</span> Event <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> spec <span class=\"k\">||</span> <span class=\"s\">'change:'</span> <span class=\"k\">+</span> spec<span class=\"k\">);</span>","    ","    <span class=\"k\">try</span>","    <span class=\"k\">{</span>","      <span class=\"c\">// 1) manage links propagation</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>doNotManageLinks<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> l <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__links__<span class=\"k\">.</span>length<span class=\"k\">,</span> obj<span class=\"k\">;</span>","        <span class=\"k\">while</span> <span class=\"k\">(</span>l<span class=\"k\">--)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>__links__ <span class=\"k\">[</span>l<span class=\"k\">].</span>configure <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      ","      <span class=\"c\">// 2) manage change event propagation</span>","      <span class=\"k\">function</span> _change <span class=\"k\">(</span>list_bind<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> i <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">,</span> handler<span class=\"k\">;</span>","  ","        <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span>","        <span class=\"k\">{</span>","          <span class=\"c\">/** @private */</span>","          handler <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>    ","          ","          <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func_ptr<span class=\"k\">)</span> <span class=\"c\">// function pointer call</span>","          <span class=\"k\">{</span>","            handler<span class=\"k\">.</span>func_ptr<span class=\"k\">.</span>call <span class=\"k\">(</span>handler<span class=\"k\">.</span>obj<span class=\"k\">,</span> event<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func<span class=\"k\">)</span> <span class=\"c\">// function name call</span>","          <span class=\"k\">{</span>","            handler<span class=\"k\">.</span>obj<span class=\"k\">[</span>handler<span class=\"k\">.</span>func<span class=\"k\">]</span> <span class=\"k\">(</span>event<span class=\"k\">);</span> ","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"c\">// default notify method</span>","          <span class=\"k\">{</span>","            handler<span class=\"k\">.</span>obj<span class=\"k\">.</span>notify <span class=\"k\">(</span>event<span class=\"k\">);</span> ","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(</span>spec <span class=\"k\">&amp;&amp;</span> spec <span class=\"k\">!=</span> <span class=\"s\">'change'</span><span class=\"k\">)</span> _change <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","      _change <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span><span class=\"s\">'change'</span><span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#linkTo</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {vs.core.Object} linkTo object</span>","<span class=\"c\">   */</span>","  linkTo <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__links__<span class=\"k\">.</span>indexOf <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>__links__<span class=\"k\">.</span>push <span class=\"k\">(</span>obj<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#unlinkTo</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {vs.core.Object} linkTo object</span>","<span class=\"c\">   */</span>","  unlinkTo <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__links__<span class=\"k\">.</span>remove <span class=\"k\">(</span>obj<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually force dataflow properties change propagation.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * If no property name is specified, the system will assume all component's</span>","<span class=\"c\">   * properties have been modified.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#propertyChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} property the name of the modified property.[optional]</span>","<span class=\"c\">   */</span>","  propertyChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>property<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> df<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">,</span> property<span class=\"k\">);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__<span class=\"k\">)</span>","    <span class=\"k\">{</span> ","      <span class=\"k\">var</span> l <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__links__<span class=\"k\">.</span>length<span class=\"k\">,</span> obj<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>property<span class=\"k\">)</span> <span class=\"k\">while</span> <span class=\"k\">(</span>l<span class=\"k\">--)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>__links__ <span class=\"k\">[</span>l<span class=\"k\">]</span> <span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">[</span>property<span class=\"k\">];</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">while</span> <span class=\"k\">(</span>l<span class=\"k\">--)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>__links__ <span class=\"k\">[</span>l<span class=\"k\">].</span>configure <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","","      <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Model<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Model <span class=\"k\">=</span> Model<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.FORCE_EVENT_PROPAGATION_DELAY</span>","<span class=\"c\"> */</span>","FORCE_EVENT_PROPAGATION_DELAY <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","<span class=\"c\">/* touch event messages */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.EVENT_SUPPORT_TOUCH</span>","<span class=\"c\"> */</span>","EVENT_SUPPORT_TOUCH <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">'createTouch'</span> <span class=\"k\">in</span> document<span class=\"k\">);</span>","<span class=\"k\">if</span> <span class=\"k\">(!</span>EVENT_SUPPORT_TOUCH<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>navigator<span class=\"k\">.</span>userAgent<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'Android'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">||</span>","      window<span class=\"k\">.</span>navigator<span class=\"k\">.</span>userAgent<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'BlackBerry'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","  <span class=\"k\">{</span> EVENT_SUPPORT_TOUCH <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/** </span>","<span class=\"c\"> * Start pointer event (mousedown, touchstart, )</span>","<span class=\"c\"> * @name vs.core.POINTER_START</span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_START<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Move pointer event (mousemove, touchmove, )</span>","<span class=\"c\"> * @name vs.core.POINTER_MOVE </span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_MOVE<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * End pointer event (mouseup, touchend, )</span>","<span class=\"c\"> * @name vs.core.POINTER_END </span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_END<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Cancel pointer event (mouseup, touchcancel, )</span>","<span class=\"c\"> * @name vs.core.POINTER_CANCEL </span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_CANCEL<span class=\"k\">;</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span>EVENT_SUPPORT_TOUCH<span class=\"k\">)</span>","<span class=\"k\">{</span>","  core<span class=\"k\">.</span>POINTER_START <span class=\"k\">=</span> <span class=\"s\">'touchstart'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_MOVE <span class=\"k\">=</span> <span class=\"s\">'touchmove'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_END <span class=\"k\">=</span> <span class=\"s\">'touchend'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_CANCEL <span class=\"k\">=</span> <span class=\"s\">'touchcancel'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">else</span>","<span class=\"k\">{</span>","  core<span class=\"k\">.</span>POINTER_START <span class=\"k\">=</span> <span class=\"s\">'mousedown'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_MOVE <span class=\"k\">=</span> <span class=\"s\">'mousemove'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_END <span class=\"k\">=</span> <span class=\"s\">'mouseup'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_CANCEL <span class=\"k\">=</span> <span class=\"s\">'mouseup'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  An vs.core.Event object, or simply an event, contains information about an </span>","<span class=\"c\"> *  input action such as a button click or a key down. The Event object contains</span>","<span class=\"c\"> *  pertinent information about each event, such as where the cursor was located</span>","<span class=\"c\"> *  or which character was typed.&lt;br&gt;</span>","<span class=\"c\"> *  When an event is catch by an application component, the callback</span>","<span class=\"c\"> *  receives as parameters an instance (or sub instance) of this class.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  It specifies the source of the event (which object has generated the event),</span>","<span class=\"c\"> *  the type of the event and an event data.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.core</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {vs.core.EventSource} src the source of the event [mandatory]</span>","<span class=\"c\"> * @param {string} type the event type [mandatory]</span>","<span class=\"c\"> * @param {Object} data complemetary event data [optional]</span>","<span class=\"c\">*/</span>","<span class=\"k\">var</span> Event <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>src<span class=\"k\">,</span> type<span class=\"k\">,</span> data<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>src <span class=\"k\">=</span> src<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>srcTarget <span class=\"k\">=</span> src<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> type<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>data <span class=\"k\">=</span> data<span class=\"k\">;</span>","<span class=\"k\">}</span>","","Event<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * The component which produce the event</span>","<span class=\"c\">   * @type {vs.core.EventSource|HTMLElement}</span>","<span class=\"c\">   * @name vs.core.Event#src</span>","<span class=\"c\">   */</span>","  src<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * [Deprecated] The component which produce the event. &lt;br&gt;</span>","<span class=\"c\">   * In case of DOM event, the Event is mapped to the DOM event. Then</span>","<span class=\"c\">   * the developer has access to srcTarget (and many other data).</span>","<span class=\"c\">   * @type {vs.core.EventSource|HTMLElement}</span>","<span class=\"c\">   * @name vs.core.Event#srcTarget</span>","<span class=\"c\">   * @deprecated</span>","<span class=\"c\">   */</span>","  srcTarget <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * The event spec. For instance 'click' for a mouse click event.</span>","<span class=\"c\">   * @type {String}</span>","<span class=\"c\">   * @name vs.core.Event#type</span>","<span class=\"c\">   */</span>","  type<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * The optional data associate to the event.</span>","<span class=\"c\">   * @type {Object|null}</span>","<span class=\"c\">   * @name vs.core.Event#data</span>","<span class=\"c\">   */</span>","  data<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>src<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>srcTarget<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Event <span class=\"k\">=</span> Event<span class=\"k\">;</span>","core<span class=\"k\">.</span>FORCE_EVENT_PROPAGATION_DELAY <span class=\"k\">=</span> FORCE_EVENT_PROPAGATION_DELAY<span class=\"k\">;</span>","core<span class=\"k\">.</span>EVENT_SUPPORT_TOUCH <span class=\"k\">=</span> EVENT_SUPPORT_TOUCH<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Structure used for managing events</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> Handler <span class=\"k\">(</span>_spec<span class=\"k\">,</span> _obj<span class=\"k\">,</span> _func<span class=\"k\">,</span> _delay<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>spec <span class=\"k\">=</span> _spec<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>obj <span class=\"k\">=</span> _obj<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>delay <span class=\"k\">=</span> FORCE_EVENT_PROPAGATION_DELAY<span class=\"k\">?</span><span class=\"k\">true</span><span class=\"k\">:</span>_delay<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>_func<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>func_ptr <span class=\"k\">=</span> _func<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>func <span class=\"k\">=</span> _func<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @protected</span>","<span class=\"c\"> */</span>","Handler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>destructor <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>spec<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>obj<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delay<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>func_ptr<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>func<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  vs.core.EventSource is an  class that forms the basis of event and command </span>","<span class=\"c\"> *  processing. All class that handles events must inherit form EventSource.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.EventSource</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure [mandatory]</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> EventSource <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** @name vs.core.EventSource# */</span>","EventSource<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  __bindings__ <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  __node_binds__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","  <span class=\"c\">/***************************************************************</span>","","<span class=\"c\">  ***************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> spec<span class=\"k\">,</span> list_bind<span class=\"k\">,</span> i<span class=\"k\">,</span> handler<span class=\"k\">,</span> binds<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>spec <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        handler <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>pop <span class=\"k\">();</span>","        util<span class=\"k\">.</span>free <span class=\"k\">(</span>handler<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">);</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>spec <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      binds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>binds<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn","          <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.destructor, no bind &lt;\"</span> <span class=\"k\">+</span> spec <span class=\"k\">+</span> <span class=\"s\">\" exists.\"</span><span class=\"k\">);</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> binds<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        data <span class=\"k\">=</span> binds <span class=\"k\">[</span>i<span class=\"k\">];</span>","        data<span class=\"k\">.</span>n<span class=\"k\">.</span>removeEventListener <span class=\"k\">(</span>event<span class=\"k\">,</span> data<span class=\"k\">.</span>h<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @name vs.core.EventSource#_clone</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {vs.core.Object} obj The cloned object</span>","<span class=\"c\">   * @param {Object} map Map of cloned objects</span>","<span class=\"c\">   */</span>","  _clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    VSObject<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_clone<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">,</span> cloned_map<span class=\"k\">);</span>","    ","    obj<span class=\"k\">.</span>__bindings__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    obj<span class=\"k\">.</span>__node_binds__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event bind method to listen events</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  When you want listen an event generated by this object, you can</span>","<span class=\"c\">   *  bind your object (the observer) to this object using 'bind' method.</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Warning:&lt;br&gt;</span>","<span class=\"c\">   *  If you know the process of your callback can take time or can be blocking</span>","<span class=\"c\">   *  you should set delay to 'true' otherwise you application will be stuck.</span>","<span class=\"c\">   *  But be careful this options add an overlay in the event propagation.</span>","<span class=\"c\">   *  For debug purpose or more secure coding you can force delay to true, for</span>","<span class=\"c\">   *  all bind using global variable FORCE_EVENT_PROPAGATION_DELAY.&lt;br/&gt;</span>","<span class=\"c\">   *  You just have set as true (FORCE_EVENT_PROPAGATION_DELAY = true)</span>","<span class=\"c\">   *  at beginning of your program.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#bind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object interested to catch the event [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        notify method will be called [optional]</span>","<span class=\"c\">   * @param {boolean} delay if true the callback 'func' will be call within </span>","<span class=\"c\">   *        an other \"simili thread\". </span>","<span class=\"c\">   */</span>","  bind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> delay<span class=\"k\">)</span>","  <span class=\"k\">{</span>","     <span class=\"k\">if</span> <span class=\"k\">(!</span>spec <span class=\"k\">||</span> <span class=\"k\">!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">/** @private */</span>","    <span class=\"k\">var</span> handler <span class=\"k\">=</span> <span class=\"k\">new</span> Handler <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> delay<span class=\"k\">),</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]</span> <span class=\"k\">=</span> list_bind<span class=\"k\">;</span> ","    <span class=\"k\">}</span>","    list_bind<span class=\"k\">.</span>push <span class=\"k\">(</span>handler<span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> handler<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event unbind method</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Should be call when you want stop event listening on this object</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#unbind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object you want unbind [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        all binding with &lt;spec, obj&gt; will be removed</span>","<span class=\"c\">   */</span>","  unbind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">],</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> bind<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      bind <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>spec <span class=\"k\">===</span> spec<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>obj <span class=\"k\">===</span> obj<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">||</span> util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">)</span>","          <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>func <span class=\"k\">===</span> func <span class=\"k\">||</span> bind<span class=\"k\">.</span>func_ptr <span class=\"k\">===</span> func<span class=\"k\">)</span>","            <span class=\"k\">{</span>","              list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","              util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span>","          <span class=\"k\">{</span>","            list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","            util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Propagate an event</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  All Object listening this EventSource will receive this new handled</span>","<span class=\"c\">   *  event.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#propagate</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {String} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {Object} data an optional data event [optional]</span>","<span class=\"c\">   * @param {vs.core.Object} srcTarget a event source, By default this object</span>","<span class=\"c\">   *        is the event source [mandatory]</span>","<span class=\"c\">   * @param {boolean} delay if true the callback 'func' will be call within </span>","<span class=\"c\">   *        an other \"simili thread\". </span>","<span class=\"c\">   */</span>","  propagate <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>type<span class=\"k\">,</span> data<span class=\"k\">,</span> srcTarget<span class=\"k\">,</span> delay<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>type<span class=\"k\">],</span> event<span class=\"k\">,</span> i<span class=\"k\">,</span> handler<span class=\"k\">,</span> func<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__parent<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>srcTarget<span class=\"k\">)</span> <span class=\"k\">{</span> srcTarget <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>__parent<span class=\"k\">.</span>propagate <span class=\"k\">(</span>type<span class=\"k\">,</span> data<span class=\"k\">,</span> srcTarget<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    event <span class=\"k\">=</span> <span class=\"k\">new</span> Event <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> type<span class=\"k\">,</span> data<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>srcTarget<span class=\"k\">)</span> <span class=\"k\">{</span> event<span class=\"k\">.</span>srcTarget <span class=\"k\">=</span> srcTarget<span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    i <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">try</span>","    <span class=\"k\">{</span>","      func <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func_ptr<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"c\">// call function</span>","          handler<span class=\"k\">.</span>func_ptr<span class=\"k\">.</span>call <span class=\"k\">(</span>handler<span class=\"k\">.</span>obj<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          handler<span class=\"k\">.</span>obj<span class=\"k\">[</span>handler<span class=\"k\">.</span>func<span class=\"k\">]</span> <span class=\"k\">(</span>event<span class=\"k\">);</span> <span class=\"c\">// specific notify method</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          handler<span class=\"k\">.</span>obj<span class=\"k\">.</span>notify <span class=\"k\">(</span>event<span class=\"k\">);</span> <span class=\"c\">// default notify method</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">/** @private */</span>","        handler <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>    ","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>delay <span class=\"k\">||</span> handler<span class=\"k\">.</span>delay<span class=\"k\">)</span> <span class=\"k\">{</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">(</span>func<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> func<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * if this object receive an event it repropagates it if nobody has </span>","<span class=\"c\">   * overcharged the notify method.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#notify</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   */</span>","  notify <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","  <span class=\"k\">{</span>","     <span class=\"k\">this</span><span class=\"k\">.</span>propagate <span class=\"k\">(</span>event<span class=\"k\">.</span>type<span class=\"k\">,</span> event<span class=\"k\">.</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event bind method to listen events form DOM</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  When you want you object listen an event generated by the DOM, you can</span>","<span class=\"c\">   *  bind your object (the observer) to the node using 'nodeBind' method.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#nodeBind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Node} node the node to observe [mandatory]</span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {string|Function} func the name of a callback or the callback</span>","<span class=\"c\">   *      itself. If its not defined notify method will be called [optional]</span>","<span class=\"c\">   */</span>","  nodeBind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> event<span class=\"k\">,</span> func_s<span class=\"k\">,</span> modifiers<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>node<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>event<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> func <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> handler <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> binds<span class=\"k\">,</span> key<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>func_s<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span> func_s <span class=\"k\">=</span> <span class=\"s\">'notify'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">[</span>func_s<span class=\"k\">]))</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn","          <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeBind, unknown function named: \"</span> <span class=\"k\">+</span> func_s<span class=\"k\">);</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeBind, invalid func parameter\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      func <span class=\"k\">=</span> func_s<span class=\"k\">;</span>","      func_s <span class=\"k\">=</span> func<span class=\"k\">.</span>name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span>modifiers <span class=\"k\">||</span> modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>ANY_MASK<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * @private</span>","<span class=\"c\">       */</span>","      handler <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// event.preventDefault ();</span>","        <span class=\"c\">// event.stopPropagation (); // Seems this line of code bug with BB OS </span>","        ","        <span class=\"k\">try</span>","        <span class=\"k\">{</span>","          event<span class=\"k\">.</span>src <span class=\"k\">=</span> event<span class=\"k\">.</span>currentTarget<span class=\"k\">;</span>","          event<span class=\"k\">.</span>data <span class=\"k\">=</span> event<span class=\"k\">;</span>","  ","          <span class=\"k\">if</span> <span class=\"k\">(!</span>func<span class=\"k\">)</span> <span class=\"k\">{</span> func <span class=\"k\">=</span> self <span class=\"k\">[</span>func_s<span class=\"k\">];</span> <span class=\"k\">}</span>","          func<span class=\"k\">.</span>call <span class=\"k\">(</span>self<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      handler <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// event.preventDefault ();</span>","        event<span class=\"k\">.</span>stopPropagation <span class=\"k\">();</span>","        ","        <span class=\"k\">try</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>modifiers <span class=\"k\">&amp;&amp;</span>","            <span class=\"k\">(</span>event<span class=\"k\">.</span>altKey <span class=\"k\">||</span> event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>shiftKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">))</span> ","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>ALT <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>altKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>CTRL <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>ctrlKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>SHIFT <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          event<span class=\"k\">.</span>src <span class=\"k\">=</span> event<span class=\"k\">.</span>currentTarget<span class=\"k\">;</span>","          event<span class=\"k\">.</span>data <span class=\"k\">=</span> event<span class=\"k\">;</span>","  ","          <span class=\"k\">if</span> <span class=\"k\">(!</span>func<span class=\"k\">)</span> <span class=\"k\">{</span> func <span class=\"k\">=</span> self <span class=\"k\">[</span>func_s<span class=\"k\">];</span> <span class=\"k\">}</span>","          func<span class=\"k\">.</span>call <span class=\"k\">(</span>self<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// save data for nodeUnbind</span>","    key <span class=\"k\">=</span> event <span class=\"k\">+</span> func_s<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">'nodeBind impossible'</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    binds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>binds<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      binds <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> binds<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    binds<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">{</span>n<span class=\"k\">:</span> node<span class=\"k\">,</span> h<span class=\"k\">:</span> handler<span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// set the listener</span>","    node<span class=\"k\">.</span>addEventListener <span class=\"k\">(</span>event<span class=\"k\">,</span> handler<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Unbind a DOM event listening</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#nodeUnbind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Node} node the node which is observed [mandatory]</span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        notify method will be called [optional]</span>","<span class=\"c\">   */</span>","  nodeUnbind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> event<span class=\"k\">,</span> func_s<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>node<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>event<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> func <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> i<span class=\"k\">,</span> key<span class=\"k\">,</span> binds<span class=\"k\">,</span> data<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>func_s<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span> func_s <span class=\"k\">=</span> <span class=\"s\">'notify'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">[</span>func_s<span class=\"k\">]))</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeUnbind, unknown function named: \"</span> <span class=\"k\">+</span> func_s<span class=\"k\">);</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeBind, invalid func parameter\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      func <span class=\"k\">=</span> func_s<span class=\"k\">;</span>","      func_s <span class=\"k\">=</span> func<span class=\"k\">.</span>name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    key <span class=\"k\">=</span> event <span class=\"k\">+</span> func_s<span class=\"k\">;</span>","    binds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>binds<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>warn","        <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeUnbind, no bind &lt;\"</span> <span class=\"k\">+</span> event <span class=\"k\">+</span> <span class=\"s\">','</span> <span class=\"k\">+</span> func_s <span class=\"k\">+</span> <span class=\"s\">\" exists.\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> binds<span class=\"k\">.</span>length<span class=\"k\">;)</span>","    <span class=\"k\">{</span>","      data <span class=\"k\">=</span> binds <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">.</span>n <span class=\"k\">===</span> node<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        node<span class=\"k\">.</span>removeEventListener <span class=\"k\">(</span>event<span class=\"k\">,</span> data<span class=\"k\">.</span>h<span class=\"k\">);</span>","        binds<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        i<span class=\"k\">++;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// TODO WARNING pas bon, si plusieurs objets l'observe !!!</span>","    node<span class=\"k\">.</span>_object_ <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">//   </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    *  Should be documented</span>","<span class=\"c\">//    *</span>","<span class=\"c\">//    * @name vs.core.EventSource#allDocumentBind</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    * </span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   allDocumentBind : function (event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     this._allDocumentBind (document, event, func);</span>","<span class=\"c\">//   },</span>","<span class=\"c\">//   </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    * @private</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   _allDocumentBind : function (doc, event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     if (!doc) { return; }</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     // current document event management</span>","<span class=\"c\">//     this.nodeBind (doc, event, func);</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     // children document event management</span>","<span class=\"c\">//     var frame, iframes, i;</span>","<span class=\"c\">//     if (doc.frames)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; doc.frames.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = doc.frames [i];</span>","<span class=\"c\">//         this._allDocumentBind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     iframes = doc.getElementsByTagName ('iframe');</span>","<span class=\"c\">//     if (iframes)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; iframes.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = iframes.item (i);</span>","<span class=\"c\">//         this._allDocumentBind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//   },</span>","<span class=\"c\">// </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    *  Should be documented</span>","<span class=\"c\">//    *</span>","<span class=\"c\">//    * @name vs.core.EventSource#allDocumentUnbind</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    *</span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   allDocumentUnbind : function (event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     this._allDocumentUnbind (document, event, func);</span>","<span class=\"c\">//   },</span>","<span class=\"c\">//   </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    * @private</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   _allDocumentUnbind : function (doc, event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     if (!doc) { return; }</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     // current document event management</span>","<span class=\"c\">//     this.nodeUnbind (doc, event, func);</span>","<span class=\"c\">// </span>","<span class=\"c\">//     // children document event management</span>","<span class=\"c\">//     var frame, iframes, i;</span>","<span class=\"c\">//     if (doc.frames)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; doc.frames.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = doc.frames [i];</span>","<span class=\"c\">//         this._allDocumentUnbind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     iframes = doc.getElementsByTagName ('iframe');</span>","<span class=\"c\">//     if (iframes)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; iframes.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = iframes.item (i);</span>","<span class=\"c\">//         this._allDocumentUnbind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//   }</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>EventSource<span class=\"k\">,</span> VSObject<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>EventSource <span class=\"k\">=</span> EventSource<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.KEYBOARD Object</span>","<span class=\"c\"> * &lt;p&gt;</span>","<span class=\"c\"> * &lt;p&gt;</span>","<span class=\"c\"> *  List of predefined event spec:&lt;br&gt;</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.KEY_UP</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ESC</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ENTER</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.SPACE</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.BACKSPACE</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.SHIFT</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.CTRL</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ALT</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.NUMLOCK</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.LEFT_ARROW </span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.UP_ARROW </span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.RIGHT_ARROW</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.DOWN_ARROW </span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.A</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.S</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.Z</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.META</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ANY_MASK</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.UNDO</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.REDO</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.SAVE</span>","<span class=\"c\"> * &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @type vs.core.EventSource</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.KEYBOARD</span>","<span class=\"c\"> *  @const</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> KEYBOARD <span class=\"k\">=</span> <span class=\"k\">new</span> EventSource <span class=\"k\">(</span><span class=\"s\">'__KEYBOARD__'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","KEYBOARD<span class=\"k\">.</span>_handler_set_down <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","KEYBOARD<span class=\"k\">.</span>_handler_set_up <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The event bind method to listen events</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  When you want listen an event generated by this object, you can</span>","<span class=\"c\"> *  bind your object (the observer) to this object using 'bind' method.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  Warning:&lt;br&gt;</span>","<span class=\"c\"> *  If you know the process of your callback can take time or can be blocking</span>","<span class=\"c\"> *  you should set delay to 'true' otherwise you application will be stuck.</span>","<span class=\"c\"> *  But be careful this options add an overlay in the event propagation.</span>","<span class=\"c\"> *  For debug purpose or more secure coding you can force delay to true, for</span>","<span class=\"c\"> *  all bind using global variable FORCE_EVENT_PROPAGATION_DELAY.&lt;br/&gt;</span>","<span class=\"c\"> *  You just have set as true (FORCE_EVENT_PROPAGATION_DELAY = true)</span>","<span class=\"c\"> *  at beginning of your program.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.KEYBOARD.bind</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\"> * @param {vs.core.Object} obj the object interested to catch the event [mandatory]</span>","<span class=\"c\"> * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\"> *        notify method will be called [optional]</span>","<span class=\"c\"> * @param {boolean} delay if true the callback 'func' will be call within </span>","<span class=\"c\"> *        an other \"simili thread\". </span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> KEYBOARD_bind <span class=\"k\">(</span>keyCode<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> prevent<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> handler <span class=\"k\">=</span> EventSource<span class=\"k\">.</span>prototype<span class=\"k\">.</span>bind<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> keyCode<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">),</span>","    self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>prevent<span class=\"k\">)</span> <span class=\"k\">{</span> handler<span class=\"k\">.</span>prevent <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>keyCode <span class=\"k\">&gt;</span> KEYBOARD<span class=\"k\">.</span>KEY_UP<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_up<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      document<span class=\"k\">.</span>documentElement<span class=\"k\">.</span>addEventListener","        <span class=\"k\">(</span><span class=\"s\">\"keyup\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        self<span class=\"k\">.</span>managePrevent <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","        self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode <span class=\"k\">+</span> KEYBOARD<span class=\"k\">.</span>KEY_UP<span class=\"k\">,</span> event<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_up <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_down<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      document<span class=\"k\">.</span>documentElement<span class=\"k\">.</span>addEventListener","        <span class=\"k\">(</span><span class=\"s\">\"keydown\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","            <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>Z<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>UNDO<span class=\"k\">);</span>","          event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                  event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>Z<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>REDO<span class=\"k\">);</span>","          event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>S<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>SAVE<span class=\"k\">);</span>","          event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>managePrevent <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">+</span> event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">+</span> event<span class=\"k\">.</span>keyCode<span class=\"k\">);</span>","          <span class=\"c\">//event.preventDefault ();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>managePrevent <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_down <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> */</span>","KEYBOARD<span class=\"k\">.</span>managePrevent <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>type<span class=\"k\">,</span> event<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>type<span class=\"k\">],</span> i<span class=\"k\">,</span> handler<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    handler <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>prevent<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>KEY_UP <span class=\"k\">=</span> <span class=\"s\">1000</span><span class=\"k\">;</span> ","KEYBOARD<span class=\"k\">.</span>ESC <span class=\"k\">=</span> <span class=\"s\">27</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>ENTER <span class=\"k\">=</span> <span class=\"s\">13</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>SPACE <span class=\"k\">=</span> <span class=\"s\">32</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>BACKSPACE <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>SHIFT <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>CTRL <span class=\"k\">=</span> <span class=\"s\">17</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>ALT <span class=\"k\">=</span> <span class=\"s\">18</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>NUMLOCK <span class=\"k\">=</span> <span class=\"s\">144</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>LEFT_ARROW <span class=\"k\">=</span> <span class=\"s\">37</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>UP_ARROW <span class=\"k\">=</span> <span class=\"s\">38</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>RIGHT_ARROW <span class=\"k\">=</span> <span class=\"s\">39</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>DOWN_ARROW <span class=\"k\">=</span> <span class=\"s\">40</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>L <span class=\"k\">=</span> <span class=\"s\">76</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>S <span class=\"k\">=</span> <span class=\"s\">83</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>Z <span class=\"k\">=</span> <span class=\"s\">90</span><span class=\"k\">;</span>","","","KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">=</span> <span class=\"s\">2000</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>ANY_MASK <span class=\"k\">=</span> <span class=\"s\">3000</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>UNDO <span class=\"k\">=</span> <span class=\"s\">256</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>REDO <span class=\"k\">=</span> <span class=\"s\">257</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>SAVE <span class=\"k\">=</span> <span class=\"s\">258</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","core<span class=\"k\">.</span>KEYBOARD <span class=\"k\">=</span> KEYBOARD<span class=\"k\">;</span>","core<span class=\"k\">.</span>KEYBOARD<span class=\"k\">.</span>bind <span class=\"k\">=</span> KEYBOARD_bind<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\"> OTHER DEALINGS IN THE SOFTWARE.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The Fsm class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.EventSource</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Fsm element defines a deterministic Finite-State-Machine</span>","<span class=\"c\"> *  (aka Finite-State Automaton). A fsn is an automaton such as:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li /&gt;there is only one initial state;</span>","<span class=\"c\"> *    &lt;li /&gt;there is no transitions conditioned on null input;</span>","<span class=\"c\"> *    &lt;li /&gt;there is only one transition for a given input and a given state.</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *    A fsm is specified as flollowing :</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li /&gt;the set Q, is the set of state;</span>","<span class=\"c\"> *    &lt;li /&gt;the set I, is the input alphabet, i.e. a set of word that ca be</span>","<span class=\"c\"> *      generate a transition between two states;</span>","<span class=\"c\"> *    &lt;li /&gt;the set O, is the ouput alphabet. It containts the set of word</span>","<span class=\"c\"> *      produced when a transition is crossed;</span>","<span class=\"c\"> *    &lt;li /&gt;the set E, is the list of transition &lt;QxIxQxO&gt;;</span>","<span class=\"c\"> *    &lt;li /&gt;an initial state.</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  When an automaton is rendered (after run), it begins in the initial state.</span>","<span class=\"c\"> *  It changes to new states depending on events that it receives and the</span>","<span class=\"c\"> *  transition function. Whenever the automaton is deactivated (for instance</span>","<span class=\"c\"> *  by being in a deactivated branch of a Rules), it does not react any more</span>","<span class=\"c\"> *  to events. It will resume to its last state and react again to events when</span>","<span class=\"c\"> *  reactivated.&lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  The general manner to control fsm and make it cross a transition is to</span>","<span class=\"c\"> *  associate event to a input lexem. For that use the methods setInput ().</span>","<span class=\"c\"> *  But an automaton can also be manually control by notifying to it a input</span>","<span class=\"c\"> *  lexem. For that, use the method Fsm.fsmNotify (String).&lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Automatons can have outputs associated to their transitions (aka Mealy</span>","<span class=\"c\"> *  machine) or states (aka Moore machine, not yet implemented). At that time </span>","<span class=\"c\"> *  the fsm emit event defined by an string (the output lexem) or call an</span>","<span class=\"c\"> *  action associated to the output lexem.</span>","<span class=\"c\"> *  The event can be received by setting a Binding on this fsm.</span>","<span class=\"c\"> *  Otherwise for specifying the action use the setOuput () method.&lt;br /&gt;</span>","<span class=\"c\"> *  &lt;br /&gt;</span>","<span class=\"c\"> *  Known limitations:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *   &lt;li /&gt;only one output lexem can be generated when crossing a transition.</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Simple example to create a automata:</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   var my_fsm = new vs.core.Fsm (object);</span>","<span class=\"c\"> *   // States declaration </span>","<span class=\"c\"> *   my_fsm.addState (\"1\");</span>","<span class=\"c\"> *   my_fsm.addState (\"2\");</span>","<span class=\"c\"> *   // Input lexems declaration</span>","<span class=\"c\"> *   my_fsm.addInput (\"a\");</span>","<span class=\"c\"> *   my_fsm.addInput (\"b\");</span>","<span class=\"c\"> *   // Ouptut lexems declaration</span>","<span class=\"c\"> *   my_fsm.addOutput (\"c\");</span>","<span class=\"c\"> *   my_fsm.addOutput (\"d\");</span>","<span class=\"c\"> *   // transitions declaration</span>","<span class=\"c\"> *   my_fsm.addTransition (\"1\", \"2\", \"a\", \"c\");</span>","<span class=\"c\"> *   my_fsm.addTransition (\"2\", \"3\", \"b\", \"d\");</span>","<span class=\"c\"> *   // initial state declaration</span>","<span class=\"c\"> *   my_fsm.setInitialState (\"1\");</span>","<span class=\"c\"> *   // activate the FSM</span>","<span class=\"c\"> *   my_fsm.activate ();</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *   // event associations</span>","<span class=\"c\"> *   // \"a\" will be generated after the button selection</span>","<span class=\"c\"> *   my_fsm.setInput (\"a\", aButton, 'select');</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Fsm.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Fsm</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {vs.core.Object} owner the Object using this Fsm [mandatory]</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> Fsm <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>owner<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>createId <span class=\"k\">());</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Fsm<span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>owner <span class=\"k\">=</span> owner<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>   <span class=\"c\">///&lt; List of fsm state : Q</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_list_input <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>   <span class=\"c\">///&lt; List of input lexem (alphabet) : I</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_list_output <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>  <span class=\"c\">///&lt; List of output lexem (alphabet) : O</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>  <span class=\"c\">///&lt; initial state name</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_current_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>  <span class=\"c\">///&lt; current state name</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","Fsm<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">);</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>owner <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","  ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_inputs<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_output_action<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">  *     Generic function</span>","<span class=\"c\">  ****************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {vs.core.Object} obj The cloned object</span>","<span class=\"c\">   * @param {Object} map Map of cloned objects</span>","<span class=\"c\">   */</span>","  _clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    EventSource<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_clone<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">,</span> cloned_map<span class=\"k\">);</span>","","    obj<span class=\"k\">.</span>owner <span class=\"k\">=</span> obj<span class=\"k\">.</span>__config__<span class=\"k\">.</span>owner<span class=\"k\">;</span>","    obj<span class=\"k\">.</span>_current_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","    ","    obj<span class=\"k\">.</span>_inputs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    obj<span class=\"k\">.</span>_output_action <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// XXX TODO WARNING il faut refaire in inputs en outputs.</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Full facility constructor that takes specification of the fsm as</span>","<span class=\"c\">   *  parameter.</span>","<span class=\"c\">   *  transitions is an array of object {from, to, on, output}</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#initWithData </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {Array} states is an array of state</span>","<span class=\"c\">   * @param {Array} inputs is an array of input</span>","<span class=\"c\">   * @param {Array} outputs is an array of output</span>","<span class=\"c\">   * @param {Array} transitions is an array of object {from, to, on, output}</span>","<span class=\"c\">   */</span>","  initWithData <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>states<span class=\"k\">,</span> inputs<span class=\"k\">,</span> outputs<span class=\"k\">,</span> transitions<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>states <span class=\"k\">||</span> <span class=\"k\">!</span>inputs <span class=\"k\">||</span> <span class=\"k\">!</span>outputs <span class=\"k\">||</span> <span class=\"k\">!</span>transitions<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> states<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addState <span class=\"k\">(</span>states <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> inputs<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addInput <span class=\"k\">(</span>inputs <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> outputs<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOutput <span class=\"k\">(</span>outputs <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> transitions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>from<span class=\"k\">,</span> transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>to<span class=\"k\">,</span>","        transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>on<span class=\"k\">,</span> transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Full facility constructor that takes state x state matrix of the fsm as</span>","<span class=\"c\">   *  parameter:</span>","<span class=\"c\">   * &lt;ul&gt;</span>","<span class=\"c\">   *   &lt;li /&gt;First columm : list of \"from\" sates \\n</span>","<span class=\"c\">   *   &lt;li /&gt;First row : list of \"to\" sates \\n</span>","<span class=\"c\">   *   &lt;li /&gt;other cell : tuple \"i/o\" of input and ouput event \\n</span>","<span class=\"c\">   * &lt;/ul&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  If no id is specified, will create a random one.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  // fsm is : 1 -a-&gt; 2 -b-&gt; 3 -c-&gt; 1 \\n</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  matrix = [</span>","<span class=\"c\">   *       [\"\", \"1\", \"2\", \"3\"],</span>","<span class=\"c\">   *       [\"1\", \"\", \"a/\", \"\"],</span>","<span class=\"c\">   *       [\"2\", \"\", \"\", \"b/\"],</span>","<span class=\"c\">   *       [\"3\", \"c/\", \"\", \"\"]</span>","<span class=\"c\">   *  ];</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  // Specification for input/output of a transition must have the following</span>","<span class=\"c\">   *  // form : \"i\" | \"i/\" | \"/o\" | \"i/o\"</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  fsm = new Fsm (object);</span>","<span class=\"c\">   *  fsm.initWithMatrix (matrix);</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#initWithMatrix </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {Array} matrix</span>","<span class=\"c\">   */</span>","  initWithMatrix <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>matrix<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">// add state</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addState <span class=\"k\">(</span>matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// add transition (add input / output)</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> matrix<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> from <span class=\"k\">=</span> matrix<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span>","","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> to <span class=\"k\">=</span> matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">][</span>j<span class=\"k\">];</span>","        <span class=\"k\">var</span> i_o <span class=\"k\">=</span>  matrix <span class=\"k\">[</span>i<span class=\"k\">][</span>j<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>i_o<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">var</span> io_a <span class=\"k\">=</span> i_o<span class=\"k\">.</span>split <span class=\"k\">(</span><span class=\"s\">'/'</span><span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">this</span><span class=\"k\">.</span>addInput <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOutput <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","          ","          <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">,</span> io_a<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> io_a<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*******************************************</span>","<span class=\"c\">              Managing inputs</span>","<span class=\"c\">  *******************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add an imput to the fsm</span>","<span class=\"c\">   *  This input will be add to the list of input alphabet.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addInput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} input the new word that will be add to the alphabet</span>","<span class=\"c\">   */</span>","  addInput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>input <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>input<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">.</span>push <span class=\"k\">(</span>input<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the input alphabet of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getInputs </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return {Array} the alphabet as a set of String</span>","<span class=\"c\">   */</span>","  getInputs <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">.</span>slice <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Test if a word in inlcude in imput alphabet</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#existInput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} input the input</span>","<span class=\"c\">   * @return true is exists</span>","<span class=\"c\">   */</span>","  existInput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>input<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">.</span>findItem <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/*******************************************</span>","<span class=\"c\">              Managing outputs</span>","<span class=\"c\">  *******************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add an ouput to the fsm</span>","<span class=\"c\">   *  This ouput will be add to the list of ouput alphabet.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addOutput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} output the new word that will be add to the alphabet</span>","<span class=\"c\">   */</span>","  addOutput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>output<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>output <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existOutput <span class=\"k\">(</span>output<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">.</span>push <span class=\"k\">(</span>output<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the ouput alphabet of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getOutputs </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return the alphanet as a set of String</span>","<span class=\"c\">   */</span>","  getOutputs <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">.</span>slice <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Test if a word in include in ouput alphabet</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#existOutput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} output the output</span>","<span class=\"c\">   * @return true is exists</span>","<span class=\"c\">   */</span>","  existOutput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>output<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>output<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">.</span>findItem <span class=\"k\">(</span>output<span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*******************************************</span>","<span class=\"c\">              Managing States</span>","<span class=\"c\">  *******************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add a State to the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} name the new state name</span>","<span class=\"c\">   */</span>","  addState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    state<span class=\"k\">.</span>transitionEvents <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> state<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Remove a State from the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#removeState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} name the new state name</span>","<span class=\"c\">   */</span>","  removeState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>name<span class=\"k\">]);</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Rename a State of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#renameState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} old_name the old state name</span>","<span class=\"c\">   * @param {string} new_name the new state name</span>","<span class=\"c\">   */</span>","  renameState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>old_name<span class=\"k\">,</span> new_name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>old_name <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>old_name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>new_name <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>new_name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// change state name</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>new_name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>old_name<span class=\"k\">];</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>old_name<span class=\"k\">]);</span>","    ","    <span class=\"c\">// rename initial state if need</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">===</span> old_name<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> new_name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// change all transition to state with the new name</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> state_id <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>state_id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> input <span class=\"k\">in</span> state<span class=\"k\">.</span>transitionEvents<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>input<span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">===</span> old_name<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          t<span class=\"k\">.</span>to <span class=\"k\">=</span> new_name<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Get list of fsm State</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getListState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return {Array} list of states</span>","<span class=\"c\">   */</span>","  getListState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      result<span class=\"k\">.</span>push <span class=\"k\">(</span>key<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Test existance of a state</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#existState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} state the state</span>","<span class=\"c\">   * @return true if state exists</span>","<span class=\"c\">   */</span>","  existState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>state<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>state<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add a new transition from the state \"from\" to the state \"to\".</span>","<span class=\"c\">   *  The state from have to be already specified, otherwise, it will</span>","<span class=\"c\">   *  generate a exception.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addTransition </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} from State from</span>","<span class=\"c\">   * @param {string} to State to</span>","<span class=\"c\">   * @param {string} on input lexem which cause the crossing of transition</span>","<span class=\"c\">   * @param {string} ouput optional ouput lexem that will be produce by the </span>","<span class=\"c\">   *    crossing</span>","<span class=\"c\">   */</span>","  addTransition <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">,</span> on<span class=\"k\">,</span> output<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>from <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>from<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>to <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>to<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>on<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> transition <span class=\"k\">=</span> <span class=\"k\">{</span>","      on<span class=\"k\">:</span> on<span class=\"k\">,</span>","      to<span class=\"k\">:</span> to<span class=\"k\">,</span>","      output<span class=\"k\">:</span> output","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">].</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">]</span> <span class=\"k\">=</span> transition<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Remove a transition from the state \"from\".</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#removeTransitionFrom </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} from State from</span>","<span class=\"c\">   * @param {string} on input lexem which cause the crossing of transition</span>","<span class=\"c\">   */</span>","  removeTransitionFrom <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> on<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>from <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>from<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>on<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">]</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">])</span>","    <span class=\"k\">{</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span>state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Remove a transition to the state \"to\".</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#removeTransitionTo </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} tp State tp</span>","<span class=\"c\">   * @param {string} on input lexem which cause the crossing of transition</span>","<span class=\"c\">   */</span>","  removeTransitionTo <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>to<span class=\"k\">,</span> on<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>to <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>to<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>on<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> from <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">];</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>t <span class=\"k\">||</span> t<span class=\"k\">.</span>to <span class=\"k\">!==</span> to<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">delete</span> <span class=\"k\">(</span>state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the list of transitions to the state set</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getTransionsToState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} to State to</span>","<span class=\"c\">   * @return {Array} list of transitions</span>","<span class=\"c\">   */</span>","  getTransionsToState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>to<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>to<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> state_id <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>state_id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> input <span class=\"k\">in</span> state<span class=\"k\">.</span>transitionEvents<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>input<span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">!==</span> to<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> tt <span class=\"k\">=</span> util<span class=\"k\">.</span>clone <span class=\"k\">(</span>t<span class=\"k\">);</span>","        tt<span class=\"k\">.</span>from <span class=\"k\">=</span> state_id<span class=\"k\">;</span>","        result<span class=\"k\">.</span>push <span class=\"k\">(</span>tt<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the list of transitions from the state set</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getTransionsFromState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} from State from</span>","<span class=\"c\">   * @return {Array} list of transitions</span>","<span class=\"c\">   */</span>","  getTransionsFromState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>from<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> inputs <span class=\"k\">in</span> state<span class=\"k\">.</span>transitionEvents<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>inputs<span class=\"k\">];</span>","      ","      <span class=\"k\">var</span> tt <span class=\"k\">=</span> util<span class=\"k\">.</span>clone <span class=\"k\">(</span>t<span class=\"k\">);</span>","      tt<span class=\"k\">.</span>from <span class=\"k\">=</span> from<span class=\"k\">;</span>","      result<span class=\"k\">.</span>push <span class=\"k\">(</span>tt<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Switch two states of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  if states have transitions from or to them,</span>","<span class=\"c\">   *  the function reconfigures the transitions.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#switchStates </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} state_id1 State </span>","<span class=\"c\">   * @param {string} state_id2 State </span>","<span class=\"c\">   */</span>","  switchStates <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state_id1<span class=\"k\">,</span> state_id2<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>state_id1 <span class=\"k\">===</span> state_id2<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","   ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id1<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id2<span class=\"k\">))</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","    <span class=\"c\">// 1) get all transitions coming from arriving to state 1 and 2</span>","    <span class=\"c\">// 1.1) get all transitions</span>","    <span class=\"k\">var</span> t_to_state1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsToState <span class=\"k\">(</span>state_id1<span class=\"k\">);</span>","    <span class=\"k\">var</span> t_from_state1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsFromState <span class=\"k\">(</span>state_id1<span class=\"k\">);</span>","    <span class=\"k\">var</span> t_to_state2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsToState <span class=\"k\">(</span>state_id2<span class=\"k\">);</span>","    <span class=\"k\">var</span> t_from_state2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsFromState <span class=\"k\">(</span>state_id2<span class=\"k\">);</span>","    ","    <span class=\"c\">// 1.2) remove doublons in case state_id1 is connected to state_id2</span>","    <span class=\"c\">//   and vise versa.</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state1<span class=\"k\">.</span>length<span class=\"k\">;)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id2<span class=\"k\">)</span> <span class=\"k\">{</span> t_to_state1<span class=\"k\">.</span>remove <span class=\"k\">(</span>t<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state1<span class=\"k\">.</span>length<span class=\"k\">;)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">===</span> state_id2<span class=\"k\">)</span> <span class=\"k\">{</span> t_from_state1<span class=\"k\">.</span>remove <span class=\"k\">(</span>t<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// 2) remove all these transitions in order to reconfigure the fsm</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// 3) reconfigure the fsm</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      ","      <span class=\"k\">var</span> from <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id2<span class=\"k\">)?</span>state_id1<span class=\"k\">:</span>t<span class=\"k\">.</span>from<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>from<span class=\"k\">,</span> state_id2<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">var</span> to <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id2<span class=\"k\">)?</span>state_id1<span class=\"k\">:</span>t<span class=\"k\">.</span>to<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>state_id2<span class=\"k\">,</span> to<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">var</span> from <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id1<span class=\"k\">)?</span>state_id2<span class=\"k\">:</span>t<span class=\"k\">.</span>from<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>from<span class=\"k\">,</span> state_id1<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">var</span> to <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">===</span> state_id1<span class=\"k\">)?</span>state_id2<span class=\"k\">:</span>t<span class=\"k\">.</span>to<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>state_id1<span class=\"k\">,</span> to<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">===</span> state_id1<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> state_id2<span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">===</span> state_id2<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> state_id1<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","<span class=\"c\">/*******************************************</span>","<span class=\"c\">            Managing Call</span>","<span class=\"c\">*******************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *   Build a event binding to an input lexem.</span>","<span class=\"c\">   *  To control the fsm and make it passes trought a transition, the</span>","<span class=\"c\">   *  programmer is able to directly fsmNotify a entry lexem to the fsm (see the</span>","<span class=\"c\">   *  general fsm documentation), or associate event source and spec to an</span>","<span class=\"c\">   *  input lexem, like event binding. &lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  This method takes as parameter a pointer on the event source and the</span>","<span class=\"c\">   *  specification of the event.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#setInput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} on input lexem on which is associated the event</span>","<span class=\"c\">   * @param {vs.core.EventSource} src the object source of the event</span>","<span class=\"c\">   * @param {string} spec the name of the event</span>","<span class=\"c\">   */</span>","  setInput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>on<span class=\"k\">,</span> src<span class=\"k\">,</span> event_spec<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span>src <span class=\"k\">||</span> <span class=\"k\">!</span>event_spec<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      src<span class=\"k\">.</span>bind <span class=\"k\">(</span>event_spec<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>addEventListener<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>nodeBind <span class=\"k\">(</span>src<span class=\"k\">,</span> event_spec<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>src<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>a<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      a <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>src<span class=\"k\">]</span> <span class=\"k\">=</span> a<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    a<span class=\"k\">.</span>push <span class=\"k\">([</span>event_spec<span class=\"k\">,</span> on<span class=\"k\">,</span> src<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","","  <span class=\"c\">/**</span>","<span class=\"c\">   *   Associate an action to the generation of an output lexem.</span>","<span class=\"c\">   *  To make able the fsm to control the application, the programmer can</span>","<span class=\"c\">   *  associate an action to the generation of an ouput lexem when the fsm</span>","<span class=\"c\">   *  cross a transition.&lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  This method takes as parameter a pointer on an action object and a</span>","<span class=\"c\">   *  optional user data.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#setOutput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string}output output lexem on which is associated the action</span>","<span class=\"c\">   * @param {function|string} action the function's name a function of the</span>","<span class=\"c\">   *        fsm owner</span>","<span class=\"c\">   */</span>","  setOutput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>output<span class=\"k\">,</span> action<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>output <span class=\"k\">||</span> <span class=\"k\">!</span>action<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">]</span> <span class=\"k\">=</span> action<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","<span class=\"c\">/*******************************************</span>","<span class=\"c\">          Event managing methodes</span>","<span class=\"c\">*******************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Activate the FSM which start by the initial state.</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Return false if no initial state is specified.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#activate </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return {boolean} is activated</span>","<span class=\"c\">   */</span>","  activate <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state<span class=\"k\">])</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>goTo <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Private method use by the fsm to cross a transition.</span>","<span class=\"c\">   *  @note for the moment only one ouput lexem can be generation when</span>","<span class=\"c\">   *  crossing a transition</span>","<span class=\"c\">   *  @private</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#goTo </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} id_sate the id of target state.</span>","<span class=\"c\">   * @param {String} output</span>","<span class=\"c\">   * @param {Object} event the event</span>","<span class=\"c\">   * @return {Boolean} is the transition was reached</span>","<span class=\"c\">   */</span>","  goTo <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state_id<span class=\"k\">,</span> output<span class=\"k\">,</span> event<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">// manage output</span>","    <span class=\"c\">// TODO WARNING</span>","    <span class=\"k\">var</span> state <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id<span class=\"k\">))</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// hide old states view</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">];</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">///</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_current_state <span class=\"k\">=</span> state_id<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>output <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">])</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> clb <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>clb <span class=\"k\">instanceof</span> Function<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        clb<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>owner<span class=\"k\">,</span> event<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>clb<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>owner <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">]]</span> <span class=\"k\">(</span>event<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Clear the fsm.</span>","<span class=\"c\">   *  All state, event and binding are deleted</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#clear</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  clear <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">);</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_input <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_output <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// remove input event bindings</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>key<span class=\"k\">];</span>","      ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> src <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">2</span><span class=\"k\">];</span>","        <span class=\"k\">var</span> event_spec <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>bind<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          src<span class=\"k\">.</span>unbind <span class=\"k\">(</span>event_spec<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>addEventListener<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>nodeUnbind <span class=\"k\">(</span>src<span class=\"k\">,</span> event_spec<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_current_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  @private</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#notify </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {Object} event the event</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  notify <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>event<span class=\"k\">.</span>src<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>a<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> spec <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">],</span> on <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>event<span class=\"k\">.</span>type <span class=\"k\">!==</span> spec<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>fsmNotify <span class=\"k\">(</span>on<span class=\"k\">,</span> event<span class=\"k\">.</span>data<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  @public</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#fsmNotify </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} on input</span>","<span class=\"c\">   * @return {Object} data associate to the event </span>","<span class=\"c\">   */</span>","  fsmNotify <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>on<span class=\"k\">,</span> data<span class=\"k\">,</span> instant<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> transition <span class=\"k\">=</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">].</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">];</span>","      ","    <span class=\"k\">if</span> <span class=\"k\">(!</span>transition<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>goTo <span class=\"k\">(</span>transition<span class=\"k\">.</span>to<span class=\"k\">,</span> transition<span class=\"k\">.</span>output<span class=\"k\">,</span> <span class=\"k\">{</span>on<span class=\"k\">:</span> on<span class=\"k\">,</span> data<span class=\"k\">:</span> data<span class=\"k\">}</span><span class=\"k\">,</span> instant<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Fsm<span class=\"k\">,</span> EventSource<span class=\"k\">);</span>","","<span class=\"c\">/*****************************************************************</span>","<span class=\"c\"> *     Properties declaration</span>","<span class=\"c\"> ****************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>Fsm<span class=\"k\">,</span> <span class=\"s\">\"initialState\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *   Define the initiale state</span>","<span class=\"c\">   *   Generate a exception if the state was not already defined</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *   @name vs.core.Fsm#initialState </span>","<span class=\"c\">   *   @param {string} state_id the state</span>","<span class=\"c\">   */</span>","  set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state_id<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>state_id<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"c\">// set initial state and go to it   </span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> state_id<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   */</span>","  get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","core<span class=\"k\">.</span>Fsm <span class=\"k\">=</span> Fsm<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"k\">function</span> DataFlow <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">=</span> <span class=\"k\">[];</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_edges <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","DataFlow<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  propagate_values <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>id<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> ids <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_edges <span class=\"k\">[</span>id<span class=\"k\">],</span> k<span class=\"k\">,</span> j<span class=\"k\">,</span> obj<span class=\"k\">,</span> prop_in<span class=\"k\">,</span> prop_out<span class=\"k\">,</span>","      obj_next<span class=\"k\">,</span> connector<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>ids<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    obj <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span>id<span class=\"k\">];</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>k <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> k <span class=\"k\">&lt;</span> ids<span class=\"k\">.</span>length<span class=\"k\">;</span> k<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      obj_next <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span>ids <span class=\"k\">[</span>k<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj_next<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      connector <span class=\"k\">=</span> ids <span class=\"k\">[</span>k<span class=\"k\">][</span><span class=\"s\">2</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>connector<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// properties value propagation</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> connector<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span>","        <span class=\"k\">{</span>","          prop_in <span class=\"k\">=</span> connector <span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span>","          prop_out <span class=\"k\">=</span> connector <span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","          ","          <span class=\"k\">var</span> desc_in <span class=\"k\">=</span> obj<span class=\"k\">.</span>getPropertyDescriptor <span class=\"k\">(</span>prop_in<span class=\"k\">);</span>","          <span class=\"k\">var</span> desc_out <span class=\"k\">=</span> obj_next<span class=\"k\">.</span>getPropertyDescriptor <span class=\"k\">(</span>prop_out<span class=\"k\">);</span>","","          <span class=\"k\">if</span> <span class=\"k\">(!</span>desc_in <span class=\"k\">||</span> <span class=\"k\">!</span>desc_in<span class=\"k\">.</span>get<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            prop_in <span class=\"k\">=</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> util<span class=\"k\">.</span>underscore <span class=\"k\">(</span>prop_in<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>prop_in<span class=\"k\">))</span>","            <span class=\"k\">{</span>","              <span class=\"k\">continue</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>desc_out <span class=\"k\">||</span> <span class=\"k\">!</span>desc_out<span class=\"k\">.</span>set<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            prop_out <span class=\"k\">=</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> util<span class=\"k\">.</span>underscore <span class=\"k\">(</span>prop_out<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>obj_next<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>prop_out<span class=\"k\">))</span>","            <span class=\"k\">{</span>","              <span class=\"k\">continue</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","","          obj_next <span class=\"k\">[</span>prop_out<span class=\"k\">]</span> <span class=\"k\">=</span> obj <span class=\"k\">[</span>prop_in<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        ","        obj_next<span class=\"k\">.</span>__should__call__has__changed__ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  propagate <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>_id<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> obj<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_id<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"c\">// find the first node corresponding to the id</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">!==</span> _id<span class=\"k\">)</span>","      <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    ","      <span class=\"c\">// the node wad found. First data propagation</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>propagate_values <span class=\"k\">(</span>_id<span class=\"k\">);</span>","        i<span class=\"k\">++;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// continue the propagation</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      obj <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">[</span>i<span class=\"k\">]];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>__should__call__has__changed__ <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>propertiesDidChange<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        obj<span class=\"k\">.</span>propertiesDidChange <span class=\"k\">();</span>","        obj<span class=\"k\">.</span>__should__call__has__changed__ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>propagate_values <span class=\"k\">(</span>obj<span class=\"k\">.</span>id<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  build <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_ref_node <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> temp <span class=\"k\">=</span> <span class=\"k\">[],</span> i<span class=\"k\">,</span> ref<span class=\"k\">,</span> edges<span class=\"k\">,</span> edges_temp<span class=\"k\">,</span> edge<span class=\"k\">,</span> edge_temp<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_node<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      ref <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_node <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">])</span>","      <span class=\"k\">{</span>","<span class=\"c\">//        console.warn ('_df_build, this._node_link [ref] null');</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      temp<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">=</span> temp<span class=\"k\">;</span>","    ","    temp <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>ref <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">])</span>","      <span class=\"k\">{</span>","<span class=\"c\">//        console.warn ('_df_build, this._node_link [ref] null');</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","  ","      edges <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges <span class=\"k\">[</span>ref<span class=\"k\">];</span>","      edges_temp <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> edges<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        edge <span class=\"k\">=</span> edges <span class=\"k\">[</span>i<span class=\"k\">];</span>","        edge_temp <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>edge <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]])</span>","        <span class=\"k\">{</span>","<span class=\"c\">//          console.warn ('_df_build, this._node_link [edge [0]] null');</span>","          <span class=\"k\">continue</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        edge_temp <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>edge <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]];</span>","        edge_temp <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> edge <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","        edge_temp <span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">=</span> edge <span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">].</span>slice <span class=\"k\">();</span>","        ","        edges_temp<span class=\"k\">.</span>push <span class=\"k\">(</span>edge_temp<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      ","      temp <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">]]</span> <span class=\"k\">=</span> edges_temp<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_edges <span class=\"k\">=</span> temp<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  register_ref_node <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_ref_node <span class=\"k\">=</span> data<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  register_ref_edges <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges <span class=\"k\">=</span> data<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  pausePropagation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">++;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  restartPropagation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> _df_node_to_def <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_node_register <span class=\"k\">(</span>df_id<span class=\"k\">,</span> ref<span class=\"k\">,</span> id<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df_id <span class=\"k\">||</span> <span class=\"k\">!</span>ref <span class=\"k\">||</span> <span class=\"k\">!</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>df_id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">]</span> <span class=\"k\">=</span> id<span class=\"k\">;</span>","  _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> df<span class=\"k\">;</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_node_register <span class=\"k\">=</span> _df_node_register<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_create <span class=\"k\">(</span>id<span class=\"k\">,</span> ref<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> df <span class=\"k\">=</span> <span class=\"k\">new</span> DataFlow <span class=\"k\">();</span>","  ","  df<span class=\"k\">.</span>ref <span class=\"k\">=</span> ref<span class=\"k\">;</span>","  _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> df<span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> df<span class=\"k\">;</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_create <span class=\"k\">=</span> _df_create<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_register_ref_node <span class=\"k\">(</span>id<span class=\"k\">,</span> data<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>id <span class=\"k\">||</span> <span class=\"k\">!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>register_ref_node <span class=\"k\">(</span>data<span class=\"k\">);</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_register_ref_node <span class=\"k\">=</span> _df_register_ref_node<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_register_ref_edges <span class=\"k\">(</span>id<span class=\"k\">,</span> data<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>id <span class=\"k\">||</span> <span class=\"k\">!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>register_ref_edges <span class=\"k\">(</span>data<span class=\"k\">);</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_register_ref_edges <span class=\"k\">=</span> _df_register_ref_edges<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_build <span class=\"k\">(</span>id<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>build <span class=\"k\">();</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_build <span class=\"k\">=</span> _df_build<span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","core<span class=\"k\">.</span>DataFlow <span class=\"k\">=</span> DataFlow<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","","<span class=\"c\">// function Scheduler ()</span>","<span class=\"c\">// {</span>","<span class=\"c\">//   this.parent = core.EventSource;</span>","<span class=\"c\">//   this.parent (createId ());</span>","<span class=\"c\">//   this.constructor = vs.core.Scheduler;</span>","<span class=\"c\">// };</span>","<span class=\"c\">// </span>","<span class=\"c\">// Scheduler.prototype = {</span>","<span class=\"c\">// </span>","<span class=\"c\">// };</span>","<span class=\"c\">//util.extendClass (Scheduler, EventSource);</span>","<span class=\"c\">// </span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.Task class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Delegates:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidStop : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidPause : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidEnd : function (vs.core.Task)</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Task .</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Task</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> Task <span class=\"k\">(</span>conf<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>conf<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Task<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The task is started</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @name vs.core.Task.STARTED</span>","<span class=\"c\"> */</span>","Task<span class=\"k\">.</span>STARTED <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The task is stopped</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @name vs.core.Task.STOPPED</span>","<span class=\"c\"> */</span>","Task<span class=\"k\">.</span>STOPPED <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The task is paused</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @name vs.core.Task.PAUSED</span>","<span class=\"c\"> */</span>","Task<span class=\"k\">.</span>PAUSED <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","Task<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * TaskDelegate.</span>","<span class=\"c\">   * Methods are called when state changes (stop | pause)</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  var delegate = {};</span>","<span class=\"c\">   *  delegate.taskDidEnd = function () { ... }</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  // Declare a PAR task including a SEC Task</span>","<span class=\"c\">   *  var task = new Task (...)</span>","<span class=\"c\">   *  task.delegate = delegate;</span>","<span class=\"c\">   *  task.start ();</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#delegate</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *\t@property</span>","<span class=\"c\">   */</span>","  delegate <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  States</span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">   */</span>","  _state <span class=\"k\">:</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">,</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#start</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the TaskDelegate.taskDidStop</span>","<span class=\"c\">   *  if it declared.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#stop</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls the TaskDelegate.taskDidPause</span>","<span class=\"c\">   *  if it declared.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#pause</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Task<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>Task<span class=\"k\">,</span> <span class=\"s\">\"state\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   *  Return the task State. &lt;br /&gt;</span>","<span class=\"c\">   *  Possible values: {@link vs.core.Task.STARTED},</span>","<span class=\"c\">   *  {@link vs.core.Task.STOPPED},</span>","<span class=\"c\">   *  {@link vs.core.Task.PAUSED}</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#state</span>","<span class=\"c\">   *  @type {number}</span>","<span class=\"c\">   */</span> ","  get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_state<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.Task_PAR class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Implements {@link vs.core.Task}.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  The Task_PAR class provides a parallel group of tasks.&lt;br /&gt;</span>","<span class=\"c\"> *  Task_PAR is a vs.core.Task that starts all its tasks when it is started itself.</span>","<span class=\"c\"> *  &lt;br /&gt;</span>","<span class=\"c\"> *  The Task_SEQ ended when longest lasting task has ended.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> * The delegate has to implement:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidStop : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidPause : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidEnd : function (vs.core.Task)</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Methods borrowed from class {@link vs.core.Task}:&lt;br /&gt;</span>","<span class=\"c\"> *  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{@link vs.core.Task#pause}, {@link vs.core.Task#start},</span>","<span class=\"c\"> *  {@link vs.core.Task#stop}</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  // Declare two tasks (animations)</span>","<span class=\"c\"> *  var rotate = new vs.fx.RotateXYZAnimation (30, 50, 100);</span>","<span class=\"c\"> *  rotate.durations = '3s';</span>","<span class=\"c\"> *  var scale = new vs.fx.ScaleAnimation (2,0.5);</span>","<span class=\"c\"> *  scale.durations = '2s';</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare the Task_PAR</span>","<span class=\"c\"> *  var par = Task_PAR ([rotate, comp1], [scale, comp2]);</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Start the task =&gt; start animations</span>","<span class=\"c\"> *  par.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare a PAR task including a SEC Task</span>","<span class=\"c\"> *  var seq = new Task_SEQ </span>","<span class=\"c\"> *    ([scale, comp0], new Task_PAR ([rotate, comp1], [rotate, comp2]));</span>","<span class=\"c\"> *  seq.delegate = this;</span>","<span class=\"c\"> *  seq.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @borrows vs.core.Task#start as Task_PAR#start</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Task.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Task_PAR</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param list List of task to start parallel with an optional</span>","<span class=\"c\"> *  parameter</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> Task_PAR <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">();</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Task_PAR<span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>setTasks <span class=\"k\">(</span>arguments<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Task_PAR<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _tasksAndParams <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * taks ended</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _tasksWillEnded <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set tasks.</span>","<span class=\"c\">   *  The task has to be stopped</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task_PAR#setTasks</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param list List of task to start parallel with an optional</span>","<span class=\"c\">   *  parameter</span>","<span class=\"c\">   */</span>","  setTasks <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">!==</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> i<span class=\"k\">,</span> taskAndparam<span class=\"k\">,</span> task<span class=\"k\">,</span> param<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> task <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  ","      <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>taskAndparam<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","          param <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        task <span class=\"k\">=</span> taskAndparam<span class=\"k\">;</span>","        param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Undefined task'</span><span class=\"k\">);</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">.</span>start <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>stop <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>pause<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Invalid task: '</span> <span class=\"k\">+</span> task<span class=\"k\">.</span>toString <span class=\"k\">());</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>push <span class=\"k\">([</span>task<span class=\"k\">,</span> param<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task_PAR#start</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>param<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam<span class=\"k\">,</span> i<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>delegate <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>start <span class=\"k\">((</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])?</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]:</span>param<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the taskDidStop if it exits.</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam<span class=\"k\">,</span> i<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>stop <span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls the taskDidPause if it exits.</span>","<span class=\"c\">   *  @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam<span class=\"k\">,</span> i<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>pause <span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">               delegate methodes   </span>","<span class=\"c\">********************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidStop <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidPause <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidEnd <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Task_PAR<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The Task_SEQ class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Implements {@link vs.core.Task}.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  The Task_SEQ class provides a sequential group of tasks.&lt;br /&gt;</span>","<span class=\"c\"> *  Task_SEQ is a vs.core.Task that runs its tasks in sequence, i.e., it starts</span>","<span class=\"c\"> *  one task after another has ended. &lt;br /&gt;</span>","<span class=\"c\"> *  The tasks are started in the order they are defined within the constructor.</span>","<span class=\"c\"> *  &lt;br /&gt;</span>","<span class=\"c\"> *  The Task_SEQ finishes when its last tasks has ended.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * The delegate has to implement:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidStop : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidPause : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidEnd : function (vs.core.Task)</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Methods borrowed from class {@link vs.core.Task}:&lt;br /&gt;</span>","<span class=\"c\"> *  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{@link vs.core.Task#pause}, {@link vs.core.Task#start},</span>","<span class=\"c\"> *  {@link vs.core.Task#stop}</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  // Declare two tasks (animations)</span>","<span class=\"c\"> *  var rotate = new vs.fx.RotateXYZAnimation (30, 50, 100);</span>","<span class=\"c\"> *  rotate.durations = '3s';</span>","<span class=\"c\"> *  var scale = new vs.fx.ScaleAnimation (2,0.5);</span>","<span class=\"c\"> *  scale.durations = '2s';</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare the Task_SEQ</span>","<span class=\"c\"> *  var seq = Task_SEQ ([rotate, comp1], [scale, comp2]);</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Start the task =&gt; start animations sequentially</span>","<span class=\"c\"> *  seq.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare a PAR task including a SEC Task</span>","<span class=\"c\"> *  var seq = new Task_SEQ </span>","<span class=\"c\"> *    ([scale, comp0], new Task_PAR ([rotate, comp1], [rotate, comp2]));</span>","<span class=\"c\"> *  seq.delegate = this;</span>","<span class=\"c\"> *  seq.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Task_SEQ.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Task_SEQ</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param list List of task to start sequentially with an optional </span>","<span class=\"c\"> *  parameter</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> Task_SEQ <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">();</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Task_SEQ<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>setTasks <span class=\"k\">(</span>arguments<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Task_SEQ<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _tasksAndParams <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _nextTaskToStart <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _startParam <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set tasks.</span>","<span class=\"c\">   *  The task has to be stopped</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task_SEQ#setTasks</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param list List of task to start parallel with an optional</span>","<span class=\"c\">   *  parameter</span>","<span class=\"c\">   */</span>","  setTasks <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">!==</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> i<span class=\"k\">,</span> taskAndparam<span class=\"k\">,</span> task<span class=\"k\">,</span> param<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> task <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  ","      <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>taskAndparam<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","          param <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        task <span class=\"k\">=</span> taskAndparam<span class=\"k\">;</span>","        param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Undefined task'</span><span class=\"k\">);</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">.</span>start <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>stop <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>pause<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Invalid task: '</span> <span class=\"k\">+</span> task<span class=\"k\">.</span>toString <span class=\"k\">());</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>push <span class=\"k\">([</span>task<span class=\"k\">,</span> param<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>param<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_startParam <span class=\"k\">=</span> param<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart<span class=\"k\">++;</span>","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>delegate <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>start <span class=\"k\">((</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])?</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]:</span>param<span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the taskDidStop if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>stop <span class=\"k\">();</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls</span>","<span class=\"c\">   *  the TaskDelegate.taskDidPause if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>pause <span class=\"k\">();</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">               delegate methodes   </span>","<span class=\"c\">********************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidStop <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidPause <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidEnd <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"c\">// start the next task</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>start <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_startParam<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Task_SEQ<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.TaskWait class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Implements {@link vs.core.Task}.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  The vs.core.TaskWait class provides ...</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.TaskWait.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.TaskWait</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param time The time to wait, using millisecond </span>","<span class=\"c\"> *  parameter</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> TaskWait <span class=\"k\">(</span>time<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">();</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> TaskWait<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>time <span class=\"k\">=</span> time<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","TaskWait<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _time <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","  _left_time <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">   */</span>","  _timer <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">   */</span>","  _start_time <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","    ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> time <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_time<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span>","    <span class=\"k\">{</span> time <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_left_time<span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">=</span> time<span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_start_time <span class=\"k\">=</span> <span class=\"k\">new</span> Date <span class=\"k\">().</span>getTime <span class=\"k\">();</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_timer <span class=\"k\">=</span> setTimeout <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> ","    <span class=\"k\">{</span> ","      self<span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>self<span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> self<span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> self<span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span>self<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> time<span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the taskDidStop if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","    ","    clearTimeout <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_timer<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_timer <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_time<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls</span>","<span class=\"c\">   *  the TaskDelegate.taskDidPause if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","  ","    <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">=</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">-</span> <span class=\"k\">new</span> Date <span class=\"k\">().</span>getTime <span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>_start_time<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>TaskWait<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>TaskWait<span class=\"k\">,</span> <span class=\"s\">\"state\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   * Set the task time, using millisecond. &lt;br /&gt;</span>","<span class=\"c\">   * @name vs.core.TaskWait#time</span>","<span class=\"c\">   * @type {number}</span>","<span class=\"c\">   */</span> ","  set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isNumber <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_time <span class=\"k\">=</span> v<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","util<span class=\"k\">.</span>extend <span class=\"k\">(</span>core<span class=\"k\">,</span> <span class=\"k\">{</span>","  Task<span class=\"k\">:</span>        Task<span class=\"k\">,</span>","  Task_PAR<span class=\"k\">:</span>    Task_PAR<span class=\"k\">,</span>","  Task_SEQ<span class=\"k\">:</span>    Task_SEQ<span class=\"k\">,</span>","  TaskWait<span class=\"k\">:</span>    TaskWait","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/*</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * This represents the mobile device, and provides properties for inspecting</span>","<span class=\"c\"> * the model, version, UUID of the</span>","<span class=\"c\"> * phone, etc.</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>"," ","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  An vs.core.DeviceConfiguration object, ...</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @name vs.core.DeviceConfiguration</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> DeviceConfiguration <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>orientation <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>deviceId <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>targets <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_UNKNOWN<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>browser <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>BROWSER_UNKNOWN<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_UNKNOWN<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>browserDetect <span class=\"k\">();</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_UNKNOWN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_WINDOWS </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_WINDOWS <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_MACOS </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_MACOS <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_LINUX </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_LINUX <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_IOS </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_IOS <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_WP7 </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_WP7 <span class=\"k\">=</span> <span class=\"s\">6</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_BLACK_BERRY </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_BLACK_BERRY <span class=\"k\">=</span> <span class=\"s\">7</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_SYMBIAN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_SYMBIAN <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_ANDROID </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_ANDROID <span class=\"k\">=</span> <span class=\"s\">9</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_MEEGO </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_MEEGO <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","","","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_UNKNOWN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_QVGA </span>","<span class=\"c\"> * QVGA (320&#195;&#151;240) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_QVGA <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_WQVGA </span>","<span class=\"c\"> * QVGA (400&#195;&#151;240) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_WQVGA <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_HVGA </span>","<span class=\"c\"> * HVGA (480&#195;&#151;320) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_HVGA <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_VGA </span>","<span class=\"c\"> * VGA (640&#195;&#151;480) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_VGA <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_WVGA </span>","<span class=\"c\"> * WVGA (800&#195;&#151;480) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_WVGA <span class=\"k\">=</span> <span class=\"s\">6</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_FWVGA </span>","<span class=\"c\"> * FWVGA (854&#195;&#151;480) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_FWVGA <span class=\"k\">=</span> <span class=\"s\">7</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_SVGA </span>","<span class=\"c\"> * SVGA (800&#195;&#151;600)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_SVGA <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_XGA </span>","<span class=\"c\"> * XGA (1024&#195;&#151;768)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_XGA <span class=\"k\">=</span> <span class=\"s\">9</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_N_HD </span>","<span class=\"c\"> * nHD (640&#195;&#151;360)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_N_HD <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_Q_HD </span>","<span class=\"c\"> * qHD (960&#195;&#151;540)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_Q_HD <span class=\"k\">=</span> <span class=\"s\">11</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_WXGA </span>","<span class=\"c\"> * WXGA (1280&#195;&#151;720/768/800)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_WXGA <span class=\"k\">=</span> <span class=\"s\">12</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.BROWSER_UNKNOWN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>BROWSER_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.BROWSER_CHROME</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>BROWSER_CHROME <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.BROWSER_SAFARI </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>BROWSER_SAFARI <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.BROWSER_OPERA </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>BROWSER_OPERA <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.BROWSER_FIREFOX </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>BROWSER_FIREFOX <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.BROWSER_MSIE </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>BROWSER_MSIE <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","","","DeviceConfiguration<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  browserDetect <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">function</span> searchString <span class=\"k\">(</span>data<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> i <span class=\"k\">=</span> data<span class=\"k\">.</span>length<span class=\"k\">;</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> dataString <span class=\"k\">=</span> data <span class=\"k\">[</span>i<span class=\"k\">].</span>string<span class=\"k\">;</span>","        <span class=\"k\">var</span> dataProp <span class=\"k\">=</span> data <span class=\"k\">[</span>i<span class=\"k\">].</span>prop<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>versionSearchString <span class=\"k\">=</span> data<span class=\"k\">[</span>i<span class=\"k\">].</span>versionSearch <span class=\"k\">||</span> data<span class=\"k\">[</span>i<span class=\"k\">].</span>identity<span class=\"k\">;</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>dataString<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>dataString<span class=\"k\">.</span>match <span class=\"k\">(</span>data<span class=\"k\">[</span>i<span class=\"k\">].</span>subString<span class=\"k\">))</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span> data<span class=\"k\">[</span>i<span class=\"k\">].</span>identity<span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>dataProp<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> data<span class=\"k\">[</span>i<span class=\"k\">].</span>identity<span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>browser <span class=\"k\">=</span> searchString <span class=\"k\">(</span>DeviceConfiguration<span class=\"k\">.</span>_data_browser<span class=\"k\">)</span> <span class=\"k\">||</span>   ","      DeviceConfiguration<span class=\"k\">.</span>BROWSER_UNKNOWN<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> searchString <span class=\"k\">(</span>DeviceConfiguration<span class=\"k\">.</span>_data_OS<span class=\"k\">)</span> <span class=\"k\">||</span>","      DeviceConfiguration<span class=\"k\">.</span>OS_UNKNOWN<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Returns the current GUI orientation.</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   * Be careful this API does not return the device orientation, which can be</span>","<span class=\"c\">   * deferent from the GUI orientation.</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   * Use the orientation module to have access to the device orientation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DeviceConfiguration#getOrientation </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @return {integer} returns a integer include in [-90, 0, 90, 180];</span>","<span class=\"c\">   * @public</span>","<span class=\"c\">   */</span>","  getOrientation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>orientation<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  setDeviceId <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>did<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>did<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span> ","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>deviceId <span class=\"k\">=</span> did<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"wp7\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_WP7<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_WVGA<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">10</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"iphone\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_IOS<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_HVGA<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"ipad\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_IOS<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_XGA<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">/</span><span class=\"s\">3</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"nokia_s3\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_SYMBIAN<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_N_HD<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">/</span><span class=\"s\">3</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"android\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_ANDROID<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"_3_2\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"_16_10\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">10</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"_16_9\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">9</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","      <span class=\"k\">var</span> width <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>width<span class=\"k\">;</span>","      <span class=\"k\">var</span> height <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>height<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">&gt;</span> height<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        width <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>height<span class=\"k\">;</span>","        height <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>width<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span>","        DeviceConfiguration<span class=\"k\">.</span>_getScreenResolutionCode <span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"blackberry\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_BLACK_BERRY<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"_4_3\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">/</span><span class=\"s\">3</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"_3_2\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"_16_10\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">10</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">var</span> width <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>width<span class=\"k\">;</span>","      <span class=\"k\">var</span> height <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>height<span class=\"k\">;</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span>","        DeviceConfiguration<span class=\"k\">.</span>_getScreenResolutionCode <span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Set the GUI orientation</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.ui.Application#setOrientation </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @param {number} orientation number include in {0, 180, -90, 90}</span>","<span class=\"c\">   */</span>","  setOrientation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>orientation<span class=\"k\">,</span> force<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> pid<span class=\"k\">,</span> device<span class=\"k\">,</span> i<span class=\"k\">,</span> len<span class=\"k\">,</span> id<span class=\"k\">,</span> comp<span class=\"k\">,</span> ","      width <span class=\"k\">=</span> window<span class=\"k\">.</span>innerWidth<span class=\"k\">,</span> height <span class=\"k\">=</span> window<span class=\"k\">.</span>innerHeight<span class=\"k\">,</span> t<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>orientation <span class=\"k\">===</span> orientation<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">&gt;</span> height<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      t <span class=\"k\">=</span> height<span class=\"k\">;</span>","      height <span class=\"k\">=</span> width<span class=\"k\">;</span>","      width <span class=\"k\">=</span> t<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  ","    <span class=\"k\">for</span> <span class=\"k\">(</span>id <span class=\"k\">in</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      comp <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs <span class=\"k\">[</span>id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>comp<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(</span>comp<span class=\"k\">.</span>_orientationWillChange<span class=\"k\">)</span>","      <span class=\"k\">{</span> comp<span class=\"k\">.</span>_orientationWillChange <span class=\"k\">(</span>orientation<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>comp<span class=\"k\">.</span>orientationWillChange<span class=\"k\">)</span>","      <span class=\"k\">{</span> comp<span class=\"k\">.</span>orientationWillChange <span class=\"k\">(</span>orientation<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>pid <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>targets<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      device <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>targets <span class=\"k\">[</span>pid<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>device<span class=\"k\">.</span>device <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>deviceId<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          ","      <span class=\"c\">// verify orientation matching with target id</span>","      <span class=\"k\">if</span> <span class=\"k\">(((</span>orientation <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> orientation <span class=\"k\">!==</span> <span class=\"s\">180</span><span class=\"k\">)</span> <span class=\"k\">||</span> ","            pid<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'_p'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","          <span class=\"k\">((</span>orientation <span class=\"k\">!==</span> <span class=\"s\">90</span> <span class=\"k\">&amp;&amp;</span> orientation <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">90</span><span class=\"k\">)</span> <span class=\"k\">||</span> ","            pid<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'_l'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","  ","      <span class=\"k\">this</span><span class=\"k\">.</span>setActiveStyleSheet <span class=\"k\">(</span>pid<span class=\"k\">);</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>orientation <span class=\"k\">=</span> orientation<span class=\"k\">;</span>","      ","      <span class=\"c\">/**</span>","<span class=\"c\">       * @private</span>","<span class=\"c\">       */</span>","      <span class=\"k\">var</span> orientationDidChangeFct <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> id<span class=\"k\">,</span> comp<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>id <span class=\"k\">in</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          comp <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs <span class=\"k\">[</span>id<span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>comp <span class=\"k\">||</span> <span class=\"k\">!</span>comp<span class=\"k\">.</span>orientationDidChange<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          ","          comp<span class=\"k\">.</span>orientationDidChange <span class=\"k\">(</span>orientation<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>force<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        setTimeout <span class=\"k\">(</span>orientationDidChangeFct<span class=\"k\">,</span> <span class=\"s\">100</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        orientationDidChangeFct<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">return</span> pid<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  setActiveStyleSheet <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>pid<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    util<span class=\"k\">.</span>setActiveStyleSheet <span class=\"k\">(</span>pid<span class=\"k\">);</span>","    window<span class=\"k\">.</span>_current_platform_id <span class=\"k\">=</span> pid<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  registerTargetId <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tid<span class=\"k\">,</span> conf<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>targets <span class=\"k\">[</span>tid<span class=\"k\">]</span> <span class=\"k\">=</span> conf<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>_getScreenResolutionCode <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">240</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">320</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_QVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">240</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">400</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WQVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">320</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">480</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_HVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">480</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">640</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_VGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">480</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">800</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">320</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">854</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WFVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">600</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">800</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_SVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">768</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">1024</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_XGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">360</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">640</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_N_HD<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">540</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">960</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_Q_HD<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">800</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">1280</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WXGA<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>_estimateScreenSize <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>metric<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> w <span class=\"k\">=</span> metric<span class=\"k\">.</span>width <span class=\"k\">/</span> metric<span class=\"k\">.</span>xdpi<span class=\"k\">;</span>","  <span class=\"k\">var</span> h <span class=\"k\">=</span> metric<span class=\"k\">.</span>height <span class=\"k\">/</span> metric<span class=\"k\">.</span>ydpi<span class=\"k\">;</span>","  <span class=\"k\">var</span> size <span class=\"k\">=</span> Math<span class=\"k\">.</span>sqrt <span class=\"k\">(</span>w<span class=\"k\">*</span>w <span class=\"k\">+</span> h<span class=\"k\">*</span>h<span class=\"k\">);</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>size <span class=\"k\">&lt;</span> <span class=\"s\">5</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">3</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>size <span class=\"k\">&lt;</span> <span class=\"s\">8</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">7</span><span class=\"k\">;</span>","  <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"s\">10</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>_data_browser <span class=\"k\">=</span> <span class=\"k\">[</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"Chrome\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>BROWSER_CHROME","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>vendor<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"Apple\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>BROWSER_SAFARI<span class=\"k\">,</span>","    versionSearch<span class=\"k\">:</span> <span class=\"s\">\"Version\"</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","    prop<span class=\"k\">:</span> window<span class=\"k\">.</span>opera<span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>BROWSER_OPERA<span class=\"k\">,</span>","    versionSearch<span class=\"k\">:</span> <span class=\"s\">\"Version\"</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"Firefox\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>BROWSER_FIREFOX","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"MSIE\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>BROWSER_MSIE<span class=\"k\">,</span>","    versionSearch<span class=\"k\">:</span> <span class=\"s\">\"MSIE\"</span>","  <span class=\"k\">}</span>","<span class=\"k\">];</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>_data_OS <span class=\"k\">=</span> <span class=\"k\">[</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>platform<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"Win\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>OS_WINDOWS","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>platform<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"Mac\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>OS_MACOS","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","     string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">,</span>","     subString<span class=\"k\">:</span> <span class=\"s\">\"iPad|iPhone|iPod\"</span><span class=\"k\">,</span>","     identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>OS_IOS","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","     string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">,</span>","     subString<span class=\"k\">:</span> <span class=\"s\">\"Android\"</span><span class=\"k\">,</span>","     identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>OS_ANDROID","  <span class=\"k\">}</span><span class=\"k\">,</span>","  <span class=\"k\">{</span>","    string<span class=\"k\">:</span> navigator<span class=\"k\">.</span>platform<span class=\"k\">,</span>","    subString<span class=\"k\">:</span> <span class=\"s\">\"Linux\"</span><span class=\"k\">,</span>","    identity<span class=\"k\">:</span> DeviceConfiguration<span class=\"k\">.</span>OS_LINUX","  <span class=\"k\">}</span>","<span class=\"k\">];</span>","","","<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> window<span class=\"k\">.</span>deviceConfiguration <span class=\"k\">==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span>","<span class=\"k\">{</span>","  window<span class=\"k\">.</span>deviceConfiguration <span class=\"k\">=</span> <span class=\"k\">new</span> DeviceConfiguration <span class=\"k\">();</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>DeviceConfiguration <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The HTTPRequest class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @extends vs.core.EventSource</span>","<span class=\"c\"> * @name vs.core.HTTPRequest</span>","<span class=\"c\"> * @events textload, xmlload, loaderror </span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * It provides scripted client functionality for transferring data between</span>","<span class=\"c\"> * a client and a server.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new HTTPRequest.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *  var xhr = new core.HTTPRequest ({url: \"http...\"});</span>","<span class=\"c\"> *  xhr.init ();</span>","<span class=\"c\"> *  xhr.bind ('xmlload', this, this.processRSS);</span>","<span class=\"c\"> *  xhr.send ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","HTTPRequest <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> HTTPRequest<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","HTTPRequest<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>",""," <span class=\"c\">/*********************************************************</span>","<span class=\"c\"> *                  private data</span>","<span class=\"c\"> *********************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _url<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _method<span class=\"k\">:</span> <span class=\"s\">'GET'</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _login<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _password<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _content_type<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","    "," <span class=\"c\">/*********************************************************</span>","<span class=\"c\"> *                   management</span>","<span class=\"c\"> *********************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   * </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.HTTPRequest#send </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} data The data to send [optional]</span>","<span class=\"c\">   */</span>","  send <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> xhr <span class=\"k\">=</span> <span class=\"k\">new</span> XMLHttpRequest <span class=\"k\">();</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_response_text <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_response_xml <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  ","    <span class=\"c\">//prepare the xmlhttprequest object</span>","    xhr<span class=\"k\">.</span>open <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_method<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_url<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_login <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_password <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">);</span>","    xhr<span class=\"k\">.</span>setRequestHeader <span class=\"k\">(</span><span class=\"s\">\"Cache-Control\"</span><span class=\"k\">,</span> <span class=\"s\">\"no-cache\"</span><span class=\"k\">);</span>","    xhr<span class=\"k\">.</span>setRequestHeader <span class=\"k\">(</span><span class=\"s\">\"Pragma\"</span><span class=\"k\">,</span> <span class=\"s\">\"no-cache\"</span><span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_content_type<span class=\"k\">)</span>","    <span class=\"k\">{</span> xhr<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">'Content-Type'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_content_type<span class=\"k\">);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    xhr<span class=\"k\">.</span>onreadystatechange <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">4</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>status <span class=\"k\">===</span> <span class=\"s\">200</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>responseText<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            self<span class=\"k\">.</span>_response_text <span class=\"k\">=</span> xhr<span class=\"k\">.</span>responseText<span class=\"k\">;</span>","            self<span class=\"k\">.</span>_response_xml <span class=\"k\">=</span> xhr<span class=\"k\">.</span>responseXML<span class=\"k\">;</span>","            ","            self<span class=\"k\">.</span>propagateChange <span class=\"k\">();</span>","","            self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'textload'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_text<span class=\"k\">);</span>","            self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'xmlload'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_xml<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span>","          <span class=\"k\">{</span>","            self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'loaderror'</span><span class=\"k\">,</span> <span class=\"s\">'file not found.'</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'loaderror'</span><span class=\"k\">,</span> xhr<span class=\"k\">.</span>status<span class=\"k\">);</span>","          <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  ","    <span class=\"c\">//send the request</span>","    xhr<span class=\"k\">.</span>send <span class=\"k\">(</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>HTTPRequest<span class=\"k\">,</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperties <span class=\"k\">(</span>HTTPRequest<span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"s\">\"url\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Setter for the url</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#url </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_url <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'method'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request method (GET | POST)</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#method </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>v <span class=\"k\">!=</span> <span class=\"s\">'GET'</span> <span class=\"k\">||</span> v <span class=\"k\">!=</span> <span class=\"s\">'POST'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_method <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'login'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request login</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#login </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_login <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'password'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request password</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#password </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_password <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'contentType'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request content type</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#contentType </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_content_type <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'responseText'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Return request result as XML document</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#responseText </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_text<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'responseXML'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Return request result as XML document</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#responseXML </span>","<span class=\"c\">     * @type Document</span>","<span class=\"c\">     */</span> ","    get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_xml<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>HTTPRequest <span class=\"k\">=</span> HTTPRequest<span class=\"k\">;</span><span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\"> </span>","<span class=\"c\"> Use code from Canto.js Copyright 2010 Steven Levithan &lt;stevenlevithan.com&gt;</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  vs.core.Array is an Array of Object or Model.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @extends vs.core.Model</span>","<span class=\"c\"> * @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Array</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> VSArray <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Array<span class=\"k\">;</span>","<span class=\"k\">}</span>","","VSArray<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","   _data<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","   _model_class<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @name vs.core.Array#initComponent</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   */</span>","   initComponent <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","   <span class=\"k\">{</span>","     <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">[];</span>","   <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Returns the nth element</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#item</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {number} index</span>","<span class=\"c\">   */</span>","  item <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>index<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">[</span>index<span class=\"k\">];</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * @name vs.core.Array#_instanceModel</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  _instanciateModel <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> Object <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_model_class<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">try</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> _model <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>_model_class <span class=\"k\">(</span>obj<span class=\"k\">);</span>","        _model<span class=\"k\">.</span>init <span class=\"k\">();</span>","        <span class=\"k\">return</span> _model<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Adds one or more elements to the end of an array and returns the</span>","<span class=\"c\">   * new length of the array.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#add</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {element1, ..., elementN} datas</span>","<span class=\"c\">   */</span>","  add <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[],</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span>i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> args<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_instanciateModel <span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">]));</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>push<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">,</span> args<span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'add'</span><span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Adds one or more elements to the end of an array and returns the</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#addAtIndex</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {number} index the position </span>","<span class=\"c\">   * @param {element1, ..., elementN} datas</span>","<span class=\"c\">   */</span>","  addAtIndex <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[],</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span>i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> args<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_instanciateModel <span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">]));</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>splice<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'add'</span><span class=\"k\">,</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> args<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">2</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Removes the elements in the specified interval of this Array.&lt;br/&gt; </span>","<span class=\"c\">   * Shifts any subsequent elements to the left (subtracts one from</span>","<span class=\"c\">   * their indices).&lt;br/&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @example</span>","<span class=\"c\">   * myarray.remove (3); //remove the fourth item</span>","<span class=\"c\">   * ...</span>","<span class=\"c\">   * myarray.remove (3, 5); //remove the fourth, fifth and sixth items</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#remove</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {int} from Index of the first element to be removed</span>","<span class=\"c\">   * @param {int} to Index of the last element to be removed</span>","<span class=\"c\">   */</span>","  remove <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>remove <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'remove'</span><span class=\"k\">,</span> from<span class=\"k\">,</span> to<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Removes all elements of this Array.&lt;br/&gt; </span>","<span class=\"c\">   * @name vs.core.Array#removeAll</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  removeAll <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'removeall'</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  .</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#indexOf</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} str the url to parse</span>","<span class=\"c\">   */</span>","  indexOf <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">(</span><span class=\"s\">\"method not yet implemented\"</span><span class=\"k\">);</span>","<span class=\"c\">//    this._data.push ();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns a copy of the objet's properties for JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used for persistence or serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#toJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @return {String} The JSON String</span>","<span class=\"c\">   */</span>","  toJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> json <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_toJSON <span class=\"k\">(</span><span class=\"s\">\"{\"</span><span class=\"k\">),</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> obj<span class=\"k\">;</span>","    ","    json <span class=\"k\">+=</span> <span class=\"s\">\", </span><span class=\"t\">\\\"</span><span class=\"s\">data</span><span class=\"t\">\\\"</span><span class=\"s\">: [\"</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      obj <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>toJSON<span class=\"k\">)</span> json <span class=\"k\">+=</span> obj<span class=\"k\">.</span>toJSON <span class=\"k\">();</span>","      <span class=\"k\">else</span> json <span class=\"k\">+=</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> json <span class=\"k\">+=</span> <span class=\"s\">','</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    json <span class=\"k\">+=</span> <span class=\"s\">\"]}\"</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> json<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set objet's properties from JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used when retrieve data from serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#parseJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} json The JSON String</span>","<span class=\"c\">   */</span>","  parseJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>json<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> obj <span class=\"k\">=</span> <span class=\"k\">(</span>json <span class=\"k\">&amp;&amp;</span> util<span class=\"k\">.</span>parseJSON <span class=\"k\">(</span>json<span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> i<span class=\"k\">,</span> key<span class=\"k\">,</span> _model<span class=\"k\">,</span> item<span class=\"k\">;</span>","  ","      <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> obj<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"s\">'data'</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> obj<span class=\"k\">.</span>data<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","          <span class=\"k\">{</span>","            item <span class=\"k\">=</span> obj<span class=\"k\">.</span>data <span class=\"k\">[</span>i<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_model_class<span class=\"k\">)</span>","            <span class=\"k\">{</span>","              _model <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>_model_class <span class=\"k\">();</span>","              _model<span class=\"k\">.</span>init <span class=\"k\">();</span>","            ","              <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> item<span class=\"k\">)</span> <span class=\"k\">{</span> _model <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> key<span class=\"k\">]</span> <span class=\"k\">=</span> item <span class=\"k\">[</span>key<span class=\"k\">];</span> <span class=\"k\">}</span>","              <span class=\"k\">this</span><span class=\"k\">.</span>add <span class=\"k\">(</span>_model<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">this</span><span class=\"k\">.</span>add <span class=\"k\">(</span>item<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">this</span> <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> key<span class=\"k\">]</span> <span class=\"k\">=</span> obj <span class=\"k\">[</span>key<span class=\"k\">];</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Array.parseJSON failed. \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>VSArray<span class=\"k\">,</span> core<span class=\"k\">.</span>Model<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperties <span class=\"k\">(</span>VSArray<span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"s\">\"length\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * The url anchor</span>","<span class=\"c\">     * @example</span>","<span class=\"c\">     * top in http://test.com/index.html#top</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @name vs.core.Array#length </span>","<span class=\"c\">     * @type {string}</span>","<span class=\"c\">     */</span>","    get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>__i__<span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">(</span><span class=\"s\">\"Component not initialized\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">\"modelClass\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Set this property to specify the model class that the Array contains</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @name vs.core.Array#modelClass </span>","<span class=\"c\">     * @type {vs.core.Model}</span>","<span class=\"c\">     */</span>","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span>v <span class=\"k\">instanceof</span> Function<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_model_class <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Array <span class=\"k\">=</span> VSArray<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @extends vs.core.EventSource</span>","<span class=\"c\"> *  @class vs.core.DataStorage </span>","<span class=\"c\"> *  is an abstract class for managing data save and laod.</span>","<span class=\"c\"> *  &lt;br/&gt;&lt;br/&gt; &gt;&gt;&gt;&gt; THIS CODE IS STILL UNDER BETA AND </span>","<span class=\"c\"> *  THE API MAY CHANGE IN THE FUTURE &lt;&lt;&lt; &lt;p&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.DataStorage</span>","<span class=\"c\"> * @see vs.core.LocalStorage</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> DataStorage <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>DataStorage<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","DataStorage<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","   __models__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Register a model into the sync service.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#registerModel</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name</span>","<span class=\"c\">   * @param {vs.core.Model} model the model to register</span>","<span class=\"c\">   */</span>","  registerModel <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> model<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">||</span> <span class=\"k\">!</span>model<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">])</span>","      error<span class=\"k\">.</span>log <span class=\"k\">(</span><span class=\"s\">\"Model with the name already registered.\"</span><span class=\"k\">);</span>","      ","    <span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> model<span class=\"k\">;</span>","    ","    model<span class=\"k\">.</span>_sync_service_ <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Remove a model from the sync service. &lt;br/&gt;</span>","<span class=\"c\">   * If the you want also delete delete data you have to call before the </span>","<span class=\"c\">   * delete methode</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#removeModel</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name</span>","<span class=\"c\">   */</span>","  removeModel <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Save models. If a name is specified, it save only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#save</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  save <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Load models. If a name is specified, it load only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#load</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  load <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>DataStorage<span class=\"k\">,</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>DataStorage <span class=\"k\">=</span> DataStorage<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @extends vs.core.DataStorage</span>","<span class=\"c\"> *  @class vs.core.LocalStorage </span>","<span class=\"c\"> *  is an implementation of DataStorage for storing data into HTML5 LocalStorage</span>","<span class=\"c\"> *  &lt;br/&gt;&lt;br/&gt; &gt;&gt;&gt;&gt; THIS CODE IS STILL UNDER BETA AND </span>","<span class=\"c\"> *  THE API MAY CHANGE IN THE FUTURE &lt;&lt;&lt; &lt;p&gt;</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *   var todoList = vs.core.Array ();</span>","<span class=\"c\"> *   todoList.init ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   var localStorage = new vs.core.LocalStorage ();</span>","<span class=\"c\"> *   localStorage.init ();</span>","<span class=\"c\"> *   localStorage.registerModel (\"todoslist\", todosList);</span>","<span class=\"c\"> *   localStorage.load ();</span>","<span class=\"c\"> *   ...</span>","<span class=\"c\"> *   // model modification</span>","<span class=\"c\"> *   localStorage.save ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.LocalStorage</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> LocalStorage <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> DataStorage<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>LocalStorage<span class=\"k\">;</span>","<span class=\"k\">}</span>","","LocalStorage<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Save models. If a name is specified, it saves only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.LocalStorage#save</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  save <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> _save <span class=\"k\">(</span>name<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> json<span class=\"k\">,</span> model <span class=\"k\">=</span> self<span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">try</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>model<span class=\"k\">.</span>toJSON<span class=\"k\">)</span> json <span class=\"k\">=</span> model<span class=\"k\">.</span>toJSON <span class=\"k\">();</span>","        <span class=\"k\">else</span> json <span class=\"k\">=</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>model<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        error<span class=\"k\">.</span>log <span class=\"k\">(</span>e<span class=\"k\">);</span>","        self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">\"error\"</span><span class=\"k\">,</span> e<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      ","      localStorage<span class=\"k\">.</span>setItem <span class=\"k\">(</span>name<span class=\"k\">,</span> json<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> _save <span class=\"k\">(</span>name<span class=\"k\">);</span>","    <span class=\"k\">else</span> <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__models__<span class=\"k\">)</span> _save <span class=\"k\">(</span>name<span class=\"k\">);</span>","    ","    self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">\"save\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Load models. If a name is specified, it load only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.LocalStorage#load</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  load <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> _load <span class=\"k\">(</span>name<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">try</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> json<span class=\"k\">,</span> model <span class=\"k\">=</span> self<span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> store <span class=\"k\">=</span> localStorage<span class=\"k\">.</span>getItem <span class=\"k\">(</span>name<span class=\"k\">);</span>","        model<span class=\"k\">.</span>parseJSON <span class=\"k\">(</span>store<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"LocalStorate.load failed. \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> _load <span class=\"k\">(</span>name<span class=\"k\">);</span>","    <span class=\"k\">else</span> <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__models__<span class=\"k\">)</span> _load <span class=\"k\">(</span>name<span class=\"k\">);</span>","    ","    self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">\"load\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>LocalStorage<span class=\"k\">,</span> DataStorage<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>LocalStorage <span class=\"k\">=</span> LocalStorage<span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">)(</span>window<span class=\"k\">);</span>"];
_$jscoverage['js/vs_core.js'][19]++;
(function (window, undefined) {
  _$jscoverage['js/vs_core.js'][21]++;
  var document = window.document;
  _$jscoverage['js/vs_core.js'][45]++;
  var vs = window.vs, util = vs.util, core = vs.core;
  _$jscoverage['js/vs_core.js'][52]++;
  var _id_index_ = 0;
  _$jscoverage['js/vs_core.js'][62]++;
  function createId() {
    _$jscoverage['js/vs_core.js'][64]++;
    return ("vs_id_" + (_id_index_++));
}
  _$jscoverage['js/vs_core.js'][75]++;
  function createUniqueId() {
    _$jscoverage['js/vs_core.js'][77]++;
    return ("vs_id_" + new Date().getTime() + "" + Math.floor((Math.random() * 1000000)));
}
  _$jscoverage['js/vs_core.js'][86]++;
  core.createId = createId;
  _$jscoverage['js/vs_core.js'][87]++;
  core.createUniqueId = createUniqueId;
  _$jscoverage['js/vs_core.js'][123]++;
  function VSObject(config) {
    _$jscoverage['js/vs_core.js'][125]++;
    this.constructor = core.Object;
    _$jscoverage['js/vs_core.js'][126]++;
    if (util.isString(config)) {
      _$jscoverage['js/vs_core.js'][126]++;
      this._id = config;
    }
    else {
      _$jscoverage['js/vs_core.js'][127]++;
      if ((config && config.id)) {
        _$jscoverage['js/vs_core.js'][127]++;
        this._id = config.id;
      }
      else {
        _$jscoverage['js/vs_core.js'][128]++;
        this._id = createId();
      }
    }
    _$jscoverage['js/vs_core.js'][130]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][132]++;
      this.__config__ = util.clone(config);
    }
}
  _$jscoverage['js/vs_core.js'][136]++;
  VSObject.prototype = {_id: "", __i__: false, __config__: null, init: (function (fromClone) {
  _$jscoverage['js/vs_core.js'][169]++;
  if (this.__i__) {
    _$jscoverage['js/vs_core.js'][169]++;
    return this;
  }
  _$jscoverage['js/vs_core.js'][171]++;
  if ((! this._id)) {
    _$jscoverage['js/vs_core.js'][173]++;
    this._id = createId();
  }
  _$jscoverage['js/vs_core.js'][177]++;
  VSObject._obs[this._id] = this;
  _$jscoverage['js/vs_core.js'][179]++;
  if ((! fromClone)) {
    _$jscoverage['js/vs_core.js'][179]++;
    this.initComponent();
  }
  _$jscoverage['js/vs_core.js'][180]++;
  this.__i__ = true;
  _$jscoverage['js/vs_core.js'][183]++;
  if (((! fromClone) && this.vsdInit)) {
    _$jscoverage['js/vs_core.js'][183]++;
    this.vsdInit();
  }
  _$jscoverage['js/vs_core.js'][185]++;
  if (this.__config__) {
    _$jscoverage['js/vs_core.js'][187]++;
    this.configure(this.__config__);
    _$jscoverage['js/vs_core.js'][188]++;
    (delete this.__config__);
  }
  _$jscoverage['js/vs_core.js'][192]++;
  if (this.componentDidInitialize) {
    _$jscoverage['js/vs_core.js'][192]++;
    this.componentDidInitialize();
  }
  _$jscoverage['js/vs_core.js'][196]++;
  if (this.initSkin) {
    _$jscoverage['js/vs_core.js'][198]++;
    console.warn("Your application shouldn't use initSkin anymore.\nYou should rename by componentDidInitialize.");
    _$jscoverage['js/vs_core.js'][201]++;
    VSObject.prototype.initSkin = (function () {
});
    _$jscoverage['js/vs_core.js'][204]++;
    this.initSkin();
    _$jscoverage['js/vs_core.js'][207]++;
    VSObject.prototype.initSkin = undefined;
  }
  _$jscoverage['js/vs_core.js'][210]++;
  return this;
}), initComponent: (function () {
}), createId: (function () {
  _$jscoverage['js/vs_core.js'][226]++;
  console.warn("this.createId is deprecated, Use the static method vs.core.createId instead");
  _$jscoverage['js/vs_core.js'][228]++;
  return createId();
}), configure: (function (config) {
  _$jscoverage['js/vs_core.js'][256]++;
  if (((typeof config) !== "object")) {
    _$jscoverage['js/vs_core.js'][256]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][257]++;
  var props, key, i, should_propagate = false, desc;
  _$jscoverage['js/vs_core.js'][259]++;
  var df = _df_node_to_def[this._id];
  _$jscoverage['js/vs_core.js'][260]++;
  if (df) {
    _$jscoverage['js/vs_core.js'][260]++;
    df.pausePropagation();
  }
  _$jscoverage['js/vs_core.js'][263]++;
  if ((config instanceof Model)) {
    _$jscoverage['js/vs_core.js'][265]++;
    desc = this.getPropertyDescriptor("model");
    _$jscoverage['js/vs_core.js'][266]++;
    if ((desc && desc.set)) {
      _$jscoverage['js/vs_core.js'][269]++;
      this.model = config;
      _$jscoverage['js/vs_core.js'][270]++;
      should_propagate = true;
    }
    else {
      _$jscoverage['js/vs_core.js'][275]++;
      props = config.getProperties();
      _$jscoverage['js/vs_core.js'][276]++;
      for (i = 0; (i < props.length); (i++)) {
        _$jscoverage['js/vs_core.js'][278]++;
        key = props[i];
        _$jscoverage['js/vs_core.js'][279]++;
        if ((key === "id")) {
          _$jscoverage['js/vs_core.js'][279]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][280]++;
        this[key] = config[key];
        _$jscoverage['js/vs_core.js'][281]++;
        should_propagate = true;
}
    }
  }
  else {
    _$jscoverage['js/vs_core.js'][287]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][287]++;
      for (key in config) {
        _$jscoverage['js/vs_core.js'][289]++;
        if (((key === "id") || (key === "node") || (key === "node_ref") || (key === "view"))) {
          _$jscoverage['js/vs_core.js'][291]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][292]++;
        this[key] = config[key];
        _$jscoverage['js/vs_core.js'][293]++;
        should_propagate = true;
}
    }
  }
  _$jscoverage['js/vs_core.js'][297]++;
  if (df) {
    _$jscoverage['js/vs_core.js'][299]++;
    df.restartPropagation();
    _$jscoverage['js/vs_core.js'][300]++;
    if (should_propagate) {
      _$jscoverage['js/vs_core.js'][302]++;
      if (this.propertiesDidChange) {
        _$jscoverage['js/vs_core.js'][302]++;
        this.propertiesDidChange();
      }
      _$jscoverage['js/vs_core.js'][303]++;
      df.propagate(this._id);
    }
  }
  else {
    _$jscoverage['js/vs_core.js'][306]++;
    if ((should_propagate && this.propertiesDidChange)) {
      _$jscoverage['js/vs_core.js'][307]++;
      this.propertiesDidChange();
    }
  }
}), getProperties: (function () {
  _$jscoverage['js/vs_core.js'][319]++;
  if ((! this.constructor._properties_)) {
    _$jscoverage['js/vs_core.js'][319]++;
    return [];
  }
  _$jscoverage['js/vs_core.js'][321]++;
  return this.constructor._properties_.slice();
}), toJSON: (function () {
  _$jscoverage['js/vs_core.js'][334]++;
  return (this._toJSON("{") + "}");
}), parseJSON: (function (json) {
  _$jscoverage['js/vs_core.js'][347]++;
  try {
    _$jscoverage['js/vs_core.js'][348]++;
    var obj = ((json && util.parseJSON(json)) || {}), value, result;
    _$jscoverage['js/vs_core.js'][350]++;
    for (var key in obj) {
      _$jscoverage['js/vs_core.js'][362]++;
      this[("_" + key)] = value;
}
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][367]++;
    console.error(("vs.core.Object.parseJSON failed. " + e.toString()));
  }
}), _toJSON: (function (json) {
  _$jscoverage['js/vs_core.js'][380]++;
  var prop_name, value, str, _properties_ = this.constructor._properties_, n = 0;
  _$jscoverage['js/vs_core.js'][383]++;
  if ((! _properties_)) {
    _$jscoverage['js/vs_core.js'][383]++;
    return json;
  }
  _$jscoverage['js/vs_core.js'][385]++;
  for (var i = 0; (i < _properties_.length); (i++)) {
    _$jscoverage['js/vs_core.js'][387]++;
    prop_name = _properties_[i];
    _$jscoverage['js/vs_core.js'][388]++;
    value = this[("_" + prop_name)];
    _$jscoverage['js/vs_core.js'][389]++;
    if (((typeof value) == "undefined")) {
      _$jscoverage['js/vs_core.js'][389]++;
      continue;
    }
    else {
      _$jscoverage['js/vs_core.js'][390]++;
      if ((value == null)) {
        _$jscoverage['js/vs_core.js'][390]++;
        str = "null";
      }
      else {
        _$jscoverage['js/vs_core.js'][391]++;
        if ((value instanceof Date)) {
          _$jscoverage['js/vs_core.js'][392]++;
          str = ("\"/Date(" + value.getTime() + ")/\"");
        }
        else {
          _$jscoverage['js/vs_core.js'][395]++;
          if (value.toJSON) {
            _$jscoverage['js/vs_core.js'][395]++;
            str = value.toJSON();
          }
          else {
            _$jscoverage['js/vs_core.js'][396]++;
            try {
              _$jscoverage['js/vs_core.js'][397]++;
              str = JSON.stringify(value);
            }
            catch (e) {
              _$jscoverage['js/vs_core.js'][400]++;
              console.warn(e);
              _$jscoverage['js/vs_core.js'][401]++;
              continue;
            }
          }
        }
      }
    }
    _$jscoverage['js/vs_core.js'][404]++;
    if ((n++)) {
      _$jscoverage['js/vs_core.js'][404]++;
      json += ",";
    }
    _$jscoverage['js/vs_core.js'][405]++;
    json += ("\"" + prop_name + "\":" + str);
}
  _$jscoverage['js/vs_core.js'][408]++;
  return json;
}), destructor: (function () {
}), propertyChange: (function (property) {
  _$jscoverage['js/vs_core.js'][431]++;
  var df = _df_node_to_def[this._id];
  _$jscoverage['js/vs_core.js'][432]++;
  if (df) {
    _$jscoverage['js/vs_core.js'][432]++;
    df.propagate(this._id, property);
  }
}), propagateChange: (function (property) {
  _$jscoverage['js/vs_core.js'][446]++;
  this.propertyChange(property);
}), link: (function (model) {
  _$jscoverage['js/vs_core.js'][483]++;
  if ((model instanceof vs.core.Model)) {
    _$jscoverage['js/vs_core.js'][485]++;
    if (this.__model) {
      _$jscoverage['js/vs_core.js'][485]++;
      this.__model.unlinkTo(this);
    }
    _$jscoverage['js/vs_core.js'][486]++;
    this.__model = model;
    _$jscoverage['js/vs_core.js'][487]++;
    this.__model.linkTo(this);
    _$jscoverage['js/vs_core.js'][490]++;
    this.configure(this.__model);
  }
  else {
    _$jscoverage['js/vs_core.js'][492]++;
    throw "vs.core.Object.link; parameter is not a vs.core.Model";
  }
}), unlink: (function () {
  _$jscoverage['js/vs_core.js'][505]++;
  if (this.__model) {
    _$jscoverage['js/vs_core.js'][507]++;
    if (this.__model) {
      _$jscoverage['js/vs_core.js'][509]++;
      this.__model.unlinkTo(this);
      _$jscoverage['js/vs_core.js'][510]++;
      var props = this.__model.getProperties();
      _$jscoverage['js/vs_core.js'][510]++;
      ((l = props.length), (config = {}));
      _$jscoverage['js/vs_core.js'][512]++;
      while ((l--)) {
        _$jscoverage['js/vs_core.js'][512]++;
        config[props[l]] = null;
}
      _$jscoverage['js/vs_core.js'][513]++;
      this.configure(config);
    }
    _$jscoverage['js/vs_core.js'][515]++;
    this.__model = undefined;
  }
}), clone: (function (config, cloned_map) {
  _$jscoverage['js/vs_core.js'][530]++;
  var obj, key, value, desc, desc_clone, getter, setter;
  _$jscoverage['js/vs_core.js'][532]++;
  if ((! cloned_map)) {
    _$jscoverage['js/vs_core.js'][532]++;
    cloned_map = {};
  }
  _$jscoverage['js/vs_core.js'][535]++;
  if (cloned_map[this._id]) {
    _$jscoverage['js/vs_core.js'][535]++;
    return cloned_map[this._id];
  }
  _$jscoverage['js/vs_core.js'][537]++;
  if ((! config)) {
    _$jscoverage['js/vs_core.js'][537]++;
    config = {};
  }
  _$jscoverage['js/vs_core.js'][538]++;
  if ((! config.id)) {
    _$jscoverage['js/vs_core.js'][538]++;
    config.id = createId();
  }
  _$jscoverage['js/vs_core.js'][540]++;
  if (util.isFunction(this.constructor)) {
    _$jscoverage['js/vs_core.js'][542]++;
    obj = new (this.constructor)(config);
  }
  else {
    _$jscoverage['js/vs_core.js'][546]++;
    console.warn("impossible to clone this object.");
    _$jscoverage['js/vs_core.js'][547]++;
    return null;
  }
  _$jscoverage['js/vs_core.js'][550]++;
  cloned_map[this._id] = obj;
  _$jscoverage['js/vs_core.js'][552]++;
  function _propertyDecl_api1(prop_name, src, trg) {
    _$jscoverage['js/vs_core.js'][554]++;
    var getter = src.__lookupGetter__(prop_name), setter = src.__lookupSetter__(prop_name), getter_clone = trg.__lookupGetter__(prop_name), setter_clone = trg.__lookupSetter__(prop_name);
    _$jscoverage['js/vs_core.js'][560]++;
    if ((getter && (! getter_clone))) {
      _$jscoverage['js/vs_core.js'][562]++;
      trg.__defineGetter__(prop_name, getter);
    }
    _$jscoverage['js/vs_core.js'][565]++;
    if ((setter && (! setter_clone))) {
      _$jscoverage['js/vs_core.js'][567]++;
      trg.__defineSetter__(prop_name, setter);
    }
    _$jscoverage['js/vs_core.js'][570]++;
    if (((! setter) && (! getter))) {
      _$jscoverage['js/vs_core.js'][572]++;
      var value = src[prop_name];
      _$jscoverage['js/vs_core.js'][573]++;
      if (util.isArray(value)) {
        _$jscoverage['js/vs_core.js'][573]++;
        trg[prop_name] = value.slice();
      }
      else {
        _$jscoverage['js/vs_core.js'][574]++;
        trg[prop_name] = src[prop_name];
      }
    }
}
  _$jscoverage['js/vs_core.js'][578]++;
  function _propertyDecl_api2(prop_name, src, trg) {
    _$jscoverage['js/vs_core.js'][580]++;
    var desc = Object.getOwnPropertyDescriptor(src, prop_name), desc_clone = Object.getOwnPropertyDescriptor(trg, prop_name);
    _$jscoverage['js/vs_core.js'][584]++;
    if ((desc && (desc.get || desc.set))) {
      _$jscoverage['js/vs_core.js'][587]++;
      if ((! desc_clone)) {
        _$jscoverage['js/vs_core.js'][587]++;
        util.defineProperty(trg, prop_name, desc);
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][592]++;
      var value = src[prop_name];
      _$jscoverage['js/vs_core.js'][593]++;
      if (util.isArray(value)) {
        _$jscoverage['js/vs_core.js'][593]++;
        trg[prop_name] = value.slice();
      }
      else {
        _$jscoverage['js/vs_core.js'][594]++;
        trg[prop_name] = src[prop_name];
      }
    }
}
  _$jscoverage['js/vs_core.js'][598]++;
  var propertyDecl = (Object.defineProperty? _propertyDecl_api2: _propertyDecl_api1);
  _$jscoverage['js/vs_core.js'][601]++;
  function _propertyCopy_api1(prop_name, src, trg) {
    _$jscoverage['js/vs_core.js'][603]++;
    var getter = src.__lookupGetter__(prop_name), setter = src.__lookupSetter__(prop_name), setter_clone = trg.__lookupSetter__(prop_name);
    _$jscoverage['js/vs_core.js'][608]++;
    if ((setter || getter)) {
      _$jscoverage['js/vs_core.js'][610]++;
      if (setter_clone) {
        _$jscoverage['js/vs_core.js'][610]++;
        trg[prop_name] = src[("_" + prop_name)];
      }
      else {
        _$jscoverage['js/vs_core.js'][611]++;
        trg[("_" + prop_name)] = src[("_" + prop_name)];
      }
    }
}
  _$jscoverage['js/vs_core.js'][615]++;
  function _propertyCopy_api2(prop_name, src, trg) {
    _$jscoverage['js/vs_core.js'][617]++;
    var desc = Object.getOwnPropertyDescriptor(src, prop_name), desc_clone = Object.getOwnPropertyDescriptor(trg, prop_name);
    _$jscoverage['js/vs_core.js'][621]++;
    if ((desc && desc_clone && (desc.get || desc.set))) {
      _$jscoverage['js/vs_core.js'][623]++;
      if (desc_clone.set) {
        _$jscoverage['js/vs_core.js'][623]++;
        trg[prop_name] = src[("_" + prop_name)];
      }
      else {
        _$jscoverage['js/vs_core.js'][624]++;
        trg[("_" + prop_name)] = src[("_" + prop_name)];
      }
    }
}
  _$jscoverage['js/vs_core.js'][628]++;
  var propertyCopy = (Object.defineProperty? _propertyCopy_api2: _propertyCopy_api1);
  _$jscoverage['js/vs_core.js'][632]++;
  for (key in this) {
    _$jscoverage['js/vs_core.js'][634]++;
    if ((! this.hasOwnProperty(key))) {
      _$jscoverage['js/vs_core.js'][634]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][636]++;
    if ((util.isFunction(this[key]) && (! util.isFunction(obj[key])))) {
      _$jscoverage['js/vs_core.js'][637]++;
      obj[key] = this[key];
    }
    else {
      _$jscoverage['js/vs_core.js'][638]++;
      propertyDecl(key, this, obj);
    }
}
  _$jscoverage['js/vs_core.js'][641]++;
  obj.__i__ = false;
  _$jscoverage['js/vs_core.js'][642]++;
  obj.init();
  _$jscoverage['js/vs_core.js'][645]++;
  this._clone(obj, config, cloned_map);
  _$jscoverage['js/vs_core.js'][648]++;
  for (key in this) {
    _$jscoverage['js/vs_core.js'][650]++;
    if (((key == "id") || (key == "_id"))) {
      _$jscoverage['js/vs_core.js'][650]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][651]++;
    if ((! this.hasOwnProperty(key))) {
      _$jscoverage['js/vs_core.js'][651]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][653]++;
    propertyCopy(key, this, obj);
}
  _$jscoverage['js/vs_core.js'][657]++;
  if (this.__model) {
    _$jscoverage['js/vs_core.js'][659]++;
    if ((cloned_map && cloned_map[this.__model._id])) {
      _$jscoverage['js/vs_core.js'][660]++;
      obj.link(cloned_map[this.__model._id]);
    }
    else {
      _$jscoverage['js/vs_core.js'][661]++;
      obj.link(this.__model);
    }
  }
  _$jscoverage['js/vs_core.js'][664]++;
  return obj;
}), _clone: (function (obj, cloned_map) {
}), getOwnPropertyDescriptor: (function (prop) {
  _$jscoverage['js/vs_core.js'][694]++;
  var proto = Object.getPrototypeOf(this);
  _$jscoverage['js/vs_core.js'][695]++;
  if ((! proto)) {
    _$jscoverage['js/vs_core.js'][695]++;
    return null;
  }
  _$jscoverage['js/vs_core.js'][696]++;
  return Object.getOwnPropertyDescriptor(proto, prop);
}), getPropertyDescriptor: (function (prop) {
  _$jscoverage['js/vs_core.js'][711]++;
  function _getOwnPropertyDescriptor(obj, prop) {
    _$jscoverage['js/vs_core.js'][713]++;
    if ((! obj)) {
      _$jscoverage['js/vs_core.js'][713]++;
      return null;
    }
    _$jscoverage['js/vs_core.js'][714]++;
    var proto = Object.getPrototypeOf(obj);
    _$jscoverage['js/vs_core.js'][715]++;
    if ((! proto)) {
      _$jscoverage['js/vs_core.js'][715]++;
      return null;
    }
    _$jscoverage['js/vs_core.js'][716]++;
    var desc = Object.getOwnPropertyDescriptor(proto, prop);
    _$jscoverage['js/vs_core.js'][717]++;
    if (desc) {
      _$jscoverage['js/vs_core.js'][717]++;
      return desc;
    }
    _$jscoverage['js/vs_core.js'][718]++;
    return _getOwnPropertyDescriptor(proto, prop);
}
  _$jscoverage['js/vs_core.js'][721]++;
  return _getOwnPropertyDescriptor(this, prop);
}), _super: (function () {
  _$jscoverage['js/vs_core.js'][729]++;
  var superFunc = this._super.caller._super_func_;
  _$jscoverage['js/vs_core.js'][730]++;
  if (superFunc) {
    _$jscoverage['js/vs_core.js'][730]++;
    superFunc.apply(this, arguments);
  }
})};
  _$jscoverage['js/vs_core.js'][738]++;
  util.defineClassProperty(VSObject, "id", {get: (function () {
  _$jscoverage['js/vs_core.js'][745]++;
  return this._id;
})});
  _$jscoverage['js/vs_core.js'][752]++;
  VSObject._obs = {};
  _$jscoverage['js/vs_core.js'][758]++;
  core.Object = VSObject;
  _$jscoverage['js/vs_core.js'][781]++;
  var _constructor_ = window.Object.prototype.constructor;
  _$jscoverage['js/vs_core.js'][804]++;
  function createClass(config) {
    _$jscoverage['js/vs_core.js'][806]++;
    var klass = null, __spec = {}, parent = vs.core.Object, properties = {};
    _$jscoverage['js/vs_core.js'][810]++;
    klass = (function () {
  _$jscoverage['js/vs_core.js'][812]++;
  this.parent = klass.__spec.parent;
  _$jscoverage['js/vs_core.js'][814]++;
  if ((klass.__spec && klass.__spec._constructor)) {
    _$jscoverage['js/vs_core.js'][816]++;
    klass.__spec._constructor.apply(this, arguments);
  }
  else {
    _$jscoverage['js/vs_core.js'][819]++;
    if ((klass.__spec && klass.__spec.parent)) {
      _$jscoverage['js/vs_core.js'][821]++;
      this.parent.apply(this, arguments);
    }
  }
  _$jscoverage['js/vs_core.js'][824]++;
  this.constructor = klass;
});
    _$jscoverage['js/vs_core.js'][826]++;
    if ((config && config.parent)) {
      _$jscoverage['js/vs_core.js'][828]++;
      parent = config.parent;
      _$jscoverage['js/vs_core.js'][829]++;
      (delete config.parent);
    }
    _$jscoverage['js/vs_core.js'][831]++;
    if ((config && config.properties)) {
      _$jscoverage['js/vs_core.js'][833]++;
      properties = config.properties;
      _$jscoverage['js/vs_core.js'][834]++;
      (delete config.properties);
    }
    _$jscoverage['js/vs_core.js'][837]++;
    __spec.parent = parent;
    _$jscoverage['js/vs_core.js'][838]++;
    if ((config && config.constructor && (config.constructor !== _constructor_))) {
      _$jscoverage['js/vs_core.js'][840]++;
      __spec._constructor = config.constructor;
      _$jscoverage['js/vs_core.js'][841]++;
      __spec._constructor._super_func_ = parent;
    }
    _$jscoverage['js/vs_core.js'][843]++;
    klass.__spec = __spec;
    _$jscoverage['js/vs_core.js'][846]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][848]++;
      klass.prototype = config;
      _$jscoverage['js/vs_core.js'][849]++;
      config.constructor = klass;
    }
    _$jscoverage['js/vs_core.js'][851]++;
    if (parent.prototype) {
      _$jscoverage['js/vs_core.js'][851]++;
      util.extendClass(klass, parent);
    }
    _$jscoverage['js/vs_core.js'][854]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][854]++;
      for (key in config) {
        _$jscoverage['js/vs_core.js'][856]++;
        if ((! config.hasOwnProperty(key))) {
          _$jscoverage['js/vs_core.js'][856]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][857]++;
        var func = config[key];
        _$jscoverage['js/vs_core.js'][858]++;
        var superFunc = parent.prototype[key];
        _$jscoverage['js/vs_core.js'][859]++;
        if (((! util.isFunction(func)) || (! util.isFunction(superFunc)))) {
          _$jscoverage['js/vs_core.js'][859]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][862]++;
        func._super_func_ = superFunc;
}
    }
    _$jscoverage['js/vs_core.js'][881]++;
    _setProperties(klass, properties);
    _$jscoverage['js/vs_core.js'][883]++;
    return klass;
}
  _$jscoverage['js/vs_core.js'][891]++;
  vs.core.Object.PROPERTY_IN = 1;
  _$jscoverage['js/vs_core.js'][898]++;
  vs.core.Object.PROPERTY_OUT = 2;
  _$jscoverage['js/vs_core.js'][905]++;
  vs.core.Object.PROPERTY_IN_OUT = 3;
  _$jscoverage['js/vs_core.js'][913]++;
  var property_reg = /(\w+[.\w+]*)#(\w+)/;
  _$jscoverage['js/vs_core.js'][918]++;
  function _setProperties(klass, properties) {
    _$jscoverage['js/vs_core.js'][920]++;
    var descriptions = {}, export_value, desc, _prop_name;
    _$jscoverage['js/vs_core.js'][921]++;
    for (var prop_name in properties) {
      _$jscoverage['js/vs_core.js'][923]++;
      var value = properties[prop_name];
      _$jscoverage['js/vs_core.js'][926]++;
      if (util.isNumber(value)) {
        _$jscoverage['js/vs_core.js'][928]++;
        export_value = value;
        _$jscoverage['js/vs_core.js'][928]++;
        desc = {};
        _$jscoverage['js/vs_core.js'][929]++;
        _prop_name = ("_" + util.underscore(prop_name));
        _$jscoverage['js/vs_core.js'][930]++;
        if ((export_value & vs.core.Object.PROPERTY_IN)) {
          _$jscoverage['js/vs_core.js'][932]++;
          desc.set = (function (prop_name, _prop_name) {
  _$jscoverage['js/vs_core.js'][934]++;
  return (function (v) {
  _$jscoverage['js/vs_core.js'][936]++;
  this[_prop_name] = v;
  _$jscoverage['js/vs_core.js'][937]++;
  this.propertyChange(prop_name);
});
})(prop_name, _prop_name);
        }
        _$jscoverage['js/vs_core.js'][941]++;
        if ((export_value & vs.core.Object.PROPERTY_OUT)) {
          _$jscoverage['js/vs_core.js'][943]++;
          desc.get = (function (_prop_name) {
  _$jscoverage['js/vs_core.js'][945]++;
  return (function () {
  _$jscoverage['js/vs_core.js'][947]++;
  return this[_prop_name];
});
})(_prop_name);
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][954]++;
        if (util.isString(value)) {
          _$jscoverage['js/vs_core.js'][956]++;
          var result = property_reg.exec(value);
          _$jscoverage['js/vs_core.js'][957]++;
          if (((! result) || (result.length != 3))) {
            _$jscoverage['js/vs_core.js'][959]++;
            throw ("Unvalid property path: " + value);
          }
          _$jscoverage['js/vs_core.js'][961]++;
          desc = {};
          _$jscoverage['js/vs_core.js'][962]++;
          desc.set = (function (_path, _prop_name) {
  _$jscoverage['js/vs_core.js'][964]++;
  return (function (v) {
  _$jscoverage['js/vs_core.js'][966]++;
  this[_path][_prop_name] = v;
  _$jscoverage['js/vs_core.js'][967]++;
  this.propertyChange(_prop_name);
});
})(result[1], result[2]);
          _$jscoverage['js/vs_core.js'][971]++;
          desc.get = (function (_path, _prop_name) {
  _$jscoverage['js/vs_core.js'][973]++;
  return (function () {
  _$jscoverage['js/vs_core.js'][975]++;
  return this[_path][_prop_name];
});
})(result[1], result[2]);
        }
        else {
          _$jscoverage['js/vs_core.js'][981]++;
          if (((typeof value) == "object")) {
            _$jscoverage['js/vs_core.js'][983]++;
            desc = value;
          }
        }
      }
      _$jscoverage['js/vs_core.js'][985]++;
      descriptions[prop_name] = desc;
}
    _$jscoverage['js/vs_core.js'][987]++;
    util.defineClassProperties(klass, descriptions);
}
  _$jscoverage['js/vs_core.js'][994]++;
  core.createClass = createClass;
  _$jscoverage['js/vs_core.js'][1072]++;
  function Model(config) {
    _$jscoverage['js/vs_core.js'][1074]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][1075]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][1076]++;
    this.constructor = vs.core.Model;
    _$jscoverage['js/vs_core.js'][1078]++;
    this.__bindings__ = {};
    _$jscoverage['js/vs_core.js'][1079]++;
    this.__links__ = [];
}
  _$jscoverage['js/vs_core.js'][1082]++;
  Model.prototype = {__bindings__: null, __links__: null, __should_propagate_changes__: true, _sync_service_: null, destructor: (function () {
  _$jscoverage['js/vs_core.js'][1122]++;
  core.Object.prototype.destructor.call(this);
  _$jscoverage['js/vs_core.js'][1124]++;
  if (this._sync_service_) {
    _$jscoverage['js/vs_core.js'][1124]++;
    this._sync_service_.removeModel(this);
  }
  _$jscoverage['js/vs_core.js'][1126]++;
  function deleteBindings(list_bind) {
    _$jscoverage['js/vs_core.js'][1128]++;
    if ((! list_bind)) {
      _$jscoverage['js/vs_core.js'][1128]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][1130]++;
    var bind, l = list_bind.length;
    _$jscoverage['js/vs_core.js'][1131]++;
    while ((l--)) {
      _$jscoverage['js/vs_core.js'][1133]++;
      bind = list_bind[l];
      _$jscoverage['js/vs_core.js'][1134]++;
      util.free(bind);
}
}
  _$jscoverage['js/vs_core.js'][1136]++;
  ;
  _$jscoverage['js/vs_core.js'][1138]++;
  for (var spec in this.__bindings__) {
    _$jscoverage['js/vs_core.js'][1140]++;
    deleteBindings(this.__bindings__[spec]);
    _$jscoverage['js/vs_core.js'][1141]++;
    (delete this.__bindings__[spec]);
}
  _$jscoverage['js/vs_core.js'][1144]++;
  (delete this.__bindings__);
}), bindChange: (function (spec, obj, func) {
  _$jscoverage['js/vs_core.js'][1173]++;
  if ((! obj)) {
    _$jscoverage['js/vs_core.js'][1173]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1174]++;
  var list_bind, handler;
  _$jscoverage['js/vs_core.js'][1176]++;
  spec = (spec || "change");
  _$jscoverage['js/vs_core.js'][1177]++;
  handler = new Handler(spec, obj, func, false);
  _$jscoverage['js/vs_core.js'][1179]++;
  list_bind = this.__bindings__[spec];
  _$jscoverage['js/vs_core.js'][1180]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1182]++;
    list_bind = [];
    _$jscoverage['js/vs_core.js'][1183]++;
    this.__bindings__[spec] = list_bind;
  }
  _$jscoverage['js/vs_core.js'][1185]++;
  list_bind.push(handler);
}), unbindChange: (function (spec, obj, func) {
  _$jscoverage['js/vs_core.js'][1203]++;
  if ((! spec)) {
    _$jscoverage['js/vs_core.js'][1203]++;
    spec = "change";
  }
  _$jscoverage['js/vs_core.js'][1205]++;
  function unbind(list_bind) {
    _$jscoverage['js/vs_core.js'][1207]++;
    if ((! list_bind)) {
      _$jscoverage['js/vs_core.js'][1207]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][1209]++;
    var bind, i = 0;
    _$jscoverage['js/vs_core.js'][1210]++;
    while ((i < list_bind.length)) {
      _$jscoverage['js/vs_core.js'][1212]++;
      bind = list_bind[i];
      _$jscoverage['js/vs_core.js'][1213]++;
      if ((bind.spec === spec)) {
        _$jscoverage['js/vs_core.js'][1215]++;
        if ((bind.obj === obj)) {
          _$jscoverage['js/vs_core.js'][1217]++;
          if ((util.isString(func) || util.isFunction(func))) {
            _$jscoverage['js/vs_core.js'][1219]++;
            if (((bind.func === func) || (bind.func_ptr === func))) {
              _$jscoverage['js/vs_core.js'][1221]++;
              list_bind.remove(i);
              _$jscoverage['js/vs_core.js'][1222]++;
              util.free(bind);
            }
            else {
              _$jscoverage['js/vs_core.js'][1224]++;
              (i++);
            }
          }
          else {
            _$jscoverage['js/vs_core.js'][1228]++;
            list_bind.remove(i);
            _$jscoverage['js/vs_core.js'][1229]++;
            util.free(bind);
          }
        }
        else {
          _$jscoverage['js/vs_core.js'][1232]++;
          (i++);
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][1234]++;
        (i++);
      }
}
}
  _$jscoverage['js/vs_core.js'][1236]++;
  ;
  _$jscoverage['js/vs_core.js'][1238]++;
  unbind(this.__bindings__[spec]);
}), stopPropagation: (function () {
  _$jscoverage['js/vs_core.js'][1255]++;
  this.__should_propagate_changes__ = false;
}), hasToPropagateChange: (function () {
  _$jscoverage['js/vs_core.js'][1270]++;
  return this.__should_propagate_changes__;
}), change: (function (spec, doNotManageLinks) {
  _$jscoverage['js/vs_core.js'][1288]++;
  var list_bind, event, handler;
  _$jscoverage['js/vs_core.js'][1290]++;
  this.__should_propagate_changes__ = true;
  _$jscoverage['js/vs_core.js'][1292]++;
  event = new Event(this, (spec || ("change:" + spec)));
  _$jscoverage['js/vs_core.js'][1294]++;
  try {
    _$jscoverage['js/vs_core.js'][1297]++;
    if ((! doNotManageLinks)) {
      _$jscoverage['js/vs_core.js'][1299]++;
      var l = this.__links__.length, obj;
      _$jscoverage['js/vs_core.js'][1300]++;
      while ((l--)) {
        _$jscoverage['js/vs_core.js'][1300]++;
        this.__links__[l].configure(this);
}
    }
    _$jscoverage['js/vs_core.js'][1304]++;
    function _change(list_bind) {
      _$jscoverage['js/vs_core.js'][1306]++;
      if ((! list_bind)) {
        _$jscoverage['js/vs_core.js'][1306]++;
        return;
      }
      _$jscoverage['js/vs_core.js'][1307]++;
      var i = list_bind.length, handler;
      _$jscoverage['js/vs_core.js'][1309]++;
      while ((i--)) {
        _$jscoverage['js/vs_core.js'][1312]++;
        handler = list_bind[i];
        _$jscoverage['js/vs_core.js'][1314]++;
        if (handler.func_ptr) {
          _$jscoverage['js/vs_core.js'][1316]++;
          handler.func_ptr.call(handler.obj, event);
        }
        else {
          _$jscoverage['js/vs_core.js'][1318]++;
          if (handler.func) {
            _$jscoverage['js/vs_core.js'][1320]++;
            (handler.obj[handler.func])(event);
          }
          else {
            _$jscoverage['js/vs_core.js'][1324]++;
            handler.obj.notify(event);
          }
        }
}
}
    _$jscoverage['js/vs_core.js'][1327]++;
    ;
    _$jscoverage['js/vs_core.js'][1329]++;
    if ((spec && (spec != "change"))) {
      _$jscoverage['js/vs_core.js'][1329]++;
      _change(this.__bindings__[spec]);
    }
    _$jscoverage['js/vs_core.js'][1330]++;
    _change(this.__bindings__.change);
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1334]++;
    console.error(e);
  }
}), linkTo: (function (obj) {
  _$jscoverage['js/vs_core.js'][1348]++;
  if ((obj instanceof vs.core.Object)) {
    _$jscoverage['js/vs_core.js'][1350]++;
    if ((this.__links__.indexOf(obj) === -1)) {
      _$jscoverage['js/vs_core.js'][1351]++;
      this.__links__.push(obj);
    }
  }
}), unlinkTo: (function (obj) {
  _$jscoverage['js/vs_core.js'][1365]++;
  if ((obj instanceof vs.core.Object)) {
    _$jscoverage['js/vs_core.js'][1367]++;
    this.__links__.remove(obj);
  }
}), propertyChange: (function (property) {
  _$jscoverage['js/vs_core.js'][1384]++;
  var df = _df_node_to_def[this._id];
  _$jscoverage['js/vs_core.js'][1385]++;
  if (df) {
    _$jscoverage['js/vs_core.js'][1385]++;
    df.propagate(this._id, property);
  }
  _$jscoverage['js/vs_core.js'][1387]++;
  if (this.__should_propagate_changes__) {
    _$jscoverage['js/vs_core.js'][1389]++;
    var l = this.__links__.length, obj;
    _$jscoverage['js/vs_core.js'][1390]++;
    if (property) {
      _$jscoverage['js/vs_core.js'][1390]++;
      while ((l--)) {
        _$jscoverage['js/vs_core.js'][1391]++;
        this.__links__[l][property] = this[property];
}
    }
    else {
      _$jscoverage['js/vs_core.js'][1392]++;
      while ((l--)) {
        _$jscoverage['js/vs_core.js'][1392]++;
        this.__links__[l].configure(this);
}
    }
    _$jscoverage['js/vs_core.js'][1394]++;
    this.change(null, true);
  }
})};
  _$jscoverage['js/vs_core.js'][1398]++;
  util.extendClass(Model, core.Object);
  _$jscoverage['js/vs_core.js'][1404]++;
  core.Model = Model;
  _$jscoverage['js/vs_core.js'][1426]++;
  FORCE_EVENT_PROPAGATION_DELAY = false;
  _$jscoverage['js/vs_core.js'][1432]++;
  EVENT_SUPPORT_TOUCH = ("createTouch" in document);
  _$jscoverage['js/vs_core.js'][1433]++;
  if ((! EVENT_SUPPORT_TOUCH)) {
    _$jscoverage['js/vs_core.js'][1435]++;
    if (((window.navigator.userAgent.indexOf("Android") !== -1) || (window.navigator.userAgent.indexOf("BlackBerry") !== -1))) {
      _$jscoverage['js/vs_core.js'][1437]++;
      EVENT_SUPPORT_TOUCH = true;
    }
  }
  _$jscoverage['js/vs_core.js'][1447]++;
  core.POINTER_START;
  _$jscoverage['js/vs_core.js'][1455]++;
  core.POINTER_MOVE;
  _$jscoverage['js/vs_core.js'][1463]++;
  core.POINTER_END;
  _$jscoverage['js/vs_core.js'][1471]++;
  core.POINTER_CANCEL;
  _$jscoverage['js/vs_core.js'][1473]++;
  if (EVENT_SUPPORT_TOUCH) {
    _$jscoverage['js/vs_core.js'][1475]++;
    core.POINTER_START = "touchstart";
    _$jscoverage['js/vs_core.js'][1476]++;
    core.POINTER_MOVE = "touchmove";
    _$jscoverage['js/vs_core.js'][1477]++;
    core.POINTER_END = "touchend";
    _$jscoverage['js/vs_core.js'][1478]++;
    core.POINTER_CANCEL = "touchcancel";
  }
  else {
    _$jscoverage['js/vs_core.js'][1482]++;
    core.POINTER_START = "mousedown";
    _$jscoverage['js/vs_core.js'][1483]++;
    core.POINTER_MOVE = "mousemove";
    _$jscoverage['js/vs_core.js'][1484]++;
    core.POINTER_END = "mouseup";
    _$jscoverage['js/vs_core.js'][1485]++;
    core.POINTER_CANCEL = "mouseup";
  }
  _$jscoverage['js/vs_core.js'][1511]++;
  var Event = (function (src, type, data) {
  _$jscoverage['js/vs_core.js'][1513]++;
  this.src = src;
  _$jscoverage['js/vs_core.js'][1514]++;
  this.srcTarget = src;
  _$jscoverage['js/vs_core.js'][1515]++;
  this.type = type;
  _$jscoverage['js/vs_core.js'][1516]++;
  this.data = data;
});
  _$jscoverage['js/vs_core.js'][1519]++;
  Event.prototype = {src: null, srcTarget: null, type: "", data: null, destructor: (function () {
  _$jscoverage['js/vs_core.js'][1558]++;
  (delete this.src);
  _$jscoverage['js/vs_core.js'][1559]++;
  (delete this.srcTarget);
  _$jscoverage['js/vs_core.js'][1560]++;
  (delete this.type);
  _$jscoverage['js/vs_core.js'][1561]++;
  (delete this.data);
})};
  _$jscoverage['js/vs_core.js'][1569]++;
  core.Event = Event;
  _$jscoverage['js/vs_core.js'][1570]++;
  core.FORCE_EVENT_PROPAGATION_DELAY = FORCE_EVENT_PROPAGATION_DELAY;
  _$jscoverage['js/vs_core.js'][1571]++;
  core.EVENT_SUPPORT_TOUCH = EVENT_SUPPORT_TOUCH;
  _$jscoverage['js/vs_core.js'][1594]++;
  function Handler(_spec, _obj, _func, _delay) {
    _$jscoverage['js/vs_core.js'][1596]++;
    this.spec = _spec;
    _$jscoverage['js/vs_core.js'][1597]++;
    this.obj = _obj;
    _$jscoverage['js/vs_core.js'][1598]++;
    this.delay = (FORCE_EVENT_PROPAGATION_DELAY? true: _delay);
    _$jscoverage['js/vs_core.js'][1599]++;
    if (util.isFunction(_func)) {
      _$jscoverage['js/vs_core.js'][1601]++;
      this.func_ptr = _func;
    }
    else {
      _$jscoverage['js/vs_core.js'][1605]++;
      this.func = _func;
    }
}
  _$jscoverage['js/vs_core.js'][1612]++;
  Handler.prototype.destructor = (function () {
  _$jscoverage['js/vs_core.js'][1614]++;
  (delete this.spec);
  _$jscoverage['js/vs_core.js'][1615]++;
  (delete this.obj);
  _$jscoverage['js/vs_core.js'][1616]++;
  (delete this.delay);
  _$jscoverage['js/vs_core.js'][1617]++;
  (delete this.func_ptr);
  _$jscoverage['js/vs_core.js'][1618]++;
  (delete this.func);
});
  _$jscoverage['js/vs_core.js'][1636]++;
  function EventSource(config) {
    _$jscoverage['js/vs_core.js'][1638]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][1639]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][1640]++;
    this.constructor = core.EventSource;
    _$jscoverage['js/vs_core.js'][1642]++;
    this.__bindings__ = {};
    _$jscoverage['js/vs_core.js'][1643]++;
    this.__node_binds__ = {};
}
  _$jscoverage['js/vs_core.js'][1647]++;
  EventSource.prototype = {__bindings__: null, __node_binds__: null, destructor: (function () {
  _$jscoverage['js/vs_core.js'][1671]++;
  var spec, list_bind, i, handler, binds;
  _$jscoverage['js/vs_core.js'][1673]++;
  for (spec in this.__bindings__) {
    _$jscoverage['js/vs_core.js'][1675]++;
    list_bind = this.__bindings__[spec];
    _$jscoverage['js/vs_core.js'][1676]++;
    if ((! list_bind)) {
      _$jscoverage['js/vs_core.js'][1676]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][1677]++;
    while (list_bind.length) {
      _$jscoverage['js/vs_core.js'][1679]++;
      handler = list_bind.pop();
      _$jscoverage['js/vs_core.js'][1680]++;
      util.free(handler);
}
    _$jscoverage['js/vs_core.js'][1682]++;
    (delete this.__bindings__[spec]);
}
  _$jscoverage['js/vs_core.js'][1685]++;
  (delete this.__bindings__);
  _$jscoverage['js/vs_core.js'][1687]++;
  for (spec in this.__node_binds__) {
    _$jscoverage['js/vs_core.js'][1689]++;
    binds = this.__node_binds__[spec];
    _$jscoverage['js/vs_core.js'][1690]++;
    if (((typeof binds) === "undefined")) {
      _$jscoverage['js/vs_core.js'][1692]++;
      console.warn(("vs.core.Object.destructor, no bind <" + spec + " exists."));
      _$jscoverage['js/vs_core.js'][1694]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][1696]++;
    for (i = 0; (i < binds.length); (i++)) {
      _$jscoverage['js/vs_core.js'][1698]++;
      data = binds[i];
      _$jscoverage['js/vs_core.js'][1699]++;
      data.n.removeEventListener(event, data.h);
}
}
  _$jscoverage['js/vs_core.js'][1702]++;
  (delete this.__node_binds__);
}), _clone: (function (obj, cloned_map) {
  _$jscoverage['js/vs_core.js'][1715]++;
  VSObject.prototype._clone.call(this, obj, cloned_map);
  _$jscoverage['js/vs_core.js'][1717]++;
  obj.__bindings__ = {};
  _$jscoverage['js/vs_core.js'][1718]++;
  obj.__node_binds__ = {};
}), bind: (function (spec, obj, func, delay) {
  _$jscoverage['js/vs_core.js'][1748]++;
  if (((! spec) || (! obj))) {
    _$jscoverage['js/vs_core.js'][1748]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1751]++;
  var handler = new Handler(spec, obj, func, delay), list_bind = this.__bindings__[spec];
  _$jscoverage['js/vs_core.js'][1753]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1755]++;
    list_bind = [];
    _$jscoverage['js/vs_core.js'][1756]++;
    this.__bindings__[spec] = list_bind;
  }
  _$jscoverage['js/vs_core.js'][1758]++;
  list_bind.push(handler);
  _$jscoverage['js/vs_core.js'][1760]++;
  return handler;
}), unbind: (function (spec, obj, func) {
  _$jscoverage['js/vs_core.js'][1778]++;
  var list_bind = this.__bindings__[spec], i = 0, bind;
  _$jscoverage['js/vs_core.js'][1779]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1779]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1781]++;
  while ((i < list_bind.length)) {
    _$jscoverage['js/vs_core.js'][1783]++;
    bind = list_bind[i];
    _$jscoverage['js/vs_core.js'][1784]++;
    if ((bind.spec === spec)) {
      _$jscoverage['js/vs_core.js'][1786]++;
      if ((bind.obj === obj)) {
        _$jscoverage['js/vs_core.js'][1788]++;
        if ((util.isString(func) || util.isFunction(func))) {
          _$jscoverage['js/vs_core.js'][1790]++;
          if (((bind.func === func) || (bind.func_ptr === func))) {
            _$jscoverage['js/vs_core.js'][1792]++;
            list_bind.remove(i);
            _$jscoverage['js/vs_core.js'][1793]++;
            util.free(bind);
          }
          else {
            _$jscoverage['js/vs_core.js'][1795]++;
            (i++);
          }
        }
        else {
          _$jscoverage['js/vs_core.js'][1799]++;
          list_bind.remove(i);
          _$jscoverage['js/vs_core.js'][1800]++;
          util.free(bind);
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][1803]++;
        (i++);
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][1805]++;
      (i++);
    }
}
}), propagate: (function (type, data, srcTarget, delay) {
  _$jscoverage['js/vs_core.js'][1827]++;
  var list_bind = this.__bindings__[type], event, i, handler, func;
  _$jscoverage['js/vs_core.js'][1828]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1830]++;
    if (this.__parent) {
      _$jscoverage['js/vs_core.js'][1832]++;
      if ((! srcTarget)) {
        _$jscoverage['js/vs_core.js'][1832]++;
        srcTarget = this;
      }
      _$jscoverage['js/vs_core.js'][1833]++;
      this.__parent.propagate(type, data, srcTarget);
    }
    _$jscoverage['js/vs_core.js'][1835]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1837]++;
  event = new Event(this, type, data);
  _$jscoverage['js/vs_core.js'][1838]++;
  if (srcTarget) {
    _$jscoverage['js/vs_core.js'][1838]++;
    event.srcTarget = srcTarget;
  }
  _$jscoverage['js/vs_core.js'][1840]++;
  i = list_bind.length;
  _$jscoverage['js/vs_core.js'][1841]++;
  try {
    _$jscoverage['js/vs_core.js'][1843]++;
    func = (function () {
  _$jscoverage['js/vs_core.js'][1845]++;
  if (handler.func_ptr) {
    _$jscoverage['js/vs_core.js'][1848]++;
    handler.func_ptr.call(handler.obj, event);
  }
  else {
    _$jscoverage['js/vs_core.js'][1850]++;
    if (handler.func) {
      _$jscoverage['js/vs_core.js'][1852]++;
      (handler.obj[handler.func])(event);
    }
    else {
      _$jscoverage['js/vs_core.js'][1856]++;
      handler.obj.notify(event);
    }
  }
});
    _$jscoverage['js/vs_core.js'][1860]++;
    while ((i--)) {
      _$jscoverage['js/vs_core.js'][1863]++;
      handler = list_bind[i];
      _$jscoverage['js/vs_core.js'][1865]++;
      if ((delay || handler.delay)) {
        _$jscoverage['js/vs_core.js'][1865]++;
        window.setTimeout(func, 0);
      }
      else {
        _$jscoverage['js/vs_core.js'][1866]++;
        func.call(this);
      }
}
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1871]++;
    console.error(e);
  }
}), notify: (function (event) {
  _$jscoverage['js/vs_core.js'][1886]++;
  this.propagate(event.type, event.data);
}), nodeBind: (function (node, event, func_s, modifiers) {
  _$jscoverage['js/vs_core.js'][1905]++;
  if ((! node)) {
    _$jscoverage['js/vs_core.js'][1905]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1906]++;
  if ((! util.isString(event))) {
    _$jscoverage['js/vs_core.js'][1906]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1908]++;
  var self = this, func = null, handler = null, binds, key;
  _$jscoverage['js/vs_core.js'][1910]++;
  if (((typeof func_s) === "undefined")) {
    _$jscoverage['js/vs_core.js'][1910]++;
    func_s = "notify";
  }
  else {
    _$jscoverage['js/vs_core.js'][1911]++;
    if (util.isString(func_s)) {
      _$jscoverage['js/vs_core.js'][1913]++;
      if ((! util.isFunction(this[func_s]))) {
        _$jscoverage['js/vs_core.js'][1915]++;
        console.warn(("vs.core.Object.nodeBind, unknown function named: " + func_s));
        _$jscoverage['js/vs_core.js'][1917]++;
        return;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][1920]++;
      if ((! util.isFunction(func_s))) {
        _$jscoverage['js/vs_core.js'][1922]++;
        console.error("vs.core.Object.nodeBind, invalid func parameter");
        _$jscoverage['js/vs_core.js'][1923]++;
        return;
      }
      else {
        _$jscoverage['js/vs_core.js'][1927]++;
        func = func_s;
        _$jscoverage['js/vs_core.js'][1928]++;
        func_s = func.name;
      }
    }
  }
  _$jscoverage['js/vs_core.js'][1931]++;
  if (((! modifiers) || (modifiers === KEYBOARD.ANY_MASK))) {
    _$jscoverage['js/vs_core.js'][1936]++;
    handler = (function (event) {
  _$jscoverage['js/vs_core.js'][1941]++;
  try {
    _$jscoverage['js/vs_core.js'][1943]++;
    event.src = event.currentTarget;
    _$jscoverage['js/vs_core.js'][1944]++;
    event.data = event;
    _$jscoverage['js/vs_core.js'][1946]++;
    if ((! func)) {
      _$jscoverage['js/vs_core.js'][1946]++;
      func = self[func_s];
    }
    _$jscoverage['js/vs_core.js'][1947]++;
    func.call(self, event);
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1951]++;
    console.error(e);
  }
});
  }
  else {
    _$jscoverage['js/vs_core.js'][1957]++;
    handler = (function (event) {
  _$jscoverage['js/vs_core.js'][1960]++;
  event.stopPropagation();
  _$jscoverage['js/vs_core.js'][1962]++;
  try {
    _$jscoverage['js/vs_core.js'][1964]++;
    if (((! modifiers) && (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey))) {
      _$jscoverage['js/vs_core.js'][1966]++;
      return;
    }
    else {
      _$jscoverage['js/vs_core.js'][1967]++;
      if (((modifiers === KEYBOARD.ALT) && (! event.altKey))) {
        _$jscoverage['js/vs_core.js'][1968]++;
        return;
      }
      else {
        _$jscoverage['js/vs_core.js'][1969]++;
        if (((modifiers === KEYBOARD.CTRL) && (! event.ctrlKey))) {
          _$jscoverage['js/vs_core.js'][1970]++;
          return;
        }
        else {
          _$jscoverage['js/vs_core.js'][1971]++;
          if (((modifiers === KEYBOARD.SHIFT) && (! event.shiftKey))) {
            _$jscoverage['js/vs_core.js'][1972]++;
            return;
          }
          else {
            _$jscoverage['js/vs_core.js'][1973]++;
            if (((modifiers === KEYBOARD.META) && (! event.metaKey))) {
              _$jscoverage['js/vs_core.js'][1974]++;
              return;
            }
          }
        }
      }
    }
    _$jscoverage['js/vs_core.js'][1975]++;
    event.src = event.currentTarget;
    _$jscoverage['js/vs_core.js'][1976]++;
    event.data = event;
    _$jscoverage['js/vs_core.js'][1978]++;
    if ((! func)) {
      _$jscoverage['js/vs_core.js'][1978]++;
      func = self[func_s];
    }
    _$jscoverage['js/vs_core.js'][1979]++;
    func.call(self, event);
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1983]++;
    console.error(e);
  }
});
  }
  _$jscoverage['js/vs_core.js'][1989]++;
  key = (event + func_s);
  _$jscoverage['js/vs_core.js'][1990]++;
  if ((! this.__node_binds__)) {
    _$jscoverage['js/vs_core.js'][1992]++;
    console.error("nodeBind impossible");
    _$jscoverage['js/vs_core.js'][1993]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1995]++;
  binds = this.__node_binds__[key];
  _$jscoverage['js/vs_core.js'][1996]++;
  if (((typeof binds) === "undefined")) {
    _$jscoverage['js/vs_core.js'][1998]++;
    binds = [];
    _$jscoverage['js/vs_core.js'][1999]++;
    this.__node_binds__[key] = binds;
  }
  _$jscoverage['js/vs_core.js'][2001]++;
  binds.push({n: node, h: handler});
  _$jscoverage['js/vs_core.js'][2004]++;
  node.addEventListener(event, handler, false);
}), nodeUnbind: (function (node, event, func_s) {
  _$jscoverage['js/vs_core.js'][2021]++;
  if ((! node)) {
    _$jscoverage['js/vs_core.js'][2021]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2022]++;
  if ((! util.isString(event))) {
    _$jscoverage['js/vs_core.js'][2022]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2024]++;
  var func = null, i, key, binds, data;
  _$jscoverage['js/vs_core.js'][2025]++;
  if (((typeof func_s) === "undefined")) {
    _$jscoverage['js/vs_core.js'][2025]++;
    func_s = "notify";
  }
  else {
    _$jscoverage['js/vs_core.js'][2026]++;
    if (util.isString(func_s)) {
      _$jscoverage['js/vs_core.js'][2028]++;
      if ((! util.isFunction(this[func_s]))) {
        _$jscoverage['js/vs_core.js'][2030]++;
        console.warn(("vs.core.Object.nodeUnbind, unknown function named: " + func_s));
        _$jscoverage['js/vs_core.js'][2031]++;
        return;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][2034]++;
      if ((! util.isFunction(func_s))) {
        _$jscoverage['js/vs_core.js'][2036]++;
        console.error("vs.core.Object.nodeBind, invalid func parameter");
        _$jscoverage['js/vs_core.js'][2037]++;
        return;
      }
      else {
        _$jscoverage['js/vs_core.js'][2041]++;
        func = func_s;
        _$jscoverage['js/vs_core.js'][2042]++;
        func_s = func.name;
      }
    }
  }
  _$jscoverage['js/vs_core.js'][2045]++;
  key = (event + func_s);
  _$jscoverage['js/vs_core.js'][2046]++;
  binds = this.__node_binds__[key];
  _$jscoverage['js/vs_core.js'][2047]++;
  if (((typeof binds) === "undefined")) {
    _$jscoverage['js/vs_core.js'][2049]++;
    console.warn(("vs.core.Object.nodeUnbind, no bind <" + event + "," + func_s + " exists."));
    _$jscoverage['js/vs_core.js'][2051]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2053]++;
  for (i = 0; (i < binds.length);) {
    _$jscoverage['js/vs_core.js'][2055]++;
    data = binds[i];
    _$jscoverage['js/vs_core.js'][2056]++;
    if ((data.n === node)) {
      _$jscoverage['js/vs_core.js'][2058]++;
      node.removeEventListener(event, data.h);
      _$jscoverage['js/vs_core.js'][2059]++;
      binds.remove(i);
    }
    else {
      _$jscoverage['js/vs_core.js'][2063]++;
      (i++);
    }
}
  _$jscoverage['js/vs_core.js'][2068]++;
  node._object_ = undefined;
})};
  _$jscoverage['js/vs_core.js'][2159]++;
  util.extendClass(EventSource, VSObject);
  _$jscoverage['js/vs_core.js'][2165]++;
  core.EventSource = EventSource;
  _$jscoverage['js/vs_core.js'][2219]++;
  var KEYBOARD = new EventSource("__KEYBOARD__");
  _$jscoverage['js/vs_core.js'][2224]++;
  KEYBOARD._handler_set_down = false;
  _$jscoverage['js/vs_core.js'][2229]++;
  KEYBOARD._handler_set_up = false;
  _$jscoverage['js/vs_core.js'][2255]++;
  function KEYBOARD_bind(keyCode, obj, func, prevent) {
    _$jscoverage['js/vs_core.js'][2257]++;
    var handler = EventSource.prototype.bind.call(this, keyCode, obj, func), self = this;
    _$jscoverage['js/vs_core.js'][2259]++;
    if (prevent) {
      _$jscoverage['js/vs_core.js'][2259]++;
      handler.prevent = true;
    }
    _$jscoverage['js/vs_core.js'][2260]++;
    if ((keyCode > KEYBOARD.KEY_UP)) {
      _$jscoverage['js/vs_core.js'][2262]++;
      if ((! this._handler_set_up)) {
        _$jscoverage['js/vs_core.js'][2264]++;
        document.documentElement.addEventListener("keyup", (function (event) {
  _$jscoverage['js/vs_core.js'][2267]++;
  self.managePrevent(event.keyCode, event);
  _$jscoverage['js/vs_core.js'][2268]++;
  self.propagate((event.keyCode + KEYBOARD.KEY_UP), event);
}), false);
        _$jscoverage['js/vs_core.js'][2270]++;
        this._handler_set_up = true;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][2275]++;
      if ((! this._handler_set_down)) {
        _$jscoverage['js/vs_core.js'][2277]++;
        document.documentElement.addEventListener("keydown", (function (event) {
  _$jscoverage['js/vs_core.js'][2280]++;
  if (((event.ctrlKey || event.metaKey) && (! event.shiftKey) && (event.keyCode === KEYBOARD.Z))) {
    _$jscoverage['js/vs_core.js'][2283]++;
    self.propagate(KEYBOARD.UNDO);
    _$jscoverage['js/vs_core.js'][2284]++;
    event.preventDefault();
  }
  else {
    _$jscoverage['js/vs_core.js'][2286]++;
    if (((event.ctrlKey || event.metaKey) && event.shiftKey && (event.keyCode === KEYBOARD.Z))) {
      _$jscoverage['js/vs_core.js'][2289]++;
      self.propagate(KEYBOARD.REDO);
      _$jscoverage['js/vs_core.js'][2290]++;
      event.preventDefault();
    }
    else {
      _$jscoverage['js/vs_core.js'][2292]++;
      if (((event.ctrlKey || event.metaKey) && (! event.shiftKey) && (event.keyCode === KEYBOARD.S))) {
        _$jscoverage['js/vs_core.js'][2294]++;
        self.propagate(KEYBOARD.SAVE);
        _$jscoverage['js/vs_core.js'][2295]++;
        event.preventDefault();
      }
      else {
        _$jscoverage['js/vs_core.js'][2297]++;
        if (((event.ctrlKey || event.metaKey) && (! event.shiftKey) && event.keyCode)) {
          _$jscoverage['js/vs_core.js'][2299]++;
          self.managePrevent((KEYBOARD.META + event.keyCode), event);
          _$jscoverage['js/vs_core.js'][2300]++;
          self.propagate((KEYBOARD.META + event.keyCode));
        }
        else {
          _$jscoverage['js/vs_core.js'][2305]++;
          self.managePrevent(event.keyCode, event);
          _$jscoverage['js/vs_core.js'][2306]++;
          self.propagate(event.keyCode, event);
        }
      }
    }
  }
}), false);
        _$jscoverage['js/vs_core.js'][2309]++;
        this._handler_set_down = true;
      }
    }
}
  _$jscoverage['js/vs_core.js'][2312]++;
  ;
  _$jscoverage['js/vs_core.js'][2317]++;
  KEYBOARD.managePrevent = (function (type, event) {
  _$jscoverage['js/vs_core.js'][2319]++;
  var list_bind = this.__bindings__[type], i, handler;
  _$jscoverage['js/vs_core.js'][2320]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][2320]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2322]++;
  for (i = 0; (i < list_bind.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2324]++;
    handler = list_bind[i];
    _$jscoverage['js/vs_core.js'][2325]++;
    if (handler.prevent) {
      _$jscoverage['js/vs_core.js'][2327]++;
      event.preventDefault();
      _$jscoverage['js/vs_core.js'][2328]++;
      return;
    }
}
});
  _$jscoverage['js/vs_core.js'][2333]++;
  KEYBOARD.KEY_UP = 1000;
  _$jscoverage['js/vs_core.js'][2334]++;
  KEYBOARD.ESC = 27;
  _$jscoverage['js/vs_core.js'][2335]++;
  KEYBOARD.ENTER = 13;
  _$jscoverage['js/vs_core.js'][2336]++;
  KEYBOARD.SPACE = 32;
  _$jscoverage['js/vs_core.js'][2337]++;
  KEYBOARD.BACKSPACE = 8;
  _$jscoverage['js/vs_core.js'][2338]++;
  KEYBOARD.SHIFT = 16;
  _$jscoverage['js/vs_core.js'][2339]++;
  KEYBOARD.CTRL = 17;
  _$jscoverage['js/vs_core.js'][2340]++;
  KEYBOARD.ALT = 18;
  _$jscoverage['js/vs_core.js'][2341]++;
  KEYBOARD.NUMLOCK = 144;
  _$jscoverage['js/vs_core.js'][2343]++;
  KEYBOARD.LEFT_ARROW = 37;
  _$jscoverage['js/vs_core.js'][2344]++;
  KEYBOARD.UP_ARROW = 38;
  _$jscoverage['js/vs_core.js'][2345]++;
  KEYBOARD.RIGHT_ARROW = 39;
  _$jscoverage['js/vs_core.js'][2346]++;
  KEYBOARD.DOWN_ARROW = 40;
  _$jscoverage['js/vs_core.js'][2348]++;
  KEYBOARD.L = 76;
  _$jscoverage['js/vs_core.js'][2349]++;
  KEYBOARD.S = 83;
  _$jscoverage['js/vs_core.js'][2350]++;
  KEYBOARD.Z = 90;
  _$jscoverage['js/vs_core.js'][2353]++;
  KEYBOARD.META = 2000;
  _$jscoverage['js/vs_core.js'][2354]++;
  KEYBOARD.ANY_MASK = 3000;
  _$jscoverage['js/vs_core.js'][2356]++;
  KEYBOARD.UNDO = 256;
  _$jscoverage['js/vs_core.js'][2357]++;
  KEYBOARD.REDO = 257;
  _$jscoverage['js/vs_core.js'][2358]++;
  KEYBOARD.SAVE = 258;
  _$jscoverage['js/vs_core.js'][2363]++;
  core.KEYBOARD = KEYBOARD;
  _$jscoverage['js/vs_core.js'][2364]++;
  core.KEYBOARD.bind = KEYBOARD_bind;
  _$jscoverage['js/vs_core.js'][2466]++;
  var Fsm = (function (owner) {
  _$jscoverage['js/vs_core.js'][2468]++;
  this.parent = core.EventSource;
  _$jscoverage['js/vs_core.js'][2469]++;
  this.parent(createId());
  _$jscoverage['js/vs_core.js'][2470]++;
  this.constructor = Fsm;
  _$jscoverage['js/vs_core.js'][2472]++;
  this.owner = owner;
  _$jscoverage['js/vs_core.js'][2474]++;
  this._list_of_state = {};
  _$jscoverage['js/vs_core.js'][2475]++;
  this._list_input = new Array();
  _$jscoverage['js/vs_core.js'][2476]++;
  this._list_output = new Array();
  _$jscoverage['js/vs_core.js'][2478]++;
  this._initial_state = "";
  _$jscoverage['js/vs_core.js'][2479]++;
  this._current_state = "";
  _$jscoverage['js/vs_core.js'][2481]++;
  this._inputs = {};
  _$jscoverage['js/vs_core.js'][2482]++;
  this._output_action = {};
});
  _$jscoverage['js/vs_core.js'][2485]++;
  Fsm.prototype = {destructor: (function () {
  _$jscoverage['js/vs_core.js'][2493]++;
  (delete this._list_of_state);
  _$jscoverage['js/vs_core.js'][2495]++;
  this.owner = undefined;
  _$jscoverage['js/vs_core.js'][2497]++;
  (delete this._list_of_state);
  _$jscoverage['js/vs_core.js'][2498]++;
  (delete this._list_input);
  _$jscoverage['js/vs_core.js'][2499]++;
  (delete this._list_output);
  _$jscoverage['js/vs_core.js'][2500]++;
  (delete this._inputs);
  _$jscoverage['js/vs_core.js'][2501]++;
  (delete this._output_action);
}), _clone: (function (obj, cloned_map) {
  _$jscoverage['js/vs_core.js'][2517]++;
  EventSource.prototype._clone.call(this, obj, cloned_map);
  _$jscoverage['js/vs_core.js'][2519]++;
  obj.owner = obj.__config__.owner;
  _$jscoverage['js/vs_core.js'][2520]++;
  obj._current_state = "";
  _$jscoverage['js/vs_core.js'][2522]++;
  obj._inputs = {};
  _$jscoverage['js/vs_core.js'][2523]++;
  obj._output_action = {};
}), initWithData: (function (states, inputs, outputs, transitions) {
  _$jscoverage['js/vs_core.js'][2543]++;
  if (((! states) || (! inputs) || (! outputs) || (! transitions))) {
    _$jscoverage['js/vs_core.js'][2543]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2545]++;
  for (var i = 0; (i < states.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2546]++;
    this.addState(states[i]);
}
  _$jscoverage['js/vs_core.js'][2548]++;
  for (var i = 0; (i < inputs.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2549]++;
    this.addInput(inputs[i]);
}
  _$jscoverage['js/vs_core.js'][2551]++;
  for (var i = 0; (i < outputs.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2552]++;
    this.addOutput(outputs[i]);
}
  _$jscoverage['js/vs_core.js'][2554]++;
  for (var i = 0; (i < transitions.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2556]++;
    this.addTransition(transitions[i].from, transitions[i].to, transitions[i].on, transitions[i].output);
}
}), initWithMatrix: (function (matrix) {
  _$jscoverage['js/vs_core.js'][2595]++;
  for (var i = 1; (i < matrix[0].length); (i++)) {
    _$jscoverage['js/vs_core.js'][2596]++;
    this.addState(matrix[0][i]);
}
  _$jscoverage['js/vs_core.js'][2599]++;
  for (var i = 1; (i < matrix.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2601]++;
    var from = matrix[i][0];
    _$jscoverage['js/vs_core.js'][2603]++;
    for (var j = 1; (j < matrix[0].length); (j++)) {
      _$jscoverage['js/vs_core.js'][2605]++;
      var to = matrix[0][j];
      _$jscoverage['js/vs_core.js'][2606]++;
      var i_o = matrix[i][j];
      _$jscoverage['js/vs_core.js'][2607]++;
      if (i_o) {
        _$jscoverage['js/vs_core.js'][2609]++;
        var io_a = i_o.split("/");
        _$jscoverage['js/vs_core.js'][2610]++;
        if (io_a[0]) {
          _$jscoverage['js/vs_core.js'][2610]++;
          this.addInput(io_a[0]);
        }
        _$jscoverage['js/vs_core.js'][2611]++;
        if (io_a[1]) {
          _$jscoverage['js/vs_core.js'][2611]++;
          this.addOutput(io_a[1]);
        }
        _$jscoverage['js/vs_core.js'][2613]++;
        this.addTransition(from, to, io_a[0], io_a[1]);
      }
}
}
}), addInput: (function (input) {
  _$jscoverage['js/vs_core.js'][2634]++;
  if (((! input) || this.existInput(input))) {
    _$jscoverage['js/vs_core.js'][2634]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2636]++;
  this._list_input.push(input);
}), getInputs: (function () {
  _$jscoverage['js/vs_core.js'][2649]++;
  return this._list_input.slice();
}), existInput: (function (input) {
  _$jscoverage['js/vs_core.js'][2663]++;
  if ((! input)) {
    _$jscoverage['js/vs_core.js'][2663]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2665]++;
  return (this._list_input.findItem(input) > -1);
}), addOutput: (function (output) {
  _$jscoverage['js/vs_core.js'][2682]++;
  if (((! output) || this.existOutput(output))) {
    _$jscoverage['js/vs_core.js'][2682]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2684]++;
  this._list_output.push(output);
}), getOutputs: (function () {
  _$jscoverage['js/vs_core.js'][2697]++;
  return this._list_output.slice();
}), existOutput: (function (output) {
  _$jscoverage['js/vs_core.js'][2711]++;
  if ((! output)) {
    _$jscoverage['js/vs_core.js'][2711]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2713]++;
  return (this._list_output.findItem(output) > -1);
}), addState: (function (name) {
  _$jscoverage['js/vs_core.js'][2729]++;
  if (((! name) || this.existState(name))) {
    _$jscoverage['js/vs_core.js'][2729]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2731]++;
  var state = {};
  _$jscoverage['js/vs_core.js'][2732]++;
  state.transitionEvents = {};
  _$jscoverage['js/vs_core.js'][2734]++;
  this._list_of_state[name] = state;
  _$jscoverage['js/vs_core.js'][2735]++;
  return true;
}), removeState: (function (name) {
  _$jscoverage['js/vs_core.js'][2748]++;
  if (((! name) || (! this.existState(name)))) {
    _$jscoverage['js/vs_core.js'][2748]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2750]++;
  (delete this._list_of_state[name]);
  _$jscoverage['js/vs_core.js'][2751]++;
  return true;
}), renameState: (function (old_name, new_name) {
  _$jscoverage['js/vs_core.js'][2765]++;
  if (((! old_name) || (! this.existState(old_name)))) {
    _$jscoverage['js/vs_core.js'][2765]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2766]++;
  if (((! new_name) || this.existState(new_name))) {
    _$jscoverage['js/vs_core.js'][2766]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2769]++;
  this._list_of_state[new_name] = this._list_of_state[old_name];
  _$jscoverage['js/vs_core.js'][2770]++;
  (delete this._list_of_state[old_name]);
  _$jscoverage['js/vs_core.js'][2773]++;
  if ((this._initial_state === old_name)) {
    _$jscoverage['js/vs_core.js'][2775]++;
    this._initial_state = new_name;
  }
  _$jscoverage['js/vs_core.js'][2779]++;
  for (var state_id in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2781]++;
    var state = this._list_of_state[state_id];
    _$jscoverage['js/vs_core.js'][2782]++;
    if ((state === null)) {
      _$jscoverage['js/vs_core.js'][2782]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][2784]++;
    for (var input in state.transitionEvents) {
      _$jscoverage['js/vs_core.js'][2786]++;
      var t = state.transitionEvents[input];
      _$jscoverage['js/vs_core.js'][2788]++;
      if ((t.to === old_name)) {
        _$jscoverage['js/vs_core.js'][2790]++;
        t.to = new_name;
      }
}
}
  _$jscoverage['js/vs_core.js'][2795]++;
  return true;
}), getListState: (function () {
  _$jscoverage['js/vs_core.js'][2808]++;
  var result = [];
  _$jscoverage['js/vs_core.js'][2810]++;
  for (var key in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2812]++;
    result.push(key);
}
  _$jscoverage['js/vs_core.js'][2814]++;
  return result;
}), existState: (function (state) {
  _$jscoverage['js/vs_core.js'][2828]++;
  if ((! state)) {
    _$jscoverage['js/vs_core.js'][2828]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2830]++;
  if (this._list_of_state[state]) {
    _$jscoverage['js/vs_core.js'][2830]++;
    return true;
  }
  _$jscoverage['js/vs_core.js'][2831]++;
  return false;
}), addTransition: (function (from, to, on, output) {
  _$jscoverage['js/vs_core.js'][2850]++;
  if (((! from) || (! this.existState(from)))) {
    _$jscoverage['js/vs_core.js'][2850]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2851]++;
  if (((! to) || (! this.existState(to)))) {
    _$jscoverage['js/vs_core.js'][2851]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2852]++;
  if (((! on) || (! this.existInput(on)))) {
    _$jscoverage['js/vs_core.js'][2852]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2854]++;
  var transition = {on: on, to: to, output: output};
  _$jscoverage['js/vs_core.js'][2859]++;
  this._list_of_state[from].transitionEvents[on] = transition;
}), removeTransitionFrom: (function (from, on) {
  _$jscoverage['js/vs_core.js'][2873]++;
  if (((! from) || (! this.existState(from)))) {
    _$jscoverage['js/vs_core.js'][2873]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2874]++;
  if (((! on) || (! this.existInput(on)))) {
    _$jscoverage['js/vs_core.js'][2874]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2876]++;
  var state = this._list_of_state[from];
  _$jscoverage['js/vs_core.js'][2877]++;
  if (state.transitionEvents[on]) {
    _$jscoverage['js/vs_core.js'][2879]++;
    (delete state.transitionEvents[on]);
  }
}), removeTransitionTo: (function (to, on) {
  _$jscoverage['js/vs_core.js'][2894]++;
  if (((! to) || (! this.existState(to)))) {
    _$jscoverage['js/vs_core.js'][2894]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2895]++;
  if (((! on) || (! this.existInput(on)))) {
    _$jscoverage['js/vs_core.js'][2895]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2898]++;
  for (var from in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2900]++;
    var state = this._list_of_state[from];
    _$jscoverage['js/vs_core.js'][2901]++;
    var t = state.transitionEvents[on];
    _$jscoverage['js/vs_core.js'][2902]++;
    if (((! t) || (t.to !== to))) {
      _$jscoverage['js/vs_core.js'][2902]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][2904]++;
    (delete state.transitionEvents[on]);
}
}), getTransionsToState: (function (to) {
  _$jscoverage['js/vs_core.js'][2919]++;
  if ((! this.existState(to))) {
    _$jscoverage['js/vs_core.js'][2919]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2921]++;
  var result = [];
  _$jscoverage['js/vs_core.js'][2923]++;
  for (var state_id in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2925]++;
    var state = this._list_of_state[state_id];
    _$jscoverage['js/vs_core.js'][2926]++;
    if ((state === null)) {
      _$jscoverage['js/vs_core.js'][2926]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][2928]++;
    for (var input in state.transitionEvents) {
      _$jscoverage['js/vs_core.js'][2930]++;
      var t = state.transitionEvents[input];
      _$jscoverage['js/vs_core.js'][2932]++;
      if ((t.to !== to)) {
        _$jscoverage['js/vs_core.js'][2932]++;
        continue;
      }
      _$jscoverage['js/vs_core.js'][2934]++;
      var tt = util.clone(t);
      _$jscoverage['js/vs_core.js'][2935]++;
      tt.from = state_id;
      _$jscoverage['js/vs_core.js'][2936]++;
      result.push(tt);
}
}
  _$jscoverage['js/vs_core.js'][2940]++;
  return result;
}), getTransionsFromState: (function (from) {
  _$jscoverage['js/vs_core.js'][2954]++;
  if ((! this.existState(from))) {
    _$jscoverage['js/vs_core.js'][2954]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2956]++;
  var result = [];
  _$jscoverage['js/vs_core.js'][2958]++;
  var state = this._list_of_state[from];
  _$jscoverage['js/vs_core.js'][2959]++;
  if ((state === null)) {
    _$jscoverage['js/vs_core.js'][2959]++;
    return null;
  }
  _$jscoverage['js/vs_core.js'][2961]++;
  for (var inputs in state.transitionEvents) {
    _$jscoverage['js/vs_core.js'][2963]++;
    var t = state.transitionEvents[inputs];
    _$jscoverage['js/vs_core.js'][2965]++;
    var tt = util.clone(t);
    _$jscoverage['js/vs_core.js'][2966]++;
    tt.from = from;
    _$jscoverage['js/vs_core.js'][2967]++;
    result.push(tt);
}
  _$jscoverage['js/vs_core.js'][2970]++;
  return result;
}), switchStates: (function (state_id1, state_id2) {
  _$jscoverage['js/vs_core.js'][2987]++;
  if ((state_id1 === state_id2)) {
    _$jscoverage['js/vs_core.js'][2987]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2989]++;
  if (((! this.existState(state_id1)) || (! this.existState(state_id2)))) {
    _$jscoverage['js/vs_core.js'][2990]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2994]++;
  var t_to_state1 = this.getTransionsToState(state_id1);
  _$jscoverage['js/vs_core.js'][2995]++;
  var t_from_state1 = this.getTransionsFromState(state_id1);
  _$jscoverage['js/vs_core.js'][2996]++;
  var t_to_state2 = this.getTransionsToState(state_id2);
  _$jscoverage['js/vs_core.js'][2997]++;
  var t_from_state2 = this.getTransionsFromState(state_id2);
  _$jscoverage['js/vs_core.js'][3001]++;
  for (var i = 0; (i < t_to_state1.length);) {
    _$jscoverage['js/vs_core.js'][3003]++;
    var t = t_to_state1[i];
    _$jscoverage['js/vs_core.js'][3004]++;
    if ((t.from === state_id2)) {
      _$jscoverage['js/vs_core.js'][3004]++;
      t_to_state1.remove(t);
    }
    else {
      _$jscoverage['js/vs_core.js'][3005]++;
      (i++);
    }
}
  _$jscoverage['js/vs_core.js'][3007]++;
  for (var i = 0; (i < t_from_state1.length);) {
    _$jscoverage['js/vs_core.js'][3009]++;
    var t = t_from_state1[i];
    _$jscoverage['js/vs_core.js'][3010]++;
    if ((t.to === state_id2)) {
      _$jscoverage['js/vs_core.js'][3010]++;
      t_from_state1.remove(t);
    }
    else {
      _$jscoverage['js/vs_core.js'][3011]++;
      (i++);
    }
}
  _$jscoverage['js/vs_core.js'][3015]++;
  for (var i = 0; (i < t_to_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3017]++;
    var t = t_to_state1[i];
    _$jscoverage['js/vs_core.js'][3018]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][3020]++;
  for (var i = 0; (i < t_from_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3022]++;
    var t = t_from_state1[i];
    _$jscoverage['js/vs_core.js'][3023]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][3025]++;
  for (var i = 0; (i < t_to_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3027]++;
    var t = t_to_state2[i];
    _$jscoverage['js/vs_core.js'][3028]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][3030]++;
  for (var i = 0; (i < t_from_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3032]++;
    var t = t_from_state2[i];
    _$jscoverage['js/vs_core.js'][3033]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][3037]++;
  for (var i = 0; (i < t_to_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3039]++;
    var t = t_to_state1[i];
    _$jscoverage['js/vs_core.js'][3041]++;
    var from = ((t.from === state_id2)? state_id1: t.from);
    _$jscoverage['js/vs_core.js'][3042]++;
    this.addTransition(from, state_id2, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][3044]++;
  for (var i = 0; (i < t_from_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3046]++;
    var t = t_from_state1[i];
    _$jscoverage['js/vs_core.js'][3048]++;
    var to = ((t.from === state_id2)? state_id1: t.to);
    _$jscoverage['js/vs_core.js'][3049]++;
    this.addTransition(state_id2, to, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][3051]++;
  for (var i = 0; (i < t_to_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3053]++;
    var t = t_to_state2[i];
    _$jscoverage['js/vs_core.js'][3055]++;
    var from = ((t.from === state_id1)? state_id2: t.from);
    _$jscoverage['js/vs_core.js'][3056]++;
    this.addTransition(from, state_id1, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][3058]++;
  for (var i = 0; (i < t_from_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3060]++;
    var t = t_from_state2[i];
    _$jscoverage['js/vs_core.js'][3062]++;
    var to = ((t.to === state_id1)? state_id2: t.to);
    _$jscoverage['js/vs_core.js'][3063]++;
    this.addTransition(state_id1, to, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][3066]++;
  if ((this._initial_state === state_id1)) {
    _$jscoverage['js/vs_core.js'][3067]++;
    this._initial_state = state_id2;
  }
  else {
    _$jscoverage['js/vs_core.js'][3068]++;
    if ((this._initial_state === state_id2)) {
      _$jscoverage['js/vs_core.js'][3069]++;
      this._initial_state = state_id1;
    }
  }
}), setInput: (function (on, src, event_spec) {
  _$jscoverage['js/vs_core.js'][3094]++;
  if (((! on) || (! src) || (! event_spec))) {
    _$jscoverage['js/vs_core.js'][3094]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3096]++;
  if (src.bind) {
    _$jscoverage['js/vs_core.js'][3098]++;
    src.bind(event_spec, this);
  }
  else {
    _$jscoverage['js/vs_core.js'][3100]++;
    if (src.addEventListener) {
      _$jscoverage['js/vs_core.js'][3102]++;
      this.nodeBind(src, event_spec);
    }
    else {
      _$jscoverage['js/vs_core.js'][3104]++;
      return;
    }
  }
  _$jscoverage['js/vs_core.js'][3106]++;
  var a = this._inputs[src];
  _$jscoverage['js/vs_core.js'][3107]++;
  if ((! a)) {
    _$jscoverage['js/vs_core.js'][3109]++;
    a = [];
    _$jscoverage['js/vs_core.js'][3110]++;
    this._inputs[src] = a;
  }
  _$jscoverage['js/vs_core.js'][3112]++;
  a.push([event_spec, on, src]);
}), setOutput: (function (output, action) {
  _$jscoverage['js/vs_core.js'][3134]++;
  if (((! output) || (! action))) {
    _$jscoverage['js/vs_core.js'][3134]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3136]++;
  this._output_action[output] = action;
}), activate: (function () {
  _$jscoverage['js/vs_core.js'][3155]++;
  if (((! this._initial_state) || (! this._list_of_state[this._initial_state]))) {
    _$jscoverage['js/vs_core.js'][3156]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3158]++;
  this.goTo(this._initial_state);
  _$jscoverage['js/vs_core.js'][3159]++;
  return true;
}), goTo: (function (state_id, output, event) {
  _$jscoverage['js/vs_core.js'][3180]++;
  var state = undefined;
  _$jscoverage['js/vs_core.js'][3182]++;
  if ((! this.existState(state_id))) {
    _$jscoverage['js/vs_core.js'][3183]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3186]++;
  if (this._current_state) {
    _$jscoverage['js/vs_core.js'][3188]++;
    state = this._list_of_state[this._current_state];
  }
  _$jscoverage['js/vs_core.js'][3192]++;
  this._current_state = state_id;
  _$jscoverage['js/vs_core.js'][3194]++;
  if ((output && this._output_action[output])) {
    _$jscoverage['js/vs_core.js'][3196]++;
    var clb = this._output_action[output];
    _$jscoverage['js/vs_core.js'][3197]++;
    if ((clb instanceof Function)) {
      _$jscoverage['js/vs_core.js'][3199]++;
      clb.call(this.owner, event);
    }
    else {
      _$jscoverage['js/vs_core.js'][3201]++;
      if (util.isString(clb)) {
        _$jscoverage['js/vs_core.js'][3203]++;
        (this.owner[this._output_action[output]])(event);
      }
    }
  }
  _$jscoverage['js/vs_core.js'][3207]++;
  return true;
}), clear: (function () {
  _$jscoverage['js/vs_core.js'][3219]++;
  this._list_of_state = {};
  _$jscoverage['js/vs_core.js'][3221]++;
  (delete this._list_input);
  _$jscoverage['js/vs_core.js'][3222]++;
  (delete this._list_output);
  _$jscoverage['js/vs_core.js'][3224]++;
  this._list_input = new Array();
  _$jscoverage['js/vs_core.js'][3225]++;
  this._list_output = new Array();
  _$jscoverage['js/vs_core.js'][3227]++;
  this._initial_state = "";
  _$jscoverage['js/vs_core.js'][3230]++;
  for (var key in this._inputs) {
    _$jscoverage['js/vs_core.js'][3232]++;
    var a = this._inputs[key];
    _$jscoverage['js/vs_core.js'][3234]++;
    for (var i = 0; (i < a.length); (i++)) {
      _$jscoverage['js/vs_core.js'][3236]++;
      var src = a[i][2];
      _$jscoverage['js/vs_core.js'][3237]++;
      var event_spec = a[i][0];
      _$jscoverage['js/vs_core.js'][3238]++;
      if (src.bind) {
        _$jscoverage['js/vs_core.js'][3240]++;
        src.unbind(event_spec, this);
      }
      else {
        _$jscoverage['js/vs_core.js'][3242]++;
        if (src.addEventListener) {
          _$jscoverage['js/vs_core.js'][3244]++;
          this.nodeUnbind(src, event_spec);
        }
      }
}
}
  _$jscoverage['js/vs_core.js'][3249]++;
  this._current_state = "";
}), notify: (function (event) {
  _$jscoverage['js/vs_core.js'][3262]++;
  var a = this._inputs[event.src];
  _$jscoverage['js/vs_core.js'][3263]++;
  if ((! a)) {
    _$jscoverage['js/vs_core.js'][3263]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3265]++;
  for (var i = 0; (i < a.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3267]++;
    var spec = a[i][0], on = a[i][1];
    _$jscoverage['js/vs_core.js'][3268]++;
    if ((event.type !== spec)) {
      _$jscoverage['js/vs_core.js'][3268]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3270]++;
    if ((! this._list_of_state[this._current_state])) {
      _$jscoverage['js/vs_core.js'][3270]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3272]++;
    this.fsmNotify(on, event.data);
}
}), fsmNotify: (function (on, data, instant) {
  _$jscoverage['js/vs_core.js'][3287]++;
  if ((! this._list_of_state[this._current_state])) {
    _$jscoverage['js/vs_core.js'][3287]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3289]++;
  var transition = this._list_of_state[this._current_state].transitionEvents[on];
  _$jscoverage['js/vs_core.js'][3292]++;
  if ((! transition)) {
    _$jscoverage['js/vs_core.js'][3292]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3294]++;
  this.goTo(transition.to, transition.output, {on: on, data: data}, instant);
  _$jscoverage['js/vs_core.js'][3295]++;
  return true;
})};
  _$jscoverage['js/vs_core.js'][3298]++;
  util.extendClass(Fsm, EventSource);
  _$jscoverage['js/vs_core.js'][3304]++;
  util.defineClassProperty(Fsm, "initialState", {set: (function (state_id) {
  _$jscoverage['js/vs_core.js'][3314]++;
  if ((! state_id)) {
    _$jscoverage['js/vs_core.js'][3316]++;
    this._initial_state = undefined;
    _$jscoverage['js/vs_core.js'][3317]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3320]++;
  if ((! this.existState(state_id))) {
    _$jscoverage['js/vs_core.js'][3320]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3323]++;
  this._initial_state = state_id;
}), get: (function () {
  _$jscoverage['js/vs_core.js'][3331]++;
  return this._initial_state;
})});
  _$jscoverage['js/vs_core.js'][3341]++;
  core.Fsm = Fsm;
  _$jscoverage['js/vs_core.js'][3360]++;
  function DataFlow() {
    _$jscoverage['js/vs_core.js'][3362]++;
    this.dataflow_node = [];
    _$jscoverage['js/vs_core.js'][3363]++;
    this.dataflow_edges = {};
    _$jscoverage['js/vs_core.js'][3364]++;
    this.is_propagating = false;
    _$jscoverage['js/vs_core.js'][3365]++;
    this._node_link = {};
    _$jscoverage['js/vs_core.js'][3366]++;
    this.__shouldnt_propagate__ = 0;
}
  _$jscoverage['js/vs_core.js'][3369]++;
  DataFlow.prototype = {propagate_values: (function (id) {
  _$jscoverage['js/vs_core.js'][3373]++;
  var ids = this.dataflow_edges[id], k, j, obj, prop_in, prop_out, obj_next, connector;
  _$jscoverage['js/vs_core.js'][3375]++;
  if ((! ids)) {
    _$jscoverage['js/vs_core.js'][3375]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3377]++;
  obj = VSObject._obs[id];
  _$jscoverage['js/vs_core.js'][3379]++;
  for (k = 0; (k < ids.length); (k++)) {
    _$jscoverage['js/vs_core.js'][3381]++;
    obj_next = VSObject._obs[ids[k][0]];
    _$jscoverage['js/vs_core.js'][3382]++;
    if ((! obj_next)) {
      _$jscoverage['js/vs_core.js'][3382]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3384]++;
    connector = ids[k][2];
    _$jscoverage['js/vs_core.js'][3385]++;
    if (connector) {
      _$jscoverage['js/vs_core.js'][3388]++;
      for (j = 0; (j < connector.length); (j++)) {
        _$jscoverage['js/vs_core.js'][3390]++;
        prop_in = connector[j][0];
        _$jscoverage['js/vs_core.js'][3391]++;
        prop_out = connector[j][1];
        _$jscoverage['js/vs_core.js'][3393]++;
        var desc_in = obj.getPropertyDescriptor(prop_in);
        _$jscoverage['js/vs_core.js'][3394]++;
        var desc_out = obj_next.getPropertyDescriptor(prop_out);
        _$jscoverage['js/vs_core.js'][3396]++;
        if (((! desc_in) || (! desc_in.get))) {
          _$jscoverage['js/vs_core.js'][3398]++;
          prop_in = ("_" + util.underscore(prop_in));
          _$jscoverage['js/vs_core.js'][3399]++;
          if ((! obj.hasOwnProperty(prop_in))) {
            _$jscoverage['js/vs_core.js'][3401]++;
            continue;
          }
        }
        _$jscoverage['js/vs_core.js'][3404]++;
        if (((! desc_out) || (! desc_out.set))) {
          _$jscoverage['js/vs_core.js'][3406]++;
          prop_out = ("_" + util.underscore(prop_out));
          _$jscoverage['js/vs_core.js'][3407]++;
          if ((! obj_next.hasOwnProperty(prop_out))) {
            _$jscoverage['js/vs_core.js'][3409]++;
            continue;
          }
        }
        _$jscoverage['js/vs_core.js'][3413]++;
        obj_next[prop_out] = obj[prop_in];
}
      _$jscoverage['js/vs_core.js'][3416]++;
      obj_next.__should__call__has__changed__ = true;
    }
}
}), propagate: (function (_id) {
  _$jscoverage['js/vs_core.js'][3423]++;
  if ((this.is_propagating || this.__shouldnt_propagate__)) {
    _$jscoverage['js/vs_core.js'][3423]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3425]++;
  this.is_propagating = true;
  _$jscoverage['js/vs_core.js'][3427]++;
  var i = 0, obj;
  _$jscoverage['js/vs_core.js'][3428]++;
  if (_id) {
    _$jscoverage['js/vs_core.js'][3431]++;
    while (((i < this.dataflow_node.length) && (this.dataflow_node[i] !== _id))) {
      _$jscoverage['js/vs_core.js'][3432]++;
      (i++);
}
    _$jscoverage['js/vs_core.js'][3435]++;
    if ((i < (this.dataflow_node.length - 1))) {
      _$jscoverage['js/vs_core.js'][3437]++;
      this.propagate_values(_id);
      _$jscoverage['js/vs_core.js'][3438]++;
      (i++);
    }
  }
  _$jscoverage['js/vs_core.js'][3443]++;
  for (; (i < this.dataflow_node.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3445]++;
    obj = VSObject._obs[this.dataflow_node[i]];
    _$jscoverage['js/vs_core.js'][3446]++;
    if ((! obj)) {
      _$jscoverage['js/vs_core.js'][3446]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3448]++;
    if ((obj.__should__call__has__changed__ && obj.propertiesDidChange)) {
      _$jscoverage['js/vs_core.js'][3450]++;
      obj.propertiesDidChange();
      _$jscoverage['js/vs_core.js'][3451]++;
      obj.__should__call__has__changed__ = false;
    }
    _$jscoverage['js/vs_core.js'][3454]++;
    this.propagate_values(obj.id);
}
  _$jscoverage['js/vs_core.js'][3456]++;
  this.is_propagating = false;
}), build: (function () {
  _$jscoverage['js/vs_core.js'][3461]++;
  if (((! this._ref_node) || (! this._ref_edges))) {
    _$jscoverage['js/vs_core.js'][3461]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3463]++;
  var temp = [], i, ref, edges, edges_temp, edge, edge_temp;
  _$jscoverage['js/vs_core.js'][3464]++;
  for (i = 0; (i < this._ref_node.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3466]++;
    ref = this._ref_node[i];
    _$jscoverage['js/vs_core.js'][3467]++;
    if ((! this._node_link[ref])) {
      _$jscoverage['js/vs_core.js'][3470]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3473]++;
    temp.push(this._node_link[ref]);
}
  _$jscoverage['js/vs_core.js'][3475]++;
  this.dataflow_node = temp;
  _$jscoverage['js/vs_core.js'][3477]++;
  temp = {};
  _$jscoverage['js/vs_core.js'][3478]++;
  for (ref in this._ref_edges) {
    _$jscoverage['js/vs_core.js'][3480]++;
    if ((! this._node_link[ref])) {
      _$jscoverage['js/vs_core.js'][3483]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3486]++;
    edges = this._ref_edges[ref];
    _$jscoverage['js/vs_core.js'][3487]++;
    edges_temp = [];
    _$jscoverage['js/vs_core.js'][3488]++;
    for (i = 0; (i < edges.length); (i++)) {
      _$jscoverage['js/vs_core.js'][3490]++;
      edge = edges[i];
      _$jscoverage['js/vs_core.js'][3491]++;
      edge_temp = [3];
      _$jscoverage['js/vs_core.js'][3493]++;
      if ((! this._node_link[edge[0]])) {
        _$jscoverage['js/vs_core.js'][3496]++;
        continue;
      }
      _$jscoverage['js/vs_core.js'][3498]++;
      edge_temp[0] = this._node_link[edge[0]];
      _$jscoverage['js/vs_core.js'][3499]++;
      edge_temp[1] = edge[1];
      _$jscoverage['js/vs_core.js'][3500]++;
      edge_temp[2] = edge[2].slice();
      _$jscoverage['js/vs_core.js'][3502]++;
      edges_temp.push(edge_temp);
}
    _$jscoverage['js/vs_core.js'][3505]++;
    temp[this._node_link[ref]] = edges_temp;
}
  _$jscoverage['js/vs_core.js'][3507]++;
  this.dataflow_edges = temp;
}), register_ref_node: (function (data) {
  _$jscoverage['js/vs_core.js'][3512]++;
  if ((! data)) {
    _$jscoverage['js/vs_core.js'][3512]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3513]++;
  this._ref_node = data;
}), register_ref_edges: (function (data) {
  _$jscoverage['js/vs_core.js'][3518]++;
  if ((! data)) {
    _$jscoverage['js/vs_core.js'][3518]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3519]++;
  this._ref_edges = data;
}), pausePropagation: (function () {
  _$jscoverage['js/vs_core.js'][3527]++;
  (this.__shouldnt_propagate__++);
}), restartPropagation: (function () {
  _$jscoverage['js/vs_core.js'][3535]++;
  (this.__shouldnt_propagate__--);
  _$jscoverage['js/vs_core.js'][3536]++;
  if ((this.__shouldnt_propagate__ < 0)) {
    _$jscoverage['js/vs_core.js'][3536]++;
    this.__shouldnt_propagate__ = 0;
  }
})};
  _$jscoverage['js/vs_core.js'][3541]++;
  var _df_node_to_def = {};
  _$jscoverage['js/vs_core.js'][3543]++;
  function _df_node_register(df_id, ref, id) {
    _$jscoverage['js/vs_core.js'][3545]++;
    if (((! df_id) || (! ref) || (! id))) {
      _$jscoverage['js/vs_core.js'][3545]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3546]++;
    var df = _df_node_to_def[df_id];
    _$jscoverage['js/vs_core.js'][3547]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3547]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3549]++;
    df._node_link[ref] = id;
    _$jscoverage['js/vs_core.js'][3550]++;
    _df_node_to_def[id] = df;
}
  _$jscoverage['js/vs_core.js'][3552]++;
  window._df_node_register = _df_node_register;
  _$jscoverage['js/vs_core.js'][3554]++;
  function _df_create(id, ref) {
    _$jscoverage['js/vs_core.js'][3556]++;
    var df = new DataFlow();
    _$jscoverage['js/vs_core.js'][3558]++;
    df.ref = ref;
    _$jscoverage['js/vs_core.js'][3559]++;
    _df_node_to_def[id] = df;
    _$jscoverage['js/vs_core.js'][3561]++;
    return df;
}
  _$jscoverage['js/vs_core.js'][3563]++;
  window._df_create = _df_create;
  _$jscoverage['js/vs_core.js'][3565]++;
  function _df_register_ref_node(id, data) {
    _$jscoverage['js/vs_core.js'][3567]++;
    if (((! id) || (! data))) {
      _$jscoverage['js/vs_core.js'][3567]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3569]++;
    var df = _df_node_to_def[id];
    _$jscoverage['js/vs_core.js'][3570]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3570]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3572]++;
    df.register_ref_node(data);
}
  _$jscoverage['js/vs_core.js'][3574]++;
  window._df_register_ref_node = _df_register_ref_node;
  _$jscoverage['js/vs_core.js'][3576]++;
  function _df_register_ref_edges(id, data) {
    _$jscoverage['js/vs_core.js'][3578]++;
    if (((! id) || (! data))) {
      _$jscoverage['js/vs_core.js'][3578]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3580]++;
    var df = _df_node_to_def[id];
    _$jscoverage['js/vs_core.js'][3581]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3581]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3583]++;
    df.register_ref_edges(data);
}
  _$jscoverage['js/vs_core.js'][3585]++;
  window._df_register_ref_edges = _df_register_ref_edges;
  _$jscoverage['js/vs_core.js'][3587]++;
  function _df_build(id) {
    _$jscoverage['js/vs_core.js'][3589]++;
    if ((! id)) {
      _$jscoverage['js/vs_core.js'][3589]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3591]++;
    var df = _df_node_to_def[id];
    _$jscoverage['js/vs_core.js'][3592]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3592]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3594]++;
    df.build();
}
  _$jscoverage['js/vs_core.js'][3596]++;
  window._df_build = _df_build;
  _$jscoverage['js/vs_core.js'][3601]++;
  core.DataFlow = DataFlow;
  _$jscoverage['js/vs_core.js'][3656]++;
  function Task(conf) {
    _$jscoverage['js/vs_core.js'][3658]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][3659]++;
    this.parent(conf);
    _$jscoverage['js/vs_core.js'][3660]++;
    this.constructor = Task;
}
  _$jscoverage['js/vs_core.js'][3661]++;
  ;
  _$jscoverage['js/vs_core.js'][3668]++;
  Task.STARTED = 1;
  _$jscoverage['js/vs_core.js'][3675]++;
  Task.STOPPED = 0;
  _$jscoverage['js/vs_core.js'][3682]++;
  Task.PAUSED = 2;
  _$jscoverage['js/vs_core.js'][3684]++;
  Task.prototype = {delegate: null, _state: Task.STOPPED, start: (function (param) {
}), stop: (function () {
}), pause: (function () {
})};
  _$jscoverage['js/vs_core.js'][3751]++;
  util.extendClass(Task, core.Object);
  _$jscoverage['js/vs_core.js'][3757]++;
  util.defineClassProperty(Task, "state", {get: (function () {
  _$jscoverage['js/vs_core.js'][3770]++;
  return this._state;
})});
  _$jscoverage['js/vs_core.js'][3831]++;
  function Task_PAR(tasksAndParams) {
    _$jscoverage['js/vs_core.js'][3833]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][3834]++;
    this.parent();
    _$jscoverage['js/vs_core.js'][3835]++;
    this.constructor = Task_PAR;
    _$jscoverage['js/vs_core.js'][3837]++;
    this._tasksAndParams = [];
    _$jscoverage['js/vs_core.js'][3839]++;
    if (arguments.length) {
      _$jscoverage['js/vs_core.js'][3839]++;
      this.setTasks(arguments);
    }
}
  _$jscoverage['js/vs_core.js'][3840]++;
  ;
  _$jscoverage['js/vs_core.js'][3842]++;
  Task_PAR.prototype = {_tasksAndParams: null, _tasksWillEnded: null, setTasks: (function (tasksAndParams) {
  _$jscoverage['js/vs_core.js'][3874]++;
  if ((this._state !== Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][3874]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3875]++;
  var i, taskAndparam, task, param;
  _$jscoverage['js/vs_core.js'][3877]++;
  this._tasksAndParams = [];
  _$jscoverage['js/vs_core.js'][3878]++;
  for (i = 0; (i < tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3880]++;
    taskAndparam = tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3881]++;
    if ((! taskAndparam)) {
      _$jscoverage['js/vs_core.js'][3881]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3883]++;
    param = null;
    _$jscoverage['js/vs_core.js'][3883]++;
    task = null;
    _$jscoverage['js/vs_core.js'][3885]++;
    if (util.isArray(taskAndparam)) {
      _$jscoverage['js/vs_core.js'][3887]++;
      if ((taskAndparam.length === 1)) {
        _$jscoverage['js/vs_core.js'][3889]++;
        task = taskAndparam[0];
      }
      else {
        _$jscoverage['js/vs_core.js'][3891]++;
        if ((taskAndparam.length === 2)) {
          _$jscoverage['js/vs_core.js'][3893]++;
          task = taskAndparam[0];
          _$jscoverage['js/vs_core.js'][3894]++;
          param = taskAndparam[1];
        }
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][3899]++;
      task = taskAndparam;
      _$jscoverage['js/vs_core.js'][3900]++;
      param = null;
    }
    _$jscoverage['js/vs_core.js'][3903]++;
    if ((! task)) {
      _$jscoverage['js/vs_core.js'][3905]++;
      console.warn("Undefined task");
      _$jscoverage['js/vs_core.js'][3906]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3909]++;
    if (((! task.start) || (! task.stop) || (! task.pause))) {
      _$jscoverage['js/vs_core.js'][3911]++;
      console.warn(("Invalid task: " + task.toString()));
      _$jscoverage['js/vs_core.js'][3912]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3915]++;
    this._tasksAndParams.push([task, param]);
}
}), start: (function (param) {
  _$jscoverage['js/vs_core.js'][3929]++;
  if ((this._state === Task.STARTED)) {
    _$jscoverage['js/vs_core.js'][3929]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3930]++;
  this._tasksWillEnded = this._tasksAndParams.length;
  _$jscoverage['js/vs_core.js'][3931]++;
  this._state = Task.STARTED;
  _$jscoverage['js/vs_core.js'][3933]++;
  var taskAndparam, i;
  _$jscoverage['js/vs_core.js'][3934]++;
  for (i = 0; (i < this._tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3936]++;
    taskAndparam = this._tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3938]++;
    taskAndparam[0].delegate = this;
    _$jscoverage['js/vs_core.js'][3939]++;
    taskAndparam[0].start((taskAndparam[1]? taskAndparam[1]: param));
}
  _$jscoverage['js/vs_core.js'][3942]++;
  return true;
}), stop: (function () {
  _$jscoverage['js/vs_core.js'][3953]++;
  if ((this._state === Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][3953]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3954]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3956]++;
  var taskAndparam, i;
  _$jscoverage['js/vs_core.js'][3957]++;
  for (i = 0; (i < this._tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3959]++;
    taskAndparam = this._tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3960]++;
    taskAndparam[0].stop();
}
  _$jscoverage['js/vs_core.js'][3963]++;
  return true;
}), pause: (function () {
  _$jscoverage['js/vs_core.js'][3974]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][3974]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3975]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][3977]++;
  var taskAndparam, i;
  _$jscoverage['js/vs_core.js'][3978]++;
  for (i = 0; (i < this._tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3980]++;
    taskAndparam = this._tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3981]++;
    taskAndparam[0].pause();
}
  _$jscoverage['js/vs_core.js'][3984]++;
  return true;
}), taskDidStop: (function (task) {
  _$jscoverage['js/vs_core.js'][3997]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3999]++;
  (this._tasksWillEnded--);
  _$jscoverage['js/vs_core.js'][4000]++;
  if ((this._tasksWillEnded === 0)) {
    _$jscoverage['js/vs_core.js'][4002]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][4003]++;
      this.delegate.taskDidEnd(this);
    }
  }
}), taskDidPause: (function (task) {
  _$jscoverage['js/vs_core.js'][4013]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4015]++;
  (this._tasksWillEnded--);
  _$jscoverage['js/vs_core.js'][4016]++;
  if ((this._tasksWillEnded === 0)) {
    _$jscoverage['js/vs_core.js'][4018]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][4019]++;
      this.delegate.taskDidEnd(this);
    }
  }
}), taskDidEnd: (function (task) {
  _$jscoverage['js/vs_core.js'][4029]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4031]++;
  (this._tasksWillEnded--);
  _$jscoverage['js/vs_core.js'][4032]++;
  if ((this._tasksWillEnded === 0)) {
    _$jscoverage['js/vs_core.js'][4034]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][4035]++;
      this.delegate.taskDidEnd(this);
    }
  }
})};
  _$jscoverage['js/vs_core.js'][4039]++;
  util.extendClass(Task_PAR, core.Object);
  _$jscoverage['js/vs_core.js'][4098]++;
  function Task_SEQ(tasksAndParams) {
    _$jscoverage['js/vs_core.js'][4100]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][4101]++;
    this.parent();
    _$jscoverage['js/vs_core.js'][4102]++;
    this.constructor = Task_SEQ;
    _$jscoverage['js/vs_core.js'][4104]++;
    this._tasksAndParams = [];
    _$jscoverage['js/vs_core.js'][4106]++;
    if (arguments.length) {
      _$jscoverage['js/vs_core.js'][4106]++;
      this.setTasks(arguments);
    }
}
  _$jscoverage['js/vs_core.js'][4107]++;
  ;
  _$jscoverage['js/vs_core.js'][4109]++;
  Task_SEQ.prototype = {_tasksAndParams: null, _nextTaskToStart: 0, _startParam: null, setTasks: (function (tasksAndParams) {
  _$jscoverage['js/vs_core.js'][4145]++;
  if ((this._state !== Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][4145]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4146]++;
  var i, taskAndparam, task, param;
  _$jscoverage['js/vs_core.js'][4148]++;
  this._tasksAndParams = [];
  _$jscoverage['js/vs_core.js'][4149]++;
  for (i = 0; (i < tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][4151]++;
    taskAndparam = tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][4152]++;
    if ((! taskAndparam)) {
      _$jscoverage['js/vs_core.js'][4152]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4154]++;
    param = null;
    _$jscoverage['js/vs_core.js'][4154]++;
    task = null;
    _$jscoverage['js/vs_core.js'][4156]++;
    if (util.isArray(taskAndparam)) {
      _$jscoverage['js/vs_core.js'][4158]++;
      if ((taskAndparam.length === 1)) {
        _$jscoverage['js/vs_core.js'][4160]++;
        task = taskAndparam[0];
      }
      else {
        _$jscoverage['js/vs_core.js'][4162]++;
        if ((taskAndparam.length === 2)) {
          _$jscoverage['js/vs_core.js'][4164]++;
          task = taskAndparam[0];
          _$jscoverage['js/vs_core.js'][4165]++;
          param = taskAndparam[1];
        }
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][4170]++;
      task = taskAndparam;
      _$jscoverage['js/vs_core.js'][4171]++;
      param = null;
    }
    _$jscoverage['js/vs_core.js'][4174]++;
    if ((! task)) {
      _$jscoverage['js/vs_core.js'][4176]++;
      console.warn("Undefined task");
      _$jscoverage['js/vs_core.js'][4177]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4180]++;
    if (((! task.start) || (! task.stop) || (! task.pause))) {
      _$jscoverage['js/vs_core.js'][4182]++;
      console.warn(("Invalid task: " + task.toString()));
      _$jscoverage['js/vs_core.js'][4183]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4186]++;
    this._tasksAndParams.push([task, param]);
}
}), start: (function (param) {
  _$jscoverage['js/vs_core.js'][4199]++;
  if ((this._state === Task.STARTED)) {
    _$jscoverage['js/vs_core.js'][4199]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4200]++;
  this._state = Task.STARTED;
  _$jscoverage['js/vs_core.js'][4202]++;
  this._startParam = param;
  _$jscoverage['js/vs_core.js'][4204]++;
  var taskAndparam = this._tasksAndParams[this._nextTaskToStart];
  _$jscoverage['js/vs_core.js'][4205]++;
  if ((! taskAndparam)) {
    _$jscoverage['js/vs_core.js'][4205]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4207]++;
  (this._nextTaskToStart++);
  _$jscoverage['js/vs_core.js'][4208]++;
  taskAndparam[0].delegate = this;
  _$jscoverage['js/vs_core.js'][4209]++;
  taskAndparam[0].start((taskAndparam[1]? taskAndparam[1]: param));
  _$jscoverage['js/vs_core.js'][4211]++;
  return true;
}), stop: (function () {
  _$jscoverage['js/vs_core.js'][4222]++;
  if ((this._state === Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][4222]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4223]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4225]++;
  var taskAndparam = this._tasksAndParams[(this._nextTaskToStart - 1)];
  _$jscoverage['js/vs_core.js'][4226]++;
  if ((! taskAndparam)) {
    _$jscoverage['js/vs_core.js'][4226]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4228]++;
  this._nextTaskToStart = 0;
  _$jscoverage['js/vs_core.js'][4229]++;
  taskAndparam[0].stop();
  _$jscoverage['js/vs_core.js'][4231]++;
  return true;
}), pause: (function () {
  _$jscoverage['js/vs_core.js'][4243]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][4243]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4244]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][4246]++;
  var taskAndparam = this._tasksAndParams[(this._nextTaskToStart - 1)];
  _$jscoverage['js/vs_core.js'][4247]++;
  if ((! taskAndparam)) {
    _$jscoverage['js/vs_core.js'][4247]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4249]++;
  taskAndparam[0].pause();
  _$jscoverage['js/vs_core.js'][4251]++;
  return true;
}), taskDidStop: (function (task) {
  _$jscoverage['js/vs_core.js'][4264]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4266]++;
  if ((this._nextTaskToStart === 0)) {
    _$jscoverage['js/vs_core.js'][4267]++;
    this._nextTaskToStart = (this._nextTaskToStart - 1);
  }
  _$jscoverage['js/vs_core.js'][4269]++;
  if ((this.delegate && this.delegate.taskDidStop)) {
    _$jscoverage['js/vs_core.js'][4270]++;
    this.delegate.taskDidStop(this);
  }
}), taskDidPause: (function (task) {
  _$jscoverage['js/vs_core.js'][4279]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][4281]++;
  this._nextTaskToStart = (this._nextTaskToStart - 1);
  _$jscoverage['js/vs_core.js'][4283]++;
  if ((this.delegate && this.delegate.taskDidPause)) {
    _$jscoverage['js/vs_core.js'][4284]++;
    this.delegate.taskDidPause(this);
  }
}), taskDidEnd: (function (task) {
  _$jscoverage['js/vs_core.js'][4293]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4295]++;
  if ((this._nextTaskToStart < this._tasksAndParams.length)) {
    _$jscoverage['js/vs_core.js'][4298]++;
    this.start(this._startParam);
  }
  else {
    _$jscoverage['js/vs_core.js'][4302]++;
    this._nextTaskToStart = 0;
    _$jscoverage['js/vs_core.js'][4303]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][4304]++;
      this.delegate.taskDidEnd(this);
    }
  }
})};
  _$jscoverage['js/vs_core.js'][4308]++;
  util.extendClass(Task_SEQ, core.Object);
  _$jscoverage['js/vs_core.js'][4330]++;
  function TaskWait(time) {
    _$jscoverage['js/vs_core.js'][4332]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][4333]++;
    this.parent();
    _$jscoverage['js/vs_core.js'][4334]++;
    this.constructor = TaskWait;
    _$jscoverage['js/vs_core.js'][4336]++;
    this.time = time;
}
  _$jscoverage['js/vs_core.js'][4337]++;
  ;
  _$jscoverage['js/vs_core.js'][4339]++;
  TaskWait.prototype = {_time: 0, _left_time: 0, _timer: null, _start_time: 0, start: (function () {
  _$jscoverage['js/vs_core.js'][4373]++;
  var self = this, time = this._time;
  _$jscoverage['js/vs_core.js'][4374]++;
  if ((this._state === Task.STARTED)) {
    _$jscoverage['js/vs_core.js'][4374]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4375]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][4376]++;
    time = this._left_time;
  }
  else {
    _$jscoverage['js/vs_core.js'][4378]++;
    this._left_time = time;
  }
  _$jscoverage['js/vs_core.js'][4380]++;
  this._state = Task.STARTED;
  _$jscoverage['js/vs_core.js'][4382]++;
  this._start_time = new Date().getTime();
  _$jscoverage['js/vs_core.js'][4383]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][4384]++;
  this._timer = setTimeout((function () {
  _$jscoverage['js/vs_core.js'][4386]++;
  self._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4387]++;
  if ((self.delegate && self.delegate.taskDidEnd)) {
    _$jscoverage['js/vs_core.js'][4388]++;
    self.delegate.taskDidEnd(self);
  }
}), time);
  _$jscoverage['js/vs_core.js'][4391]++;
  return true;
}), stop: (function () {
  _$jscoverage['js/vs_core.js'][4402]++;
  if ((this._state === Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][4402]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4403]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4405]++;
  clearTimeout(this._timer);
  _$jscoverage['js/vs_core.js'][4406]++;
  this._timer = null;
  _$jscoverage['js/vs_core.js'][4408]++;
  this._left_time = this._time;
  _$jscoverage['js/vs_core.js'][4410]++;
  if ((this.delegate && this.delegate.taskDidStop)) {
    _$jscoverage['js/vs_core.js'][4411]++;
    this.delegate.taskDidStop(this);
  }
  _$jscoverage['js/vs_core.js'][4413]++;
  return true;
}), pause: (function () {
  _$jscoverage['js/vs_core.js'][4425]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][4425]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4426]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][4428]++;
  this._left_time = ((this._left_time - new Date().getTime()) + this._start_time);
  _$jscoverage['js/vs_core.js'][4431]++;
  if ((this.delegate && this.delegate.taskDidPause)) {
    _$jscoverage['js/vs_core.js'][4432]++;
    this.delegate.taskDidPause(this);
  }
  _$jscoverage['js/vs_core.js'][4434]++;
  return true;
})};
  _$jscoverage['js/vs_core.js'][4437]++;
  util.extendClass(TaskWait, core.Object);
  _$jscoverage['js/vs_core.js'][4439]++;
  util.defineClassProperty(TaskWait, "state", {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4448]++;
  if ((! util.isNumber(v))) {
    _$jscoverage['js/vs_core.js'][4448]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4449]++;
  this._time = v;
})});
  _$jscoverage['js/vs_core.js'][4456]++;
  util.extend(core, {Task: Task, Task_PAR: Task_PAR, Task_SEQ: Task_SEQ, TaskWait: TaskWait});
  _$jscoverage['js/vs_core.js'][4499]++;
  function DeviceConfiguration() {
    _$jscoverage['js/vs_core.js'][4501]++;
    this.orientation = null;
    _$jscoverage['js/vs_core.js'][4502]++;
    this.deviceId = null;
    _$jscoverage['js/vs_core.js'][4503]++;
    this.targets = {};
    _$jscoverage['js/vs_core.js'][4505]++;
    this.os = DeviceConfiguration.OS_UNKNOWN;
    _$jscoverage['js/vs_core.js'][4506]++;
    this.browser = DeviceConfiguration.BROWSER_UNKNOWN;
    _$jscoverage['js/vs_core.js'][4507]++;
    this.screenResolution = DeviceConfiguration.SR_UNKNOWN;
    _$jscoverage['js/vs_core.js'][4508]++;
    this.screenRatio = 0;
    _$jscoverage['js/vs_core.js'][4510]++;
    this.browserDetect();
}
  _$jscoverage['js/vs_core.js'][4517]++;
  DeviceConfiguration.OS_UNKNOWN = 0;
  _$jscoverage['js/vs_core.js'][4523]++;
  DeviceConfiguration.OS_WINDOWS = 1;
  _$jscoverage['js/vs_core.js'][4529]++;
  DeviceConfiguration.OS_MACOS = 2;
  _$jscoverage['js/vs_core.js'][4535]++;
  DeviceConfiguration.OS_LINUX = 4;
  _$jscoverage['js/vs_core.js'][4541]++;
  DeviceConfiguration.OS_IOS = 5;
  _$jscoverage['js/vs_core.js'][4547]++;
  DeviceConfiguration.OS_WP7 = 6;
  _$jscoverage['js/vs_core.js'][4553]++;
  DeviceConfiguration.OS_BLACK_BERRY = 7;
  _$jscoverage['js/vs_core.js'][4559]++;
  DeviceConfiguration.OS_SYMBIAN = 8;
  _$jscoverage['js/vs_core.js'][4565]++;
  DeviceConfiguration.OS_ANDROID = 9;
  _$jscoverage['js/vs_core.js'][4571]++;
  DeviceConfiguration.OS_MEEGO = 10;
  _$jscoverage['js/vs_core.js'][4579]++;
  DeviceConfiguration.SR_UNKNOWN = 0;
  _$jscoverage['js/vs_core.js'][4586]++;
  DeviceConfiguration.SR_QVGA = 1;
  _$jscoverage['js/vs_core.js'][4593]++;
  DeviceConfiguration.SR_WQVGA = 2;
  _$jscoverage['js/vs_core.js'][4600]++;
  DeviceConfiguration.SR_HVGA = 4;
  _$jscoverage['js/vs_core.js'][4607]++;
  DeviceConfiguration.SR_VGA = 5;
  _$jscoverage['js/vs_core.js'][4614]++;
  DeviceConfiguration.SR_WVGA = 6;
  _$jscoverage['js/vs_core.js'][4621]++;
  DeviceConfiguration.SR_FWVGA = 7;
  _$jscoverage['js/vs_core.js'][4628]++;
  DeviceConfiguration.SR_SVGA = 8;
  _$jscoverage['js/vs_core.js'][4635]++;
  DeviceConfiguration.SR_XGA = 9;
  _$jscoverage['js/vs_core.js'][4642]++;
  DeviceConfiguration.SR_N_HD = 10;
  _$jscoverage['js/vs_core.js'][4649]++;
  DeviceConfiguration.SR_Q_HD = 11;
  _$jscoverage['js/vs_core.js'][4656]++;
  DeviceConfiguration.SR_WXGA = 12;
  _$jscoverage['js/vs_core.js'][4662]++;
  DeviceConfiguration.BROWSER_UNKNOWN = 0;
  _$jscoverage['js/vs_core.js'][4668]++;
  DeviceConfiguration.BROWSER_CHROME = 1;
  _$jscoverage['js/vs_core.js'][4674]++;
  DeviceConfiguration.BROWSER_SAFARI = 2;
  _$jscoverage['js/vs_core.js'][4680]++;
  DeviceConfiguration.BROWSER_OPERA = 3;
  _$jscoverage['js/vs_core.js'][4686]++;
  DeviceConfiguration.BROWSER_FIREFOX = 4;
  _$jscoverage['js/vs_core.js'][4692]++;
  DeviceConfiguration.BROWSER_MSIE = 5;
  _$jscoverage['js/vs_core.js'][4695]++;
  DeviceConfiguration.prototype = {browserDetect: (function () {
  _$jscoverage['js/vs_core.js'][4703]++;
  function searchString(data) {
    _$jscoverage['js/vs_core.js'][4705]++;
    var i = data.length;
    _$jscoverage['js/vs_core.js'][4706]++;
    while ((i--)) {
      _$jscoverage['js/vs_core.js'][4708]++;
      var dataString = data[i].string;
      _$jscoverage['js/vs_core.js'][4709]++;
      var dataProp = data[i].prop;
      _$jscoverage['js/vs_core.js'][4710]++;
      this.versionSearchString = (data[i].versionSearch || data[i].identity);
      _$jscoverage['js/vs_core.js'][4711]++;
      if (dataString) {
        _$jscoverage['js/vs_core.js'][4713]++;
        if (dataString.match(data[i].subString)) {
          _$jscoverage['js/vs_core.js'][4714]++;
          return data[i].identity;
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][4716]++;
        if (dataProp) {
          _$jscoverage['js/vs_core.js'][4716]++;
          return data[i].identity;
        }
      }
}
}
  _$jscoverage['js/vs_core.js'][4720]++;
  this.browser = (searchString(DeviceConfiguration._data_browser) || DeviceConfiguration.BROWSER_UNKNOWN);
  _$jscoverage['js/vs_core.js'][4723]++;
  this.os = (searchString(DeviceConfiguration._data_OS) || DeviceConfiguration.OS_UNKNOWN);
}), getOrientation: (function () {
  _$jscoverage['js/vs_core.js'][4743]++;
  return this.orientation;
}), setDeviceId: (function (did) {
  _$jscoverage['js/vs_core.js'][4752]++;
  if ((! util.isString(did))) {
    _$jscoverage['js/vs_core.js'][4752]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4754]++;
  this.deviceId = did;
  _$jscoverage['js/vs_core.js'][4756]++;
  if ((did.indexOf("wp7") != -1)) {
    _$jscoverage['js/vs_core.js'][4758]++;
    this.os = DeviceConfiguration.OS_WP7;
    _$jscoverage['js/vs_core.js'][4759]++;
    this.screenResolution = DeviceConfiguration.SR_WVGA;
    _$jscoverage['js/vs_core.js'][4760]++;
    this.screenRatio = 1.6000000000000001;
  }
  else {
    _$jscoverage['js/vs_core.js'][4762]++;
    if ((did.indexOf("iphone") != -1)) {
      _$jscoverage['js/vs_core.js'][4764]++;
      this.os = DeviceConfiguration.OS_IOS;
      _$jscoverage['js/vs_core.js'][4765]++;
      this.screenResolution = DeviceConfiguration.SR_HVGA;
      _$jscoverage['js/vs_core.js'][4766]++;
      this.screenRatio = 1.5;
    }
    else {
      _$jscoverage['js/vs_core.js'][4768]++;
      if ((did.indexOf("ipad") != -1)) {
        _$jscoverage['js/vs_core.js'][4770]++;
        this.os = DeviceConfiguration.OS_IOS;
        _$jscoverage['js/vs_core.js'][4771]++;
        this.screenResolution = DeviceConfiguration.SR_XGA;
        _$jscoverage['js/vs_core.js'][4772]++;
        this.screenRatio = 1.3333333333333333;
      }
      else {
        _$jscoverage['js/vs_core.js'][4774]++;
        if ((did.indexOf("nokia_s3") != -1)) {
          _$jscoverage['js/vs_core.js'][4776]++;
          this.os = DeviceConfiguration.OS_SYMBIAN;
          _$jscoverage['js/vs_core.js'][4777]++;
          this.screenResolution = DeviceConfiguration.SR_N_HD;
          _$jscoverage['js/vs_core.js'][4778]++;
          this.screenRatio = 1.3333333333333333;
        }
        else {
          _$jscoverage['js/vs_core.js'][4780]++;
          if ((did.indexOf("android") != -1)) {
            _$jscoverage['js/vs_core.js'][4782]++;
            this.os = DeviceConfiguration.OS_ANDROID;
            _$jscoverage['js/vs_core.js'][4783]++;
            if ((did.indexOf("_3_2") != -1)) {
              _$jscoverage['js/vs_core.js'][4783]++;
              this.screenRatio = 1.5;
            }
            else {
              _$jscoverage['js/vs_core.js'][4784]++;
              if ((did.indexOf("_16_10") != -1)) {
                _$jscoverage['js/vs_core.js'][4784]++;
                this.screenRatio = 1.6000000000000001;
              }
              else {
                _$jscoverage['js/vs_core.js'][4785]++;
                if ((did.indexOf("_16_9") != -1)) {
                  _$jscoverage['js/vs_core.js'][4785]++;
                  this.screenRatio = 1.7777777777777777;
                }
              }
            }
            _$jscoverage['js/vs_core.js'][4787]++;
            var width = window.screen.width;
            _$jscoverage['js/vs_core.js'][4788]++;
            var height = window.screen.height;
            _$jscoverage['js/vs_core.js'][4789]++;
            if ((width > height)) {
              _$jscoverage['js/vs_core.js'][4791]++;
              width = window.screen.height;
              _$jscoverage['js/vs_core.js'][4792]++;
              height = window.screen.width;
            }
            _$jscoverage['js/vs_core.js'][4795]++;
            this.screenResolution = DeviceConfiguration._getScreenResolutionCode(width, height);
          }
          else {
            _$jscoverage['js/vs_core.js'][4798]++;
            if ((did.indexOf("blackberry") != -1)) {
              _$jscoverage['js/vs_core.js'][4800]++;
              this.os = DeviceConfiguration.OS_BLACK_BERRY;
              _$jscoverage['js/vs_core.js'][4801]++;
              if (did.indexOf("_4_3")) {
                _$jscoverage['js/vs_core.js'][4801]++;
                this.screenRatio = 1.3333333333333333;
              }
              else {
                _$jscoverage['js/vs_core.js'][4802]++;
                if (did.indexOf("_3_2")) {
                  _$jscoverage['js/vs_core.js'][4802]++;
                  this.screenRatio = 1.5;
                }
                else {
                  _$jscoverage['js/vs_core.js'][4803]++;
                  if (did.indexOf("_16_10")) {
                    _$jscoverage['js/vs_core.js'][4803]++;
                    this.screenRatio = 1.6000000000000001;
                  }
                }
              }
              _$jscoverage['js/vs_core.js'][4805]++;
              var width = window.screen.width;
              _$jscoverage['js/vs_core.js'][4806]++;
              var height = window.screen.height;
              _$jscoverage['js/vs_core.js'][4808]++;
              this.screenResolution = DeviceConfiguration._getScreenResolutionCode(width, height);
            }
          }
        }
      }
    }
  }
}), setOrientation: (function (orientation, force) {
  _$jscoverage['js/vs_core.js'][4823]++;
  var pid, device, i, len, id, comp, width = window.innerWidth, height = window.innerHeight, t;
  _$jscoverage['js/vs_core.js'][4826]++;
  if ((this.orientation === orientation)) {
    _$jscoverage['js/vs_core.js'][4827]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4829]++;
  if ((width > height)) {
    _$jscoverage['js/vs_core.js'][4831]++;
    t = height;
    _$jscoverage['js/vs_core.js'][4832]++;
    height = width;
    _$jscoverage['js/vs_core.js'][4833]++;
    width = t;
  }
  _$jscoverage['js/vs_core.js'][4836]++;
  for (id in core.Object._obs) {
    _$jscoverage['js/vs_core.js'][4838]++;
    comp = core.Object._obs[id];
    _$jscoverage['js/vs_core.js'][4839]++;
    if ((! comp)) {
      _$jscoverage['js/vs_core.js'][4839]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4841]++;
    if (comp._orientationWillChange) {
      _$jscoverage['js/vs_core.js'][4842]++;
      comp._orientationWillChange(orientation);
    }
    _$jscoverage['js/vs_core.js'][4843]++;
    if (comp.orientationWillChange) {
      _$jscoverage['js/vs_core.js'][4844]++;
      comp.orientationWillChange(orientation);
    }
}
  _$jscoverage['js/vs_core.js'][4847]++;
  for (pid in this.targets) {
    _$jscoverage['js/vs_core.js'][4849]++;
    device = this.targets[pid];
    _$jscoverage['js/vs_core.js'][4850]++;
    if ((device.device !== this.deviceId)) {
      _$jscoverage['js/vs_core.js'][4850]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4853]++;
    if (((((orientation !== 0) && (orientation !== 180)) || (pid.indexOf("_p") === -1)) && (((orientation !== 90) && (orientation !== -90)) || (pid.indexOf("_l") === -1)))) {
      _$jscoverage['js/vs_core.js'][4856]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4858]++;
    this.setActiveStyleSheet(pid);
    _$jscoverage['js/vs_core.js'][4860]++;
    this.orientation = orientation;
    _$jscoverage['js/vs_core.js'][4865]++;
    var orientationDidChangeFct = (function () {
  _$jscoverage['js/vs_core.js'][4867]++;
  var id, comp;
  _$jscoverage['js/vs_core.js'][4868]++;
  for (id in core.Object._obs) {
    _$jscoverage['js/vs_core.js'][4870]++;
    comp = core.Object._obs[id];
    _$jscoverage['js/vs_core.js'][4871]++;
    if (((! comp) || (! comp.orientationDidChange))) {
      _$jscoverage['js/vs_core.js'][4871]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4873]++;
    comp.orientationDidChange(orientation);
}
});
    _$jscoverage['js/vs_core.js'][4876]++;
    if ((! force)) {
      _$jscoverage['js/vs_core.js'][4878]++;
      setTimeout(orientationDidChangeFct, 100);
    }
    else {
      _$jscoverage['js/vs_core.js'][4882]++;
      orientationDidChangeFct.call(this);
    }
    _$jscoverage['js/vs_core.js'][4885]++;
    return pid;
}
}), setActiveStyleSheet: (function (pid) {
  _$jscoverage['js/vs_core.js'][4895]++;
  util.setActiveStyleSheet(pid);
  _$jscoverage['js/vs_core.js'][4896]++;
  window._current_platform_id = pid;
}), registerTargetId: (function (tid, conf) {
  _$jscoverage['js/vs_core.js'][4905]++;
  this.targets[tid] = conf;
})};
  _$jscoverage['js/vs_core.js'][4912]++;
  DeviceConfiguration._getScreenResolutionCode = (function (width, height) {
  _$jscoverage['js/vs_core.js'][4914]++;
  if (((width === 240) && (height === 320))) {
    _$jscoverage['js/vs_core.js'][4914]++;
    return DeviceConfiguration.SR_QVGA;
  }
  _$jscoverage['js/vs_core.js'][4915]++;
  if (((width === 240) && (height === 400))) {
    _$jscoverage['js/vs_core.js'][4915]++;
    return DeviceConfiguration.SR_WQVGA;
  }
  _$jscoverage['js/vs_core.js'][4916]++;
  if (((width === 320) && (height === 480))) {
    _$jscoverage['js/vs_core.js'][4916]++;
    return DeviceConfiguration.SR_HVGA;
  }
  _$jscoverage['js/vs_core.js'][4917]++;
  if (((width === 480) && (height === 640))) {
    _$jscoverage['js/vs_core.js'][4917]++;
    return DeviceConfiguration.SR_VGA;
  }
  _$jscoverage['js/vs_core.js'][4918]++;
  if (((width === 480) && (height === 800))) {
    _$jscoverage['js/vs_core.js'][4918]++;
    return DeviceConfiguration.SR_WVGA;
  }
  _$jscoverage['js/vs_core.js'][4919]++;
  if (((width === 320) && (height === 854))) {
    _$jscoverage['js/vs_core.js'][4919]++;
    return DeviceConfiguration.SR_WFVGA;
  }
  _$jscoverage['js/vs_core.js'][4920]++;
  if (((width === 600) && (height === 800))) {
    _$jscoverage['js/vs_core.js'][4920]++;
    return DeviceConfiguration.SR_SVGA;
  }
  _$jscoverage['js/vs_core.js'][4921]++;
  if (((width === 768) && (height === 1024))) {
    _$jscoverage['js/vs_core.js'][4921]++;
    return DeviceConfiguration.SR_XGA;
  }
  _$jscoverage['js/vs_core.js'][4922]++;
  if (((width === 360) && (height === 640))) {
    _$jscoverage['js/vs_core.js'][4922]++;
    return DeviceConfiguration.SR_N_HD;
  }
  _$jscoverage['js/vs_core.js'][4923]++;
  if (((width === 540) && (height === 960))) {
    _$jscoverage['js/vs_core.js'][4923]++;
    return DeviceConfiguration.SR_Q_HD;
  }
  _$jscoverage['js/vs_core.js'][4924]++;
  if (((width === 800) && (height === 1280))) {
    _$jscoverage['js/vs_core.js'][4924]++;
    return DeviceConfiguration.SR_WXGA;
  }
});
  _$jscoverage['js/vs_core.js'][4930]++;
  DeviceConfiguration._estimateScreenSize = (function (metric) {
  _$jscoverage['js/vs_core.js'][4932]++;
  var w = (metric.width / metric.xdpi);
  _$jscoverage['js/vs_core.js'][4933]++;
  var h = (metric.height / metric.ydpi);
  _$jscoverage['js/vs_core.js'][4934]++;
  var size = Math.sqrt(((w * w) + (h * h)));
  _$jscoverage['js/vs_core.js'][4936]++;
  if ((size < 5)) {
    _$jscoverage['js/vs_core.js'][4936]++;
    return 3;
  }
  _$jscoverage['js/vs_core.js'][4937]++;
  if ((size < 8)) {
    _$jscoverage['js/vs_core.js'][4937]++;
    return 7;
  }
  else {
    _$jscoverage['js/vs_core.js'][4938]++;
    return 10;
  }
});
  _$jscoverage['js/vs_core.js'][4945]++;
  DeviceConfiguration._data_browser = [{string: navigator.userAgent, subString: "Chrome", identity: DeviceConfiguration.BROWSER_CHROME}, {string: navigator.vendor, subString: "Apple", identity: DeviceConfiguration.BROWSER_SAFARI, versionSearch: "Version"}, {prop: window.opera, identity: DeviceConfiguration.BROWSER_OPERA, versionSearch: "Version"}, {string: navigator.userAgent, subString: "Firefox", identity: DeviceConfiguration.BROWSER_FIREFOX}, {string: navigator.userAgent, subString: "MSIE", identity: DeviceConfiguration.BROWSER_MSIE, versionSearch: "MSIE"}];
  _$jscoverage['js/vs_core.js'][4979]++;
  DeviceConfiguration._data_OS = [{string: navigator.platform, subString: "Win", identity: DeviceConfiguration.OS_WINDOWS}, {string: navigator.platform, subString: "Mac", identity: DeviceConfiguration.OS_MACOS}, {string: navigator.userAgent, subString: "iPad|iPhone|iPod", identity: DeviceConfiguration.OS_IOS}, {string: navigator.userAgent, subString: "Android", identity: DeviceConfiguration.OS_ANDROID}, {string: navigator.platform, subString: "Linux", identity: DeviceConfiguration.OS_LINUX}];
  _$jscoverage['js/vs_core.js'][5008]++;
  if (((typeof window.deviceConfiguration) == "undefined")) {
    _$jscoverage['js/vs_core.js'][5010]++;
    window.deviceConfiguration = new DeviceConfiguration();
  }
  _$jscoverage['js/vs_core.js'][5017]++;
  core.DeviceConfiguration = DeviceConfiguration;
  _$jscoverage['js/vs_core.js'][5058]++;
  HTTPRequest = (function (config) {
  _$jscoverage['js/vs_core.js'][5060]++;
  this.parent = core.EventSource;
  _$jscoverage['js/vs_core.js'][5061]++;
  this.parent(config);
  _$jscoverage['js/vs_core.js'][5062]++;
  this.constructor = HTTPRequest;
});
  _$jscoverage['js/vs_core.js'][5065]++;
  HTTPRequest.prototype = {_url: "", _method: "GET", _login: "", _password: "", _content_type: "", send: (function (data) {
  _$jscoverage['js/vs_core.js'][5120]++;
  var xhr = new XMLHttpRequest();
  _$jscoverage['js/vs_core.js'][5122]++;
  this._response_text = null;
  _$jscoverage['js/vs_core.js'][5123]++;
  this._response_xml = null;
  _$jscoverage['js/vs_core.js'][5126]++;
  xhr.open(this._method, this._url, true, (this._login || null), (this._password || null));
  _$jscoverage['js/vs_core.js'][5127]++;
  xhr.setRequestHeader("Cache-Control", "no-cache");
  _$jscoverage['js/vs_core.js'][5128]++;
  xhr.setRequestHeader("Pragma", "no-cache");
  _$jscoverage['js/vs_core.js'][5130]++;
  if (this._content_type) {
    _$jscoverage['js/vs_core.js'][5131]++;
    xhr.setRequestHeader("Content-Type", this._content_type);
  }
  _$jscoverage['js/vs_core.js'][5133]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][5134]++;
  xhr.onreadystatechange = (function () {
  _$jscoverage['js/vs_core.js'][5136]++;
  if ((xhr.readyState === 4)) {
    _$jscoverage['js/vs_core.js'][5138]++;
    if ((xhr.status === 200)) {
      _$jscoverage['js/vs_core.js'][5140]++;
      if (xhr.responseText) {
        _$jscoverage['js/vs_core.js'][5142]++;
        self._response_text = xhr.responseText;
        _$jscoverage['js/vs_core.js'][5143]++;
        self._response_xml = xhr.responseXML;
        _$jscoverage['js/vs_core.js'][5145]++;
        self.propagateChange();
        _$jscoverage['js/vs_core.js'][5147]++;
        self.propagate("textload", this._response_text);
        _$jscoverage['js/vs_core.js'][5148]++;
        self.propagate("xmlload", this._response_xml);
      }
      else {
        _$jscoverage['js/vs_core.js'][5152]++;
        self.propagate("loaderror", "file not found.");
        _$jscoverage['js/vs_core.js'][5153]++;
        return false;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][5158]++;
      self.propagate("loaderror", xhr.status);
      _$jscoverage['js/vs_core.js'][5159]++;
      return false;
    }
  }
});
  _$jscoverage['js/vs_core.js'][5165]++;
  xhr.send(data);
})};
  _$jscoverage['js/vs_core.js'][5169]++;
  util.extendClass(HTTPRequest, core.EventSource);
  _$jscoverage['js/vs_core.js'][5175]++;
  util.defineClassProperties(HTTPRequest, {"url": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5184]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][5184]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5186]++;
  this._url = v;
})}, "method": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5198]++;
  if (((v != "GET") || (v != "POST"))) {
    _$jscoverage['js/vs_core.js'][5198]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5200]++;
  this._method = v;
})}, "login": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5212]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][5212]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5214]++;
  this._login = v;
})}, "password": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5226]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][5226]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5228]++;
  this._password = v;
})}, "contentType": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5240]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][5240]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5242]++;
  this._content_type = v;
})}, "responseText": {get: (function () {
  _$jscoverage['js/vs_core.js'][5254]++;
  return this._response_text;
})}, "responseXML": {get: (function () {
  _$jscoverage['js/vs_core.js'][5266]++;
  return this._response_xml;
})}});
  _$jscoverage['js/vs_core.js'][5275]++;
  core.HTTPRequest = HTTPRequest;
  _$jscoverage['js/vs_core.js'][5309]++;
  function VSArray(config) {
    _$jscoverage['js/vs_core.js'][5311]++;
    this.parent = vs.core.Model;
    _$jscoverage['js/vs_core.js'][5312]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][5313]++;
    this.constructor = vs.core.Array;
}
  _$jscoverage['js/vs_core.js'][5316]++;
  VSArray.prototype = {_data: null, _model_class: null, initComponent: (function () {
  _$jscoverage['js/vs_core.js'][5336]++;
  this._data = [];
}), item: (function (index) {
  _$jscoverage['js/vs_core.js'][5353]++;
  return this._data[index];
}), _instanciateModel: (function (obj) {
  _$jscoverage['js/vs_core.js'][5363]++;
  if ((obj instanceof vs.core.Model)) {
    _$jscoverage['js/vs_core.js'][5363]++;
    return obj;
  }
  _$jscoverage['js/vs_core.js'][5364]++;
  if (((obj instanceof Object) && this._model_class)) {
    _$jscoverage['js/vs_core.js'][5366]++;
    try {
      _$jscoverage['js/vs_core.js'][5368]++;
      var _model = new (this._model_class)(obj);
      _$jscoverage['js/vs_core.js'][5369]++;
      _model.init();
      _$jscoverage['js/vs_core.js'][5370]++;
      return _model;
    }
    catch (e) {
      _$jscoverage['js/vs_core.js'][5374]++;
      console.error(e.toString());
    }
  }
  _$jscoverage['js/vs_core.js'][5378]++;
  return obj;
}), add: (function () {
  _$jscoverage['js/vs_core.js'][5392]++;
  var args = [], i = 0;
  _$jscoverage['js/vs_core.js'][5393]++;
  for (; (i < arguments.length); (i++)) {
    _$jscoverage['js/vs_core.js'][5394]++;
    args.push(this._instanciateModel(arguments[i]));
}
  _$jscoverage['js/vs_core.js'][5396]++;
  this._data.push.apply(this._data, args);
  _$jscoverage['js/vs_core.js'][5398]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5398]++;
    this.change("add");
  }
  _$jscoverage['js/vs_core.js'][5400]++;
  return this.length;
}), addAtIndex: (function () {
  _$jscoverage['js/vs_core.js'][5414]++;
  if ((arguments.length < 2)) {
    _$jscoverage['js/vs_core.js'][5414]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5415]++;
  var args = [], i = 1;
  _$jscoverage['js/vs_core.js'][5416]++;
  for (; (i < arguments.length); (i++)) {
    _$jscoverage['js/vs_core.js'][5417]++;
    args.push(this._instanciateModel(arguments[i]));
}
  _$jscoverage['js/vs_core.js'][5419]++;
  this._data.splice.apply(this._data, args);
  _$jscoverage['js/vs_core.js'][5420]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5421]++;
    this.change("add", args[0], (args.length - 2));
  }
}), remove: (function (from, to) {
  _$jscoverage['js/vs_core.js'][5442]++;
  this._data.remove(from, to);
  _$jscoverage['js/vs_core.js'][5443]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5443]++;
    this.change("remove", from, to);
  }
}), removeAll: (function () {
  _$jscoverage['js/vs_core.js'][5453]++;
  this._data = [];
  _$jscoverage['js/vs_core.js'][5454]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5454]++;
    this.change("removeall");
  }
}), indexOf: (function () {
  _$jscoverage['js/vs_core.js'][5466]++;
  throw "method not yet implemented";
}), toJSON: (function () {
  _$jscoverage['js/vs_core.js'][5484]++;
  var json = this._toJSON("{"), i = 0, obj;
  _$jscoverage['js/vs_core.js'][5486]++;
  json += ", \"data\": [";
  _$jscoverage['js/vs_core.js'][5487]++;
  for (; (i < this._data.length); (i++)) {
    _$jscoverage['js/vs_core.js'][5489]++;
    obj = this._data[i];
    _$jscoverage['js/vs_core.js'][5490]++;
    if ((! obj)) {
      _$jscoverage['js/vs_core.js'][5490]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][5491]++;
    if (obj.toJSON) {
      _$jscoverage['js/vs_core.js'][5491]++;
      json += obj.toJSON();
    }
    else {
      _$jscoverage['js/vs_core.js'][5492]++;
      json += JSON.stringify(obj);
    }
    _$jscoverage['js/vs_core.js'][5493]++;
    if ((i < (this._data.length - 1))) {
      _$jscoverage['js/vs_core.js'][5493]++;
      json += ",";
    }
}
  _$jscoverage['js/vs_core.js'][5496]++;
  json += "]}";
  _$jscoverage['js/vs_core.js'][5497]++;
  return json;
}), parseJSON: (function (json) {
  _$jscoverage['js/vs_core.js'][5510]++;
  try {
    _$jscoverage['js/vs_core.js'][5511]++;
    var obj = ((json && util.parseJSON(json)) || {}), i, key, _model, item;
    _$jscoverage['js/vs_core.js'][5513]++;
    for (key in obj) {
      _$jscoverage['js/vs_core.js'][5515]++;
      this._data = [];
      _$jscoverage['js/vs_core.js'][5516]++;
      if ((key == "data")) {
        _$jscoverage['js/vs_core.js'][5518]++;
        for (i = 0; (i < obj.data.length); (i++)) {
          _$jscoverage['js/vs_core.js'][5520]++;
          item = obj.data[i];
          _$jscoverage['js/vs_core.js'][5521]++;
          if (this._model_class) {
            _$jscoverage['js/vs_core.js'][5523]++;
            _model = new (this._model_class)();
            _$jscoverage['js/vs_core.js'][5524]++;
            _model.init();
            _$jscoverage['js/vs_core.js'][5526]++;
            for (key in item) {
              _$jscoverage['js/vs_core.js'][5526]++;
              _model[("_" + key)] = item[key];
}
            _$jscoverage['js/vs_core.js'][5527]++;
            this.add(_model);
          }
          else {
            _$jscoverage['js/vs_core.js'][5529]++;
            this.add(item);
          }
}
      }
      else {
        _$jscoverage['js/vs_core.js'][5532]++;
        this[("_" + key)] = obj[key];
      }
}
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][5537]++;
    console.error(("vs.core.Array.parseJSON failed. " + e.toString()));
  }
})};
  _$jscoverage['js/vs_core.js'][5541]++;
  util.extendClass(VSArray, core.Model);
  _$jscoverage['js/vs_core.js'][5547]++;
  util.defineClassProperties(VSArray, {"length": {get: (function () {
  _$jscoverage['js/vs_core.js'][5559]++;
  if ((! this.__i__)) {
    _$jscoverage['js/vs_core.js'][5559]++;
    throw "Component not initialized";
  }
  _$jscoverage['js/vs_core.js'][5560]++;
  return this._data.length;
})}, "modelClass": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5573]++;
  if ((! (v instanceof Function))) {
    _$jscoverage['js/vs_core.js'][5573]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5575]++;
  this._model_class = v;
})}});
  _$jscoverage['js/vs_core.js'][5584]++;
  core.Array = VSArray;
  _$jscoverage['js/vs_core.js'][5620]++;
  function DataStorage(config) {
    _$jscoverage['js/vs_core.js'][5622]++;
    this.parent = core.EventSource;
    _$jscoverage['js/vs_core.js'][5623]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][5624]++;
    this.constructor = vs.core.DataStorage;
    _$jscoverage['js/vs_core.js'][5626]++;
    this.__models__ = {};
}
  _$jscoverage['js/vs_core.js'][5629]++;
  DataStorage.prototype = {__models__: null, registerModel: (function (name, model) {
  _$jscoverage['js/vs_core.js'][5655]++;
  if (((! name) || (! model))) {
    _$jscoverage['js/vs_core.js'][5655]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5657]++;
  if (this.__models__[name]) {
    _$jscoverage['js/vs_core.js'][5658]++;
    error.log("Model with the name already registered.");
  }
  _$jscoverage['js/vs_core.js'][5660]++;
  this.__models__[name] = model;
  _$jscoverage['js/vs_core.js'][5662]++;
  model._sync_service_ = this;
}), removeModel: (function (name) {
  _$jscoverage['js/vs_core.js'][5676]++;
  if ((! name)) {
    _$jscoverage['js/vs_core.js'][5676]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5678]++;
  if ((! this.__models__[name])) {
    _$jscoverage['js/vs_core.js'][5678]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5680]++;
  (delete this.__models__[name]);
}), save: (function (name) {
}), load: (function (name) {
})};
  _$jscoverage['js/vs_core.js'][5711]++;
  util.extendClass(DataStorage, core.EventSource);
  _$jscoverage['js/vs_core.js'][5717]++;
  core.DataStorage = DataStorage;
  _$jscoverage['js/vs_core.js'][5764]++;
  function LocalStorage(config) {
    _$jscoverage['js/vs_core.js'][5766]++;
    this.parent = DataStorage;
    _$jscoverage['js/vs_core.js'][5767]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][5768]++;
    this.constructor = vs.core.LocalStorage;
}
  _$jscoverage['js/vs_core.js'][5771]++;
  LocalStorage.prototype = {save: (function (name) {
  _$jscoverage['js/vs_core.js'][5795]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][5796]++;
  function _save(name) {
    _$jscoverage['js/vs_core.js'][5798]++;
    var json, model = self.__models__[name];
    _$jscoverage['js/vs_core.js'][5799]++;
    if ((! model)) {
      _$jscoverage['js/vs_core.js'][5799]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][5801]++;
    try {
      _$jscoverage['js/vs_core.js'][5803]++;
      if (model.toJSON) {
        _$jscoverage['js/vs_core.js'][5803]++;
        json = model.toJSON();
      }
      else {
        _$jscoverage['js/vs_core.js'][5804]++;
        json = JSON.stringify(model);
      }
    }
    catch (e) {
      _$jscoverage['js/vs_core.js'][5808]++;
      error.log(e);
      _$jscoverage['js/vs_core.js'][5809]++;
      self.propagate("error", e);
    }
    _$jscoverage['js/vs_core.js'][5812]++;
    localStorage.setItem(name, json);
}
  _$jscoverage['js/vs_core.js'][5814]++;
  if (name) {
    _$jscoverage['js/vs_core.js'][5814]++;
    _save(name);
  }
  else {
    _$jscoverage['js/vs_core.js'][5815]++;
    for (var name = name in this.__models__) {
      _$jscoverage['js/vs_core.js'][5815]++;
      _save(name);
}
  }
  _$jscoverage['js/vs_core.js'][5817]++;
  self.propagate("save");
}), load: (function (name) {
  _$jscoverage['js/vs_core.js'][5830]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][5831]++;
  function _load(name) {
    _$jscoverage['js/vs_core.js'][5833]++;
    try {
      _$jscoverage['js/vs_core.js'][5834]++;
      var json, model = self.__models__[name];
      _$jscoverage['js/vs_core.js'][5835]++;
      if ((! model)) {
        _$jscoverage['js/vs_core.js'][5835]++;
        return;
      }
      _$jscoverage['js/vs_core.js'][5837]++;
      var store = localStorage.getItem(name);
      _$jscoverage['js/vs_core.js'][5838]++;
      model.parseJSON(store);
    }
    catch (e) {
      _$jscoverage['js/vs_core.js'][5842]++;
      console.error(("LocalStorate.load failed. " + e.toString()));
    }
}
  _$jscoverage['js/vs_core.js'][5845]++;
  if (name) {
    _$jscoverage['js/vs_core.js'][5845]++;
    _load(name);
  }
  else {
    _$jscoverage['js/vs_core.js'][5846]++;
    for (var name = name in this.__models__) {
      _$jscoverage['js/vs_core.js'][5846]++;
      _load(name);
}
  }
  _$jscoverage['js/vs_core.js'][5848]++;
  self.propagate("load");
})};
  _$jscoverage['js/vs_core.js'][5851]++;
  util.extendClass(LocalStorage, DataStorage);
  _$jscoverage['js/vs_core.js'][5857]++;
  core.LocalStorage = LocalStorage;
})(window);
