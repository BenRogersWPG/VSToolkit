/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
}
if (! _$jscoverage['js/vs_core.js']) {
  _$jscoverage['js/vs_core.js'] = [];
  _$jscoverage['js/vs_core.js'][19] = 0;
  _$jscoverage['js/vs_core.js'][21] = 0;
  _$jscoverage['js/vs_core.js'][45] = 0;
  _$jscoverage['js/vs_core.js'][57] = 0;
  _$jscoverage['js/vs_core.js'][59] = 0;
  _$jscoverage['js/vs_core.js'][68] = 0;
  _$jscoverage['js/vs_core.js'][104] = 0;
  _$jscoverage['js/vs_core.js'][106] = 0;
  _$jscoverage['js/vs_core.js'][107] = 0;
  _$jscoverage['js/vs_core.js'][108] = 0;
  _$jscoverage['js/vs_core.js'][109] = 0;
  _$jscoverage['js/vs_core.js'][111] = 0;
  _$jscoverage['js/vs_core.js'][113] = 0;
  _$jscoverage['js/vs_core.js'][117] = 0;
  _$jscoverage['js/vs_core.js'][150] = 0;
  _$jscoverage['js/vs_core.js'][152] = 0;
  _$jscoverage['js/vs_core.js'][154] = 0;
  _$jscoverage['js/vs_core.js'][158] = 0;
  _$jscoverage['js/vs_core.js'][160] = 0;
  _$jscoverage['js/vs_core.js'][161] = 0;
  _$jscoverage['js/vs_core.js'][163] = 0;
  _$jscoverage['js/vs_core.js'][165] = 0;
  _$jscoverage['js/vs_core.js'][166] = 0;
  _$jscoverage['js/vs_core.js'][169] = 0;
  _$jscoverage['js/vs_core.js'][185] = 0;
  _$jscoverage['js/vs_core.js'][187] = 0;
  _$jscoverage['js/vs_core.js'][215] = 0;
  _$jscoverage['js/vs_core.js'][216] = 0;
  _$jscoverage['js/vs_core.js'][218] = 0;
  _$jscoverage['js/vs_core.js'][219] = 0;
  _$jscoverage['js/vs_core.js'][222] = 0;
  _$jscoverage['js/vs_core.js'][224] = 0;
  _$jscoverage['js/vs_core.js'][225] = 0;
  _$jscoverage['js/vs_core.js'][228] = 0;
  _$jscoverage['js/vs_core.js'][229] = 0;
  _$jscoverage['js/vs_core.js'][234] = 0;
  _$jscoverage['js/vs_core.js'][235] = 0;
  _$jscoverage['js/vs_core.js'][237] = 0;
  _$jscoverage['js/vs_core.js'][238] = 0;
  _$jscoverage['js/vs_core.js'][239] = 0;
  _$jscoverage['js/vs_core.js'][240] = 0;
  _$jscoverage['js/vs_core.js'][246] = 0;
  _$jscoverage['js/vs_core.js'][248] = 0;
  _$jscoverage['js/vs_core.js'][250] = 0;
  _$jscoverage['js/vs_core.js'][251] = 0;
  _$jscoverage['js/vs_core.js'][252] = 0;
  _$jscoverage['js/vs_core.js'][256] = 0;
  _$jscoverage['js/vs_core.js'][258] = 0;
  _$jscoverage['js/vs_core.js'][259] = 0;
  _$jscoverage['js/vs_core.js'][261] = 0;
  _$jscoverage['js/vs_core.js'][262] = 0;
  _$jscoverage['js/vs_core.js'][265] = 0;
  _$jscoverage['js/vs_core.js'][266] = 0;
  _$jscoverage['js/vs_core.js'][278] = 0;
  _$jscoverage['js/vs_core.js'][280] = 0;
  _$jscoverage['js/vs_core.js'][293] = 0;
  _$jscoverage['js/vs_core.js'][306] = 0;
  _$jscoverage['js/vs_core.js'][307] = 0;
  _$jscoverage['js/vs_core.js'][309] = 0;
  _$jscoverage['js/vs_core.js'][321] = 0;
  _$jscoverage['js/vs_core.js'][326] = 0;
  _$jscoverage['js/vs_core.js'][339] = 0;
  _$jscoverage['js/vs_core.js'][342] = 0;
  _$jscoverage['js/vs_core.js'][344] = 0;
  _$jscoverage['js/vs_core.js'][346] = 0;
  _$jscoverage['js/vs_core.js'][347] = 0;
  _$jscoverage['js/vs_core.js'][348] = 0;
  _$jscoverage['js/vs_core.js'][349] = 0;
  _$jscoverage['js/vs_core.js'][350] = 0;
  _$jscoverage['js/vs_core.js'][351] = 0;
  _$jscoverage['js/vs_core.js'][354] = 0;
  _$jscoverage['js/vs_core.js'][355] = 0;
  _$jscoverage['js/vs_core.js'][356] = 0;
  _$jscoverage['js/vs_core.js'][359] = 0;
  _$jscoverage['js/vs_core.js'][360] = 0;
  _$jscoverage['js/vs_core.js'][363] = 0;
  _$jscoverage['js/vs_core.js'][364] = 0;
  _$jscoverage['js/vs_core.js'][367] = 0;
  _$jscoverage['js/vs_core.js'][390] = 0;
  _$jscoverage['js/vs_core.js'][391] = 0;
  _$jscoverage['js/vs_core.js'][393] = 0;
  _$jscoverage['js/vs_core.js'][396] = 0;
  _$jscoverage['js/vs_core.js'][410] = 0;
  _$jscoverage['js/vs_core.js'][424] = 0;
  _$jscoverage['js/vs_core.js'][426] = 0;
  _$jscoverage['js/vs_core.js'][429] = 0;
  _$jscoverage['js/vs_core.js'][431] = 0;
  _$jscoverage['js/vs_core.js'][432] = 0;
  _$jscoverage['js/vs_core.js'][434] = 0;
  _$jscoverage['js/vs_core.js'][436] = 0;
  _$jscoverage['js/vs_core.js'][440] = 0;
  _$jscoverage['js/vs_core.js'][441] = 0;
  _$jscoverage['js/vs_core.js'][444] = 0;
  _$jscoverage['js/vs_core.js'][446] = 0;
  _$jscoverage['js/vs_core.js'][448] = 0;
  _$jscoverage['js/vs_core.js'][450] = 0;
  _$jscoverage['js/vs_core.js'][451] = 0;
  _$jscoverage['js/vs_core.js'][452] = 0;
  _$jscoverage['js/vs_core.js'][455] = 0;
  _$jscoverage['js/vs_core.js'][458] = 0;
  _$jscoverage['js/vs_core.js'][462] = 0;
  _$jscoverage['js/vs_core.js'][464] = 0;
  _$jscoverage['js/vs_core.js'][466] = 0;
  _$jscoverage['js/vs_core.js'][468] = 0;
  _$jscoverage['js/vs_core.js'][470] = 0;
  _$jscoverage['js/vs_core.js'][472] = 0;
  _$jscoverage['js/vs_core.js'][476] = 0;
  _$jscoverage['js/vs_core.js'][477] = 0;
  _$jscoverage['js/vs_core.js'][496] = 0;
  _$jscoverage['js/vs_core.js'][497] = 0;
  _$jscoverage['js/vs_core.js'][498] = 0;
  _$jscoverage['js/vs_core.js'][513] = 0;
  _$jscoverage['js/vs_core.js'][515] = 0;
  _$jscoverage['js/vs_core.js'][516] = 0;
  _$jscoverage['js/vs_core.js'][517] = 0;
  _$jscoverage['js/vs_core.js'][518] = 0;
  _$jscoverage['js/vs_core.js'][519] = 0;
  _$jscoverage['js/vs_core.js'][520] = 0;
  _$jscoverage['js/vs_core.js'][523] = 0;
  _$jscoverage['js/vs_core.js'][531] = 0;
  _$jscoverage['js/vs_core.js'][532] = 0;
  _$jscoverage['js/vs_core.js'][540] = 0;
  _$jscoverage['js/vs_core.js'][547] = 0;
  _$jscoverage['js/vs_core.js'][554] = 0;
  _$jscoverage['js/vs_core.js'][560] = 0;
  _$jscoverage['js/vs_core.js'][583] = 0;
  _$jscoverage['js/vs_core.js'][606] = 0;
  _$jscoverage['js/vs_core.js'][608] = 0;
  _$jscoverage['js/vs_core.js'][612] = 0;
  _$jscoverage['js/vs_core.js'][614] = 0;
  _$jscoverage['js/vs_core.js'][616] = 0;
  _$jscoverage['js/vs_core.js'][618] = 0;
  _$jscoverage['js/vs_core.js'][621] = 0;
  _$jscoverage['js/vs_core.js'][623] = 0;
  _$jscoverage['js/vs_core.js'][626] = 0;
  _$jscoverage['js/vs_core.js'][628] = 0;
  _$jscoverage['js/vs_core.js'][630] = 0;
  _$jscoverage['js/vs_core.js'][631] = 0;
  _$jscoverage['js/vs_core.js'][633] = 0;
  _$jscoverage['js/vs_core.js'][635] = 0;
  _$jscoverage['js/vs_core.js'][636] = 0;
  _$jscoverage['js/vs_core.js'][639] = 0;
  _$jscoverage['js/vs_core.js'][640] = 0;
  _$jscoverage['js/vs_core.js'][642] = 0;
  _$jscoverage['js/vs_core.js'][643] = 0;
  _$jscoverage['js/vs_core.js'][645] = 0;
  _$jscoverage['js/vs_core.js'][648] = 0;
  _$jscoverage['js/vs_core.js'][650] = 0;
  _$jscoverage['js/vs_core.js'][651] = 0;
  _$jscoverage['js/vs_core.js'][653] = 0;
  _$jscoverage['js/vs_core.js'][656] = 0;
  _$jscoverage['js/vs_core.js'][658] = 0;
  _$jscoverage['js/vs_core.js'][659] = 0;
  _$jscoverage['js/vs_core.js'][660] = 0;
  _$jscoverage['js/vs_core.js'][661] = 0;
  _$jscoverage['js/vs_core.js'][664] = 0;
  _$jscoverage['js/vs_core.js'][683] = 0;
  _$jscoverage['js/vs_core.js'][685] = 0;
  _$jscoverage['js/vs_core.js'][693] = 0;
  _$jscoverage['js/vs_core.js'][700] = 0;
  _$jscoverage['js/vs_core.js'][707] = 0;
  _$jscoverage['js/vs_core.js'][715] = 0;
  _$jscoverage['js/vs_core.js'][720] = 0;
  _$jscoverage['js/vs_core.js'][722] = 0;
  _$jscoverage['js/vs_core.js'][723] = 0;
  _$jscoverage['js/vs_core.js'][725] = 0;
  _$jscoverage['js/vs_core.js'][728] = 0;
  _$jscoverage['js/vs_core.js'][730] = 0;
  _$jscoverage['js/vs_core.js'][731] = 0;
  _$jscoverage['js/vs_core.js'][732] = 0;
  _$jscoverage['js/vs_core.js'][734] = 0;
  _$jscoverage['js/vs_core.js'][736] = 0;
  _$jscoverage['js/vs_core.js'][738] = 0;
  _$jscoverage['js/vs_core.js'][739] = 0;
  _$jscoverage['js/vs_core.js'][743] = 0;
  _$jscoverage['js/vs_core.js'][745] = 0;
  _$jscoverage['js/vs_core.js'][747] = 0;
  _$jscoverage['js/vs_core.js'][749] = 0;
  _$jscoverage['js/vs_core.js'][756] = 0;
  _$jscoverage['js/vs_core.js'][758] = 0;
  _$jscoverage['js/vs_core.js'][759] = 0;
  _$jscoverage['js/vs_core.js'][761] = 0;
  _$jscoverage['js/vs_core.js'][763] = 0;
  _$jscoverage['js/vs_core.js'][764] = 0;
  _$jscoverage['js/vs_core.js'][766] = 0;
  _$jscoverage['js/vs_core.js'][768] = 0;
  _$jscoverage['js/vs_core.js'][769] = 0;
  _$jscoverage['js/vs_core.js'][773] = 0;
  _$jscoverage['js/vs_core.js'][775] = 0;
  _$jscoverage['js/vs_core.js'][777] = 0;
  _$jscoverage['js/vs_core.js'][783] = 0;
  _$jscoverage['js/vs_core.js'][785] = 0;
  _$jscoverage['js/vs_core.js'][787] = 0;
  _$jscoverage['js/vs_core.js'][789] = 0;
  _$jscoverage['js/vs_core.js'][796] = 0;
  _$jscoverage['js/vs_core.js'][857] = 0;
  _$jscoverage['js/vs_core.js'][859] = 0;
  _$jscoverage['js/vs_core.js'][860] = 0;
  _$jscoverage['js/vs_core.js'][861] = 0;
  _$jscoverage['js/vs_core.js'][863] = 0;
  _$jscoverage['js/vs_core.js'][866] = 0;
  _$jscoverage['js/vs_core.js'][900] = 0;
  _$jscoverage['js/vs_core.js'][902] = 0;
  _$jscoverage['js/vs_core.js'][904] = 0;
  _$jscoverage['js/vs_core.js'][906] = 0;
  _$jscoverage['js/vs_core.js'][908] = 0;
  _$jscoverage['js/vs_core.js'][909] = 0;
  _$jscoverage['js/vs_core.js'][911] = 0;
  _$jscoverage['js/vs_core.js'][912] = 0;
  _$jscoverage['js/vs_core.js'][914] = 0;
  _$jscoverage['js/vs_core.js'][916] = 0;
  _$jscoverage['js/vs_core.js'][918] = 0;
  _$jscoverage['js/vs_core.js'][919] = 0;
  _$jscoverage['js/vs_core.js'][922] = 0;
  _$jscoverage['js/vs_core.js'][951] = 0;
  _$jscoverage['js/vs_core.js'][952] = 0;
  _$jscoverage['js/vs_core.js'][954] = 0;
  _$jscoverage['js/vs_core.js'][955] = 0;
  _$jscoverage['js/vs_core.js'][957] = 0;
  _$jscoverage['js/vs_core.js'][958] = 0;
  _$jscoverage['js/vs_core.js'][960] = 0;
  _$jscoverage['js/vs_core.js'][961] = 0;
  _$jscoverage['js/vs_core.js'][963] = 0;
  _$jscoverage['js/vs_core.js'][981] = 0;
  _$jscoverage['js/vs_core.js'][983] = 0;
  _$jscoverage['js/vs_core.js'][985] = 0;
  _$jscoverage['js/vs_core.js'][987] = 0;
  _$jscoverage['js/vs_core.js'][988] = 0;
  _$jscoverage['js/vs_core.js'][990] = 0;
  _$jscoverage['js/vs_core.js'][991] = 0;
  _$jscoverage['js/vs_core.js'][993] = 0;
  _$jscoverage['js/vs_core.js'][995] = 0;
  _$jscoverage['js/vs_core.js'][997] = 0;
  _$jscoverage['js/vs_core.js'][999] = 0;
  _$jscoverage['js/vs_core.js'][1000] = 0;
  _$jscoverage['js/vs_core.js'][1002] = 0;
  _$jscoverage['js/vs_core.js'][1006] = 0;
  _$jscoverage['js/vs_core.js'][1007] = 0;
  _$jscoverage['js/vs_core.js'][1010] = 0;
  _$jscoverage['js/vs_core.js'][1012] = 0;
  _$jscoverage['js/vs_core.js'][1014] = 0;
  _$jscoverage['js/vs_core.js'][1016] = 0;
  _$jscoverage['js/vs_core.js'][1033] = 0;
  _$jscoverage['js/vs_core.js'][1048] = 0;
  _$jscoverage['js/vs_core.js'][1066] = 0;
  _$jscoverage['js/vs_core.js'][1068] = 0;
  _$jscoverage['js/vs_core.js'][1070] = 0;
  _$jscoverage['js/vs_core.js'][1072] = 0;
  _$jscoverage['js/vs_core.js'][1074] = 0;
  _$jscoverage['js/vs_core.js'][1076] = 0;
  _$jscoverage['js/vs_core.js'][1077] = 0;
  _$jscoverage['js/vs_core.js'][1079] = 0;
  _$jscoverage['js/vs_core.js'][1082] = 0;
  _$jscoverage['js/vs_core.js'][1084] = 0;
  _$jscoverage['js/vs_core.js'][1086] = 0;
  _$jscoverage['js/vs_core.js'][1088] = 0;
  _$jscoverage['js/vs_core.js'][1090] = 0;
  _$jscoverage['js/vs_core.js'][1094] = 0;
  _$jscoverage['js/vs_core.js'][1097] = 0;
  _$jscoverage['js/vs_core.js'][1099] = 0;
  _$jscoverage['js/vs_core.js'][1100] = 0;
  _$jscoverage['js/vs_core.js'][1104] = 0;
  _$jscoverage['js/vs_core.js'][1121] = 0;
  _$jscoverage['js/vs_core.js'][1122] = 0;
  _$jscoverage['js/vs_core.js'][1124] = 0;
  _$jscoverage['js/vs_core.js'][1125] = 0;
  _$jscoverage['js/vs_core.js'][1128] = 0;
  _$jscoverage['js/vs_core.js'][1134] = 0;
  _$jscoverage['js/vs_core.js'][1156] = 0;
  _$jscoverage['js/vs_core.js'][1162] = 0;
  _$jscoverage['js/vs_core.js'][1163] = 0;
  _$jscoverage['js/vs_core.js'][1165] = 0;
  _$jscoverage['js/vs_core.js'][1167] = 0;
  _$jscoverage['js/vs_core.js'][1177] = 0;
  _$jscoverage['js/vs_core.js'][1185] = 0;
  _$jscoverage['js/vs_core.js'][1193] = 0;
  _$jscoverage['js/vs_core.js'][1201] = 0;
  _$jscoverage['js/vs_core.js'][1203] = 0;
  _$jscoverage['js/vs_core.js'][1205] = 0;
  _$jscoverage['js/vs_core.js'][1206] = 0;
  _$jscoverage['js/vs_core.js'][1207] = 0;
  _$jscoverage['js/vs_core.js'][1208] = 0;
  _$jscoverage['js/vs_core.js'][1212] = 0;
  _$jscoverage['js/vs_core.js'][1213] = 0;
  _$jscoverage['js/vs_core.js'][1214] = 0;
  _$jscoverage['js/vs_core.js'][1215] = 0;
  _$jscoverage['js/vs_core.js'][1241] = 0;
  _$jscoverage['js/vs_core.js'][1243] = 0;
  _$jscoverage['js/vs_core.js'][1244] = 0;
  _$jscoverage['js/vs_core.js'][1245] = 0;
  _$jscoverage['js/vs_core.js'][1246] = 0;
  _$jscoverage['js/vs_core.js'][1249] = 0;
  _$jscoverage['js/vs_core.js'][1288] = 0;
  _$jscoverage['js/vs_core.js'][1289] = 0;
  _$jscoverage['js/vs_core.js'][1290] = 0;
  _$jscoverage['js/vs_core.js'][1291] = 0;
  _$jscoverage['js/vs_core.js'][1299] = 0;
  _$jscoverage['js/vs_core.js'][1300] = 0;
  _$jscoverage['js/vs_core.js'][1301] = 0;
  _$jscoverage['js/vs_core.js'][1324] = 0;
  _$jscoverage['js/vs_core.js'][1326] = 0;
  _$jscoverage['js/vs_core.js'][1327] = 0;
  _$jscoverage['js/vs_core.js'][1328] = 0;
  _$jscoverage['js/vs_core.js'][1329] = 0;
  _$jscoverage['js/vs_core.js'][1331] = 0;
  _$jscoverage['js/vs_core.js'][1335] = 0;
  _$jscoverage['js/vs_core.js'][1342] = 0;
  _$jscoverage['js/vs_core.js'][1344] = 0;
  _$jscoverage['js/vs_core.js'][1345] = 0;
  _$jscoverage['js/vs_core.js'][1346] = 0;
  _$jscoverage['js/vs_core.js'][1347] = 0;
  _$jscoverage['js/vs_core.js'][1348] = 0;
  _$jscoverage['js/vs_core.js'][1366] = 0;
  _$jscoverage['js/vs_core.js'][1368] = 0;
  _$jscoverage['js/vs_core.js'][1369] = 0;
  _$jscoverage['js/vs_core.js'][1370] = 0;
  _$jscoverage['js/vs_core.js'][1372] = 0;
  _$jscoverage['js/vs_core.js'][1373] = 0;
  _$jscoverage['js/vs_core.js'][1377] = 0;
  _$jscoverage['js/vs_core.js'][1401] = 0;
  _$jscoverage['js/vs_core.js'][1403] = 0;
  _$jscoverage['js/vs_core.js'][1405] = 0;
  _$jscoverage['js/vs_core.js'][1406] = 0;
  _$jscoverage['js/vs_core.js'][1407] = 0;
  _$jscoverage['js/vs_core.js'][1409] = 0;
  _$jscoverage['js/vs_core.js'][1410] = 0;
  _$jscoverage['js/vs_core.js'][1412] = 0;
  _$jscoverage['js/vs_core.js'][1415] = 0;
  _$jscoverage['js/vs_core.js'][1417] = 0;
  _$jscoverage['js/vs_core.js'][1419] = 0;
  _$jscoverage['js/vs_core.js'][1420] = 0;
  _$jscoverage['js/vs_core.js'][1422] = 0;
  _$jscoverage['js/vs_core.js'][1424] = 0;
  _$jscoverage['js/vs_core.js'][1426] = 0;
  _$jscoverage['js/vs_core.js'][1428] = 0;
  _$jscoverage['js/vs_core.js'][1429] = 0;
  _$jscoverage['js/vs_core.js'][1432] = 0;
  _$jscoverage['js/vs_core.js'][1446] = 0;
  _$jscoverage['js/vs_core.js'][1447] = 0;
  _$jscoverage['js/vs_core.js'][1448] = 0;
  _$jscoverage['js/vs_core.js'][1450] = 0;
  _$jscoverage['js/vs_core.js'][1480] = 0;
  _$jscoverage['js/vs_core.js'][1483] = 0;
  _$jscoverage['js/vs_core.js'][1485] = 0;
  _$jscoverage['js/vs_core.js'][1487] = 0;
  _$jscoverage['js/vs_core.js'][1488] = 0;
  _$jscoverage['js/vs_core.js'][1490] = 0;
  _$jscoverage['js/vs_core.js'][1492] = 0;
  _$jscoverage['js/vs_core.js'][1510] = 0;
  _$jscoverage['js/vs_core.js'][1511] = 0;
  _$jscoverage['js/vs_core.js'][1513] = 0;
  _$jscoverage['js/vs_core.js'][1515] = 0;
  _$jscoverage['js/vs_core.js'][1516] = 0;
  _$jscoverage['js/vs_core.js'][1518] = 0;
  _$jscoverage['js/vs_core.js'][1520] = 0;
  _$jscoverage['js/vs_core.js'][1522] = 0;
  _$jscoverage['js/vs_core.js'][1524] = 0;
  _$jscoverage['js/vs_core.js'][1525] = 0;
  _$jscoverage['js/vs_core.js'][1527] = 0;
  _$jscoverage['js/vs_core.js'][1531] = 0;
  _$jscoverage['js/vs_core.js'][1532] = 0;
  _$jscoverage['js/vs_core.js'][1535] = 0;
  _$jscoverage['js/vs_core.js'][1537] = 0;
  _$jscoverage['js/vs_core.js'][1559] = 0;
  _$jscoverage['js/vs_core.js'][1560] = 0;
  _$jscoverage['js/vs_core.js'][1562] = 0;
  _$jscoverage['js/vs_core.js'][1564] = 0;
  _$jscoverage['js/vs_core.js'][1565] = 0;
  _$jscoverage['js/vs_core.js'][1567] = 0;
  _$jscoverage['js/vs_core.js'][1569] = 0;
  _$jscoverage['js/vs_core.js'][1570] = 0;
  _$jscoverage['js/vs_core.js'][1572] = 0;
  _$jscoverage['js/vs_core.js'][1573] = 0;
  _$jscoverage['js/vs_core.js'][1575] = 0;
  _$jscoverage['js/vs_core.js'][1577] = 0;
  _$jscoverage['js/vs_core.js'][1580] = 0;
  _$jscoverage['js/vs_core.js'][1582] = 0;
  _$jscoverage['js/vs_core.js'][1584] = 0;
  _$jscoverage['js/vs_core.js'][1588] = 0;
  _$jscoverage['js/vs_core.js'][1592] = 0;
  _$jscoverage['js/vs_core.js'][1595] = 0;
  _$jscoverage['js/vs_core.js'][1597] = 0;
  _$jscoverage['js/vs_core.js'][1598] = 0;
  _$jscoverage['js/vs_core.js'][1603] = 0;
  _$jscoverage['js/vs_core.js'][1618] = 0;
  _$jscoverage['js/vs_core.js'][1637] = 0;
  _$jscoverage['js/vs_core.js'][1638] = 0;
  _$jscoverage['js/vs_core.js'][1640] = 0;
  _$jscoverage['js/vs_core.js'][1642] = 0;
  _$jscoverage['js/vs_core.js'][1643] = 0;
  _$jscoverage['js/vs_core.js'][1645] = 0;
  _$jscoverage['js/vs_core.js'][1647] = 0;
  _$jscoverage['js/vs_core.js'][1649] = 0;
  _$jscoverage['js/vs_core.js'][1652] = 0;
  _$jscoverage['js/vs_core.js'][1654] = 0;
  _$jscoverage['js/vs_core.js'][1655] = 0;
  _$jscoverage['js/vs_core.js'][1659] = 0;
  _$jscoverage['js/vs_core.js'][1660] = 0;
  _$jscoverage['js/vs_core.js'][1663] = 0;
  _$jscoverage['js/vs_core.js'][1668] = 0;
  _$jscoverage['js/vs_core.js'][1673] = 0;
  _$jscoverage['js/vs_core.js'][1675] = 0;
  _$jscoverage['js/vs_core.js'][1676] = 0;
  _$jscoverage['js/vs_core.js'][1678] = 0;
  _$jscoverage['js/vs_core.js'][1679] = 0;
  _$jscoverage['js/vs_core.js'][1683] = 0;
  _$jscoverage['js/vs_core.js'][1689] = 0;
  _$jscoverage['js/vs_core.js'][1692] = 0;
  _$jscoverage['js/vs_core.js'][1694] = 0;
  _$jscoverage['js/vs_core.js'][1696] = 0;
  _$jscoverage['js/vs_core.js'][1698] = 0;
  _$jscoverage['js/vs_core.js'][1699] = 0;
  _$jscoverage['js/vs_core.js'][1700] = 0;
  _$jscoverage['js/vs_core.js'][1701] = 0;
  _$jscoverage['js/vs_core.js'][1702] = 0;
  _$jscoverage['js/vs_core.js'][1703] = 0;
  _$jscoverage['js/vs_core.js'][1704] = 0;
  _$jscoverage['js/vs_core.js'][1705] = 0;
  _$jscoverage['js/vs_core.js'][1706] = 0;
  _$jscoverage['js/vs_core.js'][1707] = 0;
  _$jscoverage['js/vs_core.js'][1708] = 0;
  _$jscoverage['js/vs_core.js'][1710] = 0;
  _$jscoverage['js/vs_core.js'][1711] = 0;
  _$jscoverage['js/vs_core.js'][1715] = 0;
  _$jscoverage['js/vs_core.js'][1721] = 0;
  _$jscoverage['js/vs_core.js'][1722] = 0;
  _$jscoverage['js/vs_core.js'][1724] = 0;
  _$jscoverage['js/vs_core.js'][1725] = 0;
  _$jscoverage['js/vs_core.js'][1727] = 0;
  _$jscoverage['js/vs_core.js'][1728] = 0;
  _$jscoverage['js/vs_core.js'][1730] = 0;
  _$jscoverage['js/vs_core.js'][1731] = 0;
  _$jscoverage['js/vs_core.js'][1733] = 0;
  _$jscoverage['js/vs_core.js'][1736] = 0;
  _$jscoverage['js/vs_core.js'][1753] = 0;
  _$jscoverage['js/vs_core.js'][1754] = 0;
  _$jscoverage['js/vs_core.js'][1756] = 0;
  _$jscoverage['js/vs_core.js'][1757] = 0;
  _$jscoverage['js/vs_core.js'][1758] = 0;
  _$jscoverage['js/vs_core.js'][1760] = 0;
  _$jscoverage['js/vs_core.js'][1762] = 0;
  _$jscoverage['js/vs_core.js'][1763] = 0;
  _$jscoverage['js/vs_core.js'][1766] = 0;
  _$jscoverage['js/vs_core.js'][1768] = 0;
  _$jscoverage['js/vs_core.js'][1769] = 0;
  _$jscoverage['js/vs_core.js'][1773] = 0;
  _$jscoverage['js/vs_core.js'][1774] = 0;
  _$jscoverage['js/vs_core.js'][1777] = 0;
  _$jscoverage['js/vs_core.js'][1778] = 0;
  _$jscoverage['js/vs_core.js'][1779] = 0;
  _$jscoverage['js/vs_core.js'][1781] = 0;
  _$jscoverage['js/vs_core.js'][1783] = 0;
  _$jscoverage['js/vs_core.js'][1785] = 0;
  _$jscoverage['js/vs_core.js'][1787] = 0;
  _$jscoverage['js/vs_core.js'][1788] = 0;
  _$jscoverage['js/vs_core.js'][1790] = 0;
  _$jscoverage['js/vs_core.js'][1791] = 0;
  _$jscoverage['js/vs_core.js'][1795] = 0;
  _$jscoverage['js/vs_core.js'][1800] = 0;
  _$jscoverage['js/vs_core.js'][1891] = 0;
  _$jscoverage['js/vs_core.js'][1897] = 0;
  _$jscoverage['js/vs_core.js'][1951] = 0;
  _$jscoverage['js/vs_core.js'][1956] = 0;
  _$jscoverage['js/vs_core.js'][1961] = 0;
  _$jscoverage['js/vs_core.js'][1987] = 0;
  _$jscoverage['js/vs_core.js'][1989] = 0;
  _$jscoverage['js/vs_core.js'][1991] = 0;
  _$jscoverage['js/vs_core.js'][1992] = 0;
  _$jscoverage['js/vs_core.js'][1994] = 0;
  _$jscoverage['js/vs_core.js'][1996] = 0;
  _$jscoverage['js/vs_core.js'][1999] = 0;
  _$jscoverage['js/vs_core.js'][2000] = 0;
  _$jscoverage['js/vs_core.js'][2002] = 0;
  _$jscoverage['js/vs_core.js'][2007] = 0;
  _$jscoverage['js/vs_core.js'][2009] = 0;
  _$jscoverage['js/vs_core.js'][2012] = 0;
  _$jscoverage['js/vs_core.js'][2015] = 0;
  _$jscoverage['js/vs_core.js'][2016] = 0;
  _$jscoverage['js/vs_core.js'][2018] = 0;
  _$jscoverage['js/vs_core.js'][2021] = 0;
  _$jscoverage['js/vs_core.js'][2022] = 0;
  _$jscoverage['js/vs_core.js'][2024] = 0;
  _$jscoverage['js/vs_core.js'][2026] = 0;
  _$jscoverage['js/vs_core.js'][2027] = 0;
  _$jscoverage['js/vs_core.js'][2029] = 0;
  _$jscoverage['js/vs_core.js'][2031] = 0;
  _$jscoverage['js/vs_core.js'][2032] = 0;
  _$jscoverage['js/vs_core.js'][2037] = 0;
  _$jscoverage['js/vs_core.js'][2038] = 0;
  _$jscoverage['js/vs_core.js'][2041] = 0;
  _$jscoverage['js/vs_core.js'][2044] = 0;
  _$jscoverage['js/vs_core.js'][2049] = 0;
  _$jscoverage['js/vs_core.js'][2051] = 0;
  _$jscoverage['js/vs_core.js'][2052] = 0;
  _$jscoverage['js/vs_core.js'][2054] = 0;
  _$jscoverage['js/vs_core.js'][2056] = 0;
  _$jscoverage['js/vs_core.js'][2057] = 0;
  _$jscoverage['js/vs_core.js'][2059] = 0;
  _$jscoverage['js/vs_core.js'][2060] = 0;
  _$jscoverage['js/vs_core.js'][2065] = 0;
  _$jscoverage['js/vs_core.js'][2066] = 0;
  _$jscoverage['js/vs_core.js'][2067] = 0;
  _$jscoverage['js/vs_core.js'][2068] = 0;
  _$jscoverage['js/vs_core.js'][2069] = 0;
  _$jscoverage['js/vs_core.js'][2070] = 0;
  _$jscoverage['js/vs_core.js'][2071] = 0;
  _$jscoverage['js/vs_core.js'][2072] = 0;
  _$jscoverage['js/vs_core.js'][2073] = 0;
  _$jscoverage['js/vs_core.js'][2075] = 0;
  _$jscoverage['js/vs_core.js'][2076] = 0;
  _$jscoverage['js/vs_core.js'][2077] = 0;
  _$jscoverage['js/vs_core.js'][2078] = 0;
  _$jscoverage['js/vs_core.js'][2080] = 0;
  _$jscoverage['js/vs_core.js'][2081] = 0;
  _$jscoverage['js/vs_core.js'][2082] = 0;
  _$jscoverage['js/vs_core.js'][2085] = 0;
  _$jscoverage['js/vs_core.js'][2086] = 0;
  _$jscoverage['js/vs_core.js'][2088] = 0;
  _$jscoverage['js/vs_core.js'][2089] = 0;
  _$jscoverage['js/vs_core.js'][2090] = 0;
  _$jscoverage['js/vs_core.js'][2095] = 0;
  _$jscoverage['js/vs_core.js'][2096] = 0;
  _$jscoverage['js/vs_core.js'][2198] = 0;
  _$jscoverage['js/vs_core.js'][2200] = 0;
  _$jscoverage['js/vs_core.js'][2201] = 0;
  _$jscoverage['js/vs_core.js'][2202] = 0;
  _$jscoverage['js/vs_core.js'][2204] = 0;
  _$jscoverage['js/vs_core.js'][2206] = 0;
  _$jscoverage['js/vs_core.js'][2207] = 0;
  _$jscoverage['js/vs_core.js'][2208] = 0;
  _$jscoverage['js/vs_core.js'][2210] = 0;
  _$jscoverage['js/vs_core.js'][2211] = 0;
  _$jscoverage['js/vs_core.js'][2213] = 0;
  _$jscoverage['js/vs_core.js'][2214] = 0;
  _$jscoverage['js/vs_core.js'][2217] = 0;
  _$jscoverage['js/vs_core.js'][2225] = 0;
  _$jscoverage['js/vs_core.js'][2227] = 0;
  _$jscoverage['js/vs_core.js'][2229] = 0;
  _$jscoverage['js/vs_core.js'][2230] = 0;
  _$jscoverage['js/vs_core.js'][2231] = 0;
  _$jscoverage['js/vs_core.js'][2232] = 0;
  _$jscoverage['js/vs_core.js'][2233] = 0;
  _$jscoverage['js/vs_core.js'][2246] = 0;
  _$jscoverage['js/vs_core.js'][2248] = 0;
  _$jscoverage['js/vs_core.js'][2249] = 0;
  _$jscoverage['js/vs_core.js'][2251] = 0;
  _$jscoverage['js/vs_core.js'][2252] = 0;
  _$jscoverage['js/vs_core.js'][2256] = 0;
  _$jscoverage['js/vs_core.js'][2274] = 0;
  _$jscoverage['js/vs_core.js'][2276] = 0;
  _$jscoverage['js/vs_core.js'][2277] = 0;
  _$jscoverage['js/vs_core.js'][2279] = 0;
  _$jscoverage['js/vs_core.js'][2280] = 0;
  _$jscoverage['js/vs_core.js'][2282] = 0;
  _$jscoverage['js/vs_core.js'][2283] = 0;
  _$jscoverage['js/vs_core.js'][2285] = 0;
  _$jscoverage['js/vs_core.js'][2287] = 0;
  _$jscoverage['js/vs_core.js'][2326] = 0;
  _$jscoverage['js/vs_core.js'][2327] = 0;
  _$jscoverage['js/vs_core.js'][2330] = 0;
  _$jscoverage['js/vs_core.js'][2332] = 0;
  _$jscoverage['js/vs_core.js'][2334] = 0;
  _$jscoverage['js/vs_core.js'][2336] = 0;
  _$jscoverage['js/vs_core.js'][2337] = 0;
  _$jscoverage['js/vs_core.js'][2338] = 0;
  _$jscoverage['js/vs_core.js'][2340] = 0;
  _$jscoverage['js/vs_core.js'][2341] = 0;
  _$jscoverage['js/vs_core.js'][2342] = 0;
  _$jscoverage['js/vs_core.js'][2344] = 0;
  _$jscoverage['js/vs_core.js'][2365] = 0;
  _$jscoverage['js/vs_core.js'][2367] = 0;
  _$jscoverage['js/vs_core.js'][2380] = 0;
  _$jscoverage['js/vs_core.js'][2394] = 0;
  _$jscoverage['js/vs_core.js'][2396] = 0;
  _$jscoverage['js/vs_core.js'][2413] = 0;
  _$jscoverage['js/vs_core.js'][2415] = 0;
  _$jscoverage['js/vs_core.js'][2428] = 0;
  _$jscoverage['js/vs_core.js'][2442] = 0;
  _$jscoverage['js/vs_core.js'][2444] = 0;
  _$jscoverage['js/vs_core.js'][2460] = 0;
  _$jscoverage['js/vs_core.js'][2462] = 0;
  _$jscoverage['js/vs_core.js'][2463] = 0;
  _$jscoverage['js/vs_core.js'][2465] = 0;
  _$jscoverage['js/vs_core.js'][2466] = 0;
  _$jscoverage['js/vs_core.js'][2479] = 0;
  _$jscoverage['js/vs_core.js'][2481] = 0;
  _$jscoverage['js/vs_core.js'][2482] = 0;
  _$jscoverage['js/vs_core.js'][2496] = 0;
  _$jscoverage['js/vs_core.js'][2497] = 0;
  _$jscoverage['js/vs_core.js'][2500] = 0;
  _$jscoverage['js/vs_core.js'][2501] = 0;
  _$jscoverage['js/vs_core.js'][2504] = 0;
  _$jscoverage['js/vs_core.js'][2506] = 0;
  _$jscoverage['js/vs_core.js'][2510] = 0;
  _$jscoverage['js/vs_core.js'][2512] = 0;
  _$jscoverage['js/vs_core.js'][2513] = 0;
  _$jscoverage['js/vs_core.js'][2515] = 0;
  _$jscoverage['js/vs_core.js'][2517] = 0;
  _$jscoverage['js/vs_core.js'][2519] = 0;
  _$jscoverage['js/vs_core.js'][2521] = 0;
  _$jscoverage['js/vs_core.js'][2526] = 0;
  _$jscoverage['js/vs_core.js'][2539] = 0;
  _$jscoverage['js/vs_core.js'][2541] = 0;
  _$jscoverage['js/vs_core.js'][2543] = 0;
  _$jscoverage['js/vs_core.js'][2545] = 0;
  _$jscoverage['js/vs_core.js'][2559] = 0;
  _$jscoverage['js/vs_core.js'][2561] = 0;
  _$jscoverage['js/vs_core.js'][2562] = 0;
  _$jscoverage['js/vs_core.js'][2581] = 0;
  _$jscoverage['js/vs_core.js'][2582] = 0;
  _$jscoverage['js/vs_core.js'][2583] = 0;
  _$jscoverage['js/vs_core.js'][2585] = 0;
  _$jscoverage['js/vs_core.js'][2590] = 0;
  _$jscoverage['js/vs_core.js'][2604] = 0;
  _$jscoverage['js/vs_core.js'][2605] = 0;
  _$jscoverage['js/vs_core.js'][2607] = 0;
  _$jscoverage['js/vs_core.js'][2608] = 0;
  _$jscoverage['js/vs_core.js'][2610] = 0;
  _$jscoverage['js/vs_core.js'][2625] = 0;
  _$jscoverage['js/vs_core.js'][2626] = 0;
  _$jscoverage['js/vs_core.js'][2629] = 0;
  _$jscoverage['js/vs_core.js'][2631] = 0;
  _$jscoverage['js/vs_core.js'][2632] = 0;
  _$jscoverage['js/vs_core.js'][2633] = 0;
  _$jscoverage['js/vs_core.js'][2635] = 0;
  _$jscoverage['js/vs_core.js'][2650] = 0;
  _$jscoverage['js/vs_core.js'][2652] = 0;
  _$jscoverage['js/vs_core.js'][2654] = 0;
  _$jscoverage['js/vs_core.js'][2656] = 0;
  _$jscoverage['js/vs_core.js'][2657] = 0;
  _$jscoverage['js/vs_core.js'][2659] = 0;
  _$jscoverage['js/vs_core.js'][2661] = 0;
  _$jscoverage['js/vs_core.js'][2663] = 0;
  _$jscoverage['js/vs_core.js'][2665] = 0;
  _$jscoverage['js/vs_core.js'][2666] = 0;
  _$jscoverage['js/vs_core.js'][2667] = 0;
  _$jscoverage['js/vs_core.js'][2671] = 0;
  _$jscoverage['js/vs_core.js'][2685] = 0;
  _$jscoverage['js/vs_core.js'][2687] = 0;
  _$jscoverage['js/vs_core.js'][2689] = 0;
  _$jscoverage['js/vs_core.js'][2690] = 0;
  _$jscoverage['js/vs_core.js'][2692] = 0;
  _$jscoverage['js/vs_core.js'][2694] = 0;
  _$jscoverage['js/vs_core.js'][2696] = 0;
  _$jscoverage['js/vs_core.js'][2697] = 0;
  _$jscoverage['js/vs_core.js'][2698] = 0;
  _$jscoverage['js/vs_core.js'][2701] = 0;
  _$jscoverage['js/vs_core.js'][2718] = 0;
  _$jscoverage['js/vs_core.js'][2720] = 0;
  _$jscoverage['js/vs_core.js'][2721] = 0;
  _$jscoverage['js/vs_core.js'][2725] = 0;
  _$jscoverage['js/vs_core.js'][2726] = 0;
  _$jscoverage['js/vs_core.js'][2727] = 0;
  _$jscoverage['js/vs_core.js'][2728] = 0;
  _$jscoverage['js/vs_core.js'][2732] = 0;
  _$jscoverage['js/vs_core.js'][2734] = 0;
  _$jscoverage['js/vs_core.js'][2735] = 0;
  _$jscoverage['js/vs_core.js'][2736] = 0;
  _$jscoverage['js/vs_core.js'][2738] = 0;
  _$jscoverage['js/vs_core.js'][2740] = 0;
  _$jscoverage['js/vs_core.js'][2741] = 0;
  _$jscoverage['js/vs_core.js'][2742] = 0;
  _$jscoverage['js/vs_core.js'][2746] = 0;
  _$jscoverage['js/vs_core.js'][2748] = 0;
  _$jscoverage['js/vs_core.js'][2749] = 0;
  _$jscoverage['js/vs_core.js'][2751] = 0;
  _$jscoverage['js/vs_core.js'][2753] = 0;
  _$jscoverage['js/vs_core.js'][2754] = 0;
  _$jscoverage['js/vs_core.js'][2756] = 0;
  _$jscoverage['js/vs_core.js'][2758] = 0;
  _$jscoverage['js/vs_core.js'][2759] = 0;
  _$jscoverage['js/vs_core.js'][2761] = 0;
  _$jscoverage['js/vs_core.js'][2763] = 0;
  _$jscoverage['js/vs_core.js'][2764] = 0;
  _$jscoverage['js/vs_core.js'][2768] = 0;
  _$jscoverage['js/vs_core.js'][2770] = 0;
  _$jscoverage['js/vs_core.js'][2772] = 0;
  _$jscoverage['js/vs_core.js'][2773] = 0;
  _$jscoverage['js/vs_core.js'][2775] = 0;
  _$jscoverage['js/vs_core.js'][2777] = 0;
  _$jscoverage['js/vs_core.js'][2779] = 0;
  _$jscoverage['js/vs_core.js'][2780] = 0;
  _$jscoverage['js/vs_core.js'][2782] = 0;
  _$jscoverage['js/vs_core.js'][2784] = 0;
  _$jscoverage['js/vs_core.js'][2786] = 0;
  _$jscoverage['js/vs_core.js'][2787] = 0;
  _$jscoverage['js/vs_core.js'][2789] = 0;
  _$jscoverage['js/vs_core.js'][2791] = 0;
  _$jscoverage['js/vs_core.js'][2793] = 0;
  _$jscoverage['js/vs_core.js'][2794] = 0;
  _$jscoverage['js/vs_core.js'][2797] = 0;
  _$jscoverage['js/vs_core.js'][2798] = 0;
  _$jscoverage['js/vs_core.js'][2799] = 0;
  _$jscoverage['js/vs_core.js'][2800] = 0;
  _$jscoverage['js/vs_core.js'][2825] = 0;
  _$jscoverage['js/vs_core.js'][2827] = 0;
  _$jscoverage['js/vs_core.js'][2829] = 0;
  _$jscoverage['js/vs_core.js'][2831] = 0;
  _$jscoverage['js/vs_core.js'][2833] = 0;
  _$jscoverage['js/vs_core.js'][2835] = 0;
  _$jscoverage['js/vs_core.js'][2837] = 0;
  _$jscoverage['js/vs_core.js'][2838] = 0;
  _$jscoverage['js/vs_core.js'][2840] = 0;
  _$jscoverage['js/vs_core.js'][2841] = 0;
  _$jscoverage['js/vs_core.js'][2843] = 0;
  _$jscoverage['js/vs_core.js'][2865] = 0;
  _$jscoverage['js/vs_core.js'][2867] = 0;
  _$jscoverage['js/vs_core.js'][2886] = 0;
  _$jscoverage['js/vs_core.js'][2887] = 0;
  _$jscoverage['js/vs_core.js'][2889] = 0;
  _$jscoverage['js/vs_core.js'][2890] = 0;
  _$jscoverage['js/vs_core.js'][2911] = 0;
  _$jscoverage['js/vs_core.js'][2913] = 0;
  _$jscoverage['js/vs_core.js'][2914] = 0;
  _$jscoverage['js/vs_core.js'][2917] = 0;
  _$jscoverage['js/vs_core.js'][2919] = 0;
  _$jscoverage['js/vs_core.js'][2923] = 0;
  _$jscoverage['js/vs_core.js'][2925] = 0;
  _$jscoverage['js/vs_core.js'][2927] = 0;
  _$jscoverage['js/vs_core.js'][2928] = 0;
  _$jscoverage['js/vs_core.js'][2930] = 0;
  _$jscoverage['js/vs_core.js'][2932] = 0;
  _$jscoverage['js/vs_core.js'][2934] = 0;
  _$jscoverage['js/vs_core.js'][2938] = 0;
  _$jscoverage['js/vs_core.js'][2950] = 0;
  _$jscoverage['js/vs_core.js'][2952] = 0;
  _$jscoverage['js/vs_core.js'][2953] = 0;
  _$jscoverage['js/vs_core.js'][2955] = 0;
  _$jscoverage['js/vs_core.js'][2956] = 0;
  _$jscoverage['js/vs_core.js'][2958] = 0;
  _$jscoverage['js/vs_core.js'][2961] = 0;
  _$jscoverage['js/vs_core.js'][2963] = 0;
  _$jscoverage['js/vs_core.js'][2965] = 0;
  _$jscoverage['js/vs_core.js'][2967] = 0;
  _$jscoverage['js/vs_core.js'][2968] = 0;
  _$jscoverage['js/vs_core.js'][2969] = 0;
  _$jscoverage['js/vs_core.js'][2971] = 0;
  _$jscoverage['js/vs_core.js'][2973] = 0;
  _$jscoverage['js/vs_core.js'][2975] = 0;
  _$jscoverage['js/vs_core.js'][2980] = 0;
  _$jscoverage['js/vs_core.js'][2993] = 0;
  _$jscoverage['js/vs_core.js'][2994] = 0;
  _$jscoverage['js/vs_core.js'][2996] = 0;
  _$jscoverage['js/vs_core.js'][2998] = 0;
  _$jscoverage['js/vs_core.js'][2999] = 0;
  _$jscoverage['js/vs_core.js'][3001] = 0;
  _$jscoverage['js/vs_core.js'][3003] = 0;
  _$jscoverage['js/vs_core.js'][3018] = 0;
  _$jscoverage['js/vs_core.js'][3020] = 0;
  _$jscoverage['js/vs_core.js'][3023] = 0;
  _$jscoverage['js/vs_core.js'][3025] = 0;
  _$jscoverage['js/vs_core.js'][3026] = 0;
  _$jscoverage['js/vs_core.js'][3029] = 0;
  _$jscoverage['js/vs_core.js'][3035] = 0;
  _$jscoverage['js/vs_core.js'][3045] = 0;
  _$jscoverage['js/vs_core.js'][3047] = 0;
  _$jscoverage['js/vs_core.js'][3048] = 0;
  _$jscoverage['js/vs_core.js'][3051] = 0;
  _$jscoverage['js/vs_core.js'][3054] = 0;
  _$jscoverage['js/vs_core.js'][3062] = 0;
  _$jscoverage['js/vs_core.js'][3072] = 0;
  _$jscoverage['js/vs_core.js'][3091] = 0;
  _$jscoverage['js/vs_core.js'][3093] = 0;
  _$jscoverage['js/vs_core.js'][3094] = 0;
  _$jscoverage['js/vs_core.js'][3095] = 0;
  _$jscoverage['js/vs_core.js'][3096] = 0;
  _$jscoverage['js/vs_core.js'][3097] = 0;
  _$jscoverage['js/vs_core.js'][3100] = 0;
  _$jscoverage['js/vs_core.js'][3104] = 0;
  _$jscoverage['js/vs_core.js'][3106] = 0;
  _$jscoverage['js/vs_core.js'][3108] = 0;
  _$jscoverage['js/vs_core.js'][3110] = 0;
  _$jscoverage['js/vs_core.js'][3112] = 0;
  _$jscoverage['js/vs_core.js'][3113] = 0;
  _$jscoverage['js/vs_core.js'][3115] = 0;
  _$jscoverage['js/vs_core.js'][3116] = 0;
  _$jscoverage['js/vs_core.js'][3119] = 0;
  _$jscoverage['js/vs_core.js'][3121] = 0;
  _$jscoverage['js/vs_core.js'][3122] = 0;
  _$jscoverage['js/vs_core.js'][3124] = 0;
  _$jscoverage['js/vs_core.js'][3125] = 0;
  _$jscoverage['js/vs_core.js'][3127] = 0;
  _$jscoverage['js/vs_core.js'][3129] = 0;
  _$jscoverage['js/vs_core.js'][3130] = 0;
  _$jscoverage['js/vs_core.js'][3132] = 0;
  _$jscoverage['js/vs_core.js'][3135] = 0;
  _$jscoverage['js/vs_core.js'][3137] = 0;
  _$jscoverage['js/vs_core.js'][3138] = 0;
  _$jscoverage['js/vs_core.js'][3140] = 0;
  _$jscoverage['js/vs_core.js'][3144] = 0;
  _$jscoverage['js/vs_core.js'][3147] = 0;
  _$jscoverage['js/vs_core.js'][3154] = 0;
  _$jscoverage['js/vs_core.js'][3156] = 0;
  _$jscoverage['js/vs_core.js'][3158] = 0;
  _$jscoverage['js/vs_core.js'][3159] = 0;
  _$jscoverage['js/vs_core.js'][3162] = 0;
  _$jscoverage['js/vs_core.js'][3163] = 0;
  _$jscoverage['js/vs_core.js'][3166] = 0;
  _$jscoverage['js/vs_core.js'][3168] = 0;
  _$jscoverage['js/vs_core.js'][3169] = 0;
  _$jscoverage['js/vs_core.js'][3174] = 0;
  _$jscoverage['js/vs_core.js'][3176] = 0;
  _$jscoverage['js/vs_core.js'][3177] = 0;
  _$jscoverage['js/vs_core.js'][3179] = 0;
  _$jscoverage['js/vs_core.js'][3181] = 0;
  _$jscoverage['js/vs_core.js'][3182] = 0;
  _$jscoverage['js/vs_core.js'][3185] = 0;
  _$jscoverage['js/vs_core.js'][3187] = 0;
  _$jscoverage['js/vs_core.js'][3192] = 0;
  _$jscoverage['js/vs_core.js'][3194] = 0;
  _$jscoverage['js/vs_core.js'][3195] = 0;
  _$jscoverage['js/vs_core.js'][3197] = 0;
  _$jscoverage['js/vs_core.js'][3198] = 0;
  _$jscoverage['js/vs_core.js'][3201] = 0;
  _$jscoverage['js/vs_core.js'][3204] = 0;
  _$jscoverage['js/vs_core.js'][3206] = 0;
  _$jscoverage['js/vs_core.js'][3208] = 0;
  _$jscoverage['js/vs_core.js'][3209] = 0;
  _$jscoverage['js/vs_core.js'][3211] = 0;
  _$jscoverage['js/vs_core.js'][3214] = 0;
  _$jscoverage['js/vs_core.js'][3217] = 0;
  _$jscoverage['js/vs_core.js'][3218] = 0;
  _$jscoverage['js/vs_core.js'][3219] = 0;
  _$jscoverage['js/vs_core.js'][3221] = 0;
  _$jscoverage['js/vs_core.js'][3222] = 0;
  _$jscoverage['js/vs_core.js'][3224] = 0;
  _$jscoverage['js/vs_core.js'][3227] = 0;
  _$jscoverage['js/vs_core.js'][3229] = 0;
  _$jscoverage['js/vs_core.js'][3230] = 0;
  _$jscoverage['js/vs_core.js'][3231] = 0;
  _$jscoverage['js/vs_core.js'][3233] = 0;
  _$jscoverage['js/vs_core.js'][3236] = 0;
  _$jscoverage['js/vs_core.js'][3238] = 0;
  _$jscoverage['js/vs_core.js'][3243] = 0;
  _$jscoverage['js/vs_core.js'][3244] = 0;
  _$jscoverage['js/vs_core.js'][3249] = 0;
  _$jscoverage['js/vs_core.js'][3250] = 0;
  _$jscoverage['js/vs_core.js'][3258] = 0;
  _$jscoverage['js/vs_core.js'][3266] = 0;
  _$jscoverage['js/vs_core.js'][3267] = 0;
  _$jscoverage['js/vs_core.js'][3272] = 0;
  _$jscoverage['js/vs_core.js'][3274] = 0;
  _$jscoverage['js/vs_core.js'][3276] = 0;
  _$jscoverage['js/vs_core.js'][3277] = 0;
  _$jscoverage['js/vs_core.js'][3278] = 0;
  _$jscoverage['js/vs_core.js'][3280] = 0;
  _$jscoverage['js/vs_core.js'][3281] = 0;
  _$jscoverage['js/vs_core.js'][3283] = 0;
  _$jscoverage['js/vs_core.js'][3285] = 0;
  _$jscoverage['js/vs_core.js'][3287] = 0;
  _$jscoverage['js/vs_core.js'][3289] = 0;
  _$jscoverage['js/vs_core.js'][3290] = 0;
  _$jscoverage['js/vs_core.js'][3292] = 0;
  _$jscoverage['js/vs_core.js'][3294] = 0;
  _$jscoverage['js/vs_core.js'][3296] = 0;
  _$jscoverage['js/vs_core.js'][3298] = 0;
  _$jscoverage['js/vs_core.js'][3300] = 0;
  _$jscoverage['js/vs_core.js'][3301] = 0;
  _$jscoverage['js/vs_core.js'][3303] = 0;
  _$jscoverage['js/vs_core.js'][3305] = 0;
  _$jscoverage['js/vs_core.js'][3307] = 0;
  _$jscoverage['js/vs_core.js'][3309] = 0;
  _$jscoverage['js/vs_core.js'][3311] = 0;
  _$jscoverage['js/vs_core.js'][3312] = 0;
  _$jscoverage['js/vs_core.js'][3314] = 0;
  _$jscoverage['js/vs_core.js'][3316] = 0;
  _$jscoverage['js/vs_core.js'][3318] = 0;
  _$jscoverage['js/vs_core.js'][3320] = 0;
  _$jscoverage['js/vs_core.js'][3322] = 0;
  _$jscoverage['js/vs_core.js'][3323] = 0;
  _$jscoverage['js/vs_core.js'][3325] = 0;
  _$jscoverage['js/vs_core.js'][3327] = 0;
  _$jscoverage['js/vs_core.js'][3332] = 0;
  _$jscoverage['js/vs_core.js'][3387] = 0;
  _$jscoverage['js/vs_core.js'][3389] = 0;
  _$jscoverage['js/vs_core.js'][3390] = 0;
  _$jscoverage['js/vs_core.js'][3391] = 0;
  _$jscoverage['js/vs_core.js'][3392] = 0;
  _$jscoverage['js/vs_core.js'][3399] = 0;
  _$jscoverage['js/vs_core.js'][3406] = 0;
  _$jscoverage['js/vs_core.js'][3413] = 0;
  _$jscoverage['js/vs_core.js'][3415] = 0;
  _$jscoverage['js/vs_core.js'][3482] = 0;
  _$jscoverage['js/vs_core.js'][3488] = 0;
  _$jscoverage['js/vs_core.js'][3501] = 0;
  _$jscoverage['js/vs_core.js'][3562] = 0;
  _$jscoverage['js/vs_core.js'][3564] = 0;
  _$jscoverage['js/vs_core.js'][3565] = 0;
  _$jscoverage['js/vs_core.js'][3566] = 0;
  _$jscoverage['js/vs_core.js'][3568] = 0;
  _$jscoverage['js/vs_core.js'][3570] = 0;
  _$jscoverage['js/vs_core.js'][3571] = 0;
  _$jscoverage['js/vs_core.js'][3573] = 0;
  _$jscoverage['js/vs_core.js'][3605] = 0;
  _$jscoverage['js/vs_core.js'][3606] = 0;
  _$jscoverage['js/vs_core.js'][3608] = 0;
  _$jscoverage['js/vs_core.js'][3609] = 0;
  _$jscoverage['js/vs_core.js'][3611] = 0;
  _$jscoverage['js/vs_core.js'][3612] = 0;
  _$jscoverage['js/vs_core.js'][3614] = 0;
  _$jscoverage['js/vs_core.js'][3616] = 0;
  _$jscoverage['js/vs_core.js'][3618] = 0;
  _$jscoverage['js/vs_core.js'][3620] = 0;
  _$jscoverage['js/vs_core.js'][3622] = 0;
  _$jscoverage['js/vs_core.js'][3624] = 0;
  _$jscoverage['js/vs_core.js'][3625] = 0;
  _$jscoverage['js/vs_core.js'][3630] = 0;
  _$jscoverage['js/vs_core.js'][3631] = 0;
  _$jscoverage['js/vs_core.js'][3634] = 0;
  _$jscoverage['js/vs_core.js'][3636] = 0;
  _$jscoverage['js/vs_core.js'][3637] = 0;
  _$jscoverage['js/vs_core.js'][3640] = 0;
  _$jscoverage['js/vs_core.js'][3642] = 0;
  _$jscoverage['js/vs_core.js'][3643] = 0;
  _$jscoverage['js/vs_core.js'][3646] = 0;
  _$jscoverage['js/vs_core.js'][3660] = 0;
  _$jscoverage['js/vs_core.js'][3661] = 0;
  _$jscoverage['js/vs_core.js'][3662] = 0;
  _$jscoverage['js/vs_core.js'][3664] = 0;
  _$jscoverage['js/vs_core.js'][3665] = 0;
  _$jscoverage['js/vs_core.js'][3667] = 0;
  _$jscoverage['js/vs_core.js'][3669] = 0;
  _$jscoverage['js/vs_core.js'][3670] = 0;
  _$jscoverage['js/vs_core.js'][3673] = 0;
  _$jscoverage['js/vs_core.js'][3684] = 0;
  _$jscoverage['js/vs_core.js'][3685] = 0;
  _$jscoverage['js/vs_core.js'][3687] = 0;
  _$jscoverage['js/vs_core.js'][3688] = 0;
  _$jscoverage['js/vs_core.js'][3690] = 0;
  _$jscoverage['js/vs_core.js'][3691] = 0;
  _$jscoverage['js/vs_core.js'][3694] = 0;
  _$jscoverage['js/vs_core.js'][3705] = 0;
  _$jscoverage['js/vs_core.js'][3706] = 0;
  _$jscoverage['js/vs_core.js'][3708] = 0;
  _$jscoverage['js/vs_core.js'][3709] = 0;
  _$jscoverage['js/vs_core.js'][3711] = 0;
  _$jscoverage['js/vs_core.js'][3712] = 0;
  _$jscoverage['js/vs_core.js'][3715] = 0;
  _$jscoverage['js/vs_core.js'][3728] = 0;
  _$jscoverage['js/vs_core.js'][3730] = 0;
  _$jscoverage['js/vs_core.js'][3731] = 0;
  _$jscoverage['js/vs_core.js'][3733] = 0;
  _$jscoverage['js/vs_core.js'][3734] = 0;
  _$jscoverage['js/vs_core.js'][3744] = 0;
  _$jscoverage['js/vs_core.js'][3746] = 0;
  _$jscoverage['js/vs_core.js'][3747] = 0;
  _$jscoverage['js/vs_core.js'][3749] = 0;
  _$jscoverage['js/vs_core.js'][3750] = 0;
  _$jscoverage['js/vs_core.js'][3760] = 0;
  _$jscoverage['js/vs_core.js'][3762] = 0;
  _$jscoverage['js/vs_core.js'][3763] = 0;
  _$jscoverage['js/vs_core.js'][3765] = 0;
  _$jscoverage['js/vs_core.js'][3766] = 0;
  _$jscoverage['js/vs_core.js'][3770] = 0;
  _$jscoverage['js/vs_core.js'][3829] = 0;
  _$jscoverage['js/vs_core.js'][3831] = 0;
  _$jscoverage['js/vs_core.js'][3832] = 0;
  _$jscoverage['js/vs_core.js'][3833] = 0;
  _$jscoverage['js/vs_core.js'][3835] = 0;
  _$jscoverage['js/vs_core.js'][3837] = 0;
  _$jscoverage['js/vs_core.js'][3838] = 0;
  _$jscoverage['js/vs_core.js'][3840] = 0;
  _$jscoverage['js/vs_core.js'][3876] = 0;
  _$jscoverage['js/vs_core.js'][3877] = 0;
  _$jscoverage['js/vs_core.js'][3879] = 0;
  _$jscoverage['js/vs_core.js'][3880] = 0;
  _$jscoverage['js/vs_core.js'][3882] = 0;
  _$jscoverage['js/vs_core.js'][3883] = 0;
  _$jscoverage['js/vs_core.js'][3885] = 0;
  _$jscoverage['js/vs_core.js'][3887] = 0;
  _$jscoverage['js/vs_core.js'][3889] = 0;
  _$jscoverage['js/vs_core.js'][3891] = 0;
  _$jscoverage['js/vs_core.js'][3893] = 0;
  _$jscoverage['js/vs_core.js'][3895] = 0;
  _$jscoverage['js/vs_core.js'][3896] = 0;
  _$jscoverage['js/vs_core.js'][3901] = 0;
  _$jscoverage['js/vs_core.js'][3902] = 0;
  _$jscoverage['js/vs_core.js'][3905] = 0;
  _$jscoverage['js/vs_core.js'][3907] = 0;
  _$jscoverage['js/vs_core.js'][3908] = 0;
  _$jscoverage['js/vs_core.js'][3911] = 0;
  _$jscoverage['js/vs_core.js'][3913] = 0;
  _$jscoverage['js/vs_core.js'][3914] = 0;
  _$jscoverage['js/vs_core.js'][3917] = 0;
  _$jscoverage['js/vs_core.js'][3930] = 0;
  _$jscoverage['js/vs_core.js'][3931] = 0;
  _$jscoverage['js/vs_core.js'][3933] = 0;
  _$jscoverage['js/vs_core.js'][3935] = 0;
  _$jscoverage['js/vs_core.js'][3936] = 0;
  _$jscoverage['js/vs_core.js'][3938] = 0;
  _$jscoverage['js/vs_core.js'][3939] = 0;
  _$jscoverage['js/vs_core.js'][3940] = 0;
  _$jscoverage['js/vs_core.js'][3942] = 0;
  _$jscoverage['js/vs_core.js'][3953] = 0;
  _$jscoverage['js/vs_core.js'][3954] = 0;
  _$jscoverage['js/vs_core.js'][3956] = 0;
  _$jscoverage['js/vs_core.js'][3957] = 0;
  _$jscoverage['js/vs_core.js'][3959] = 0;
  _$jscoverage['js/vs_core.js'][3960] = 0;
  _$jscoverage['js/vs_core.js'][3962] = 0;
  _$jscoverage['js/vs_core.js'][3974] = 0;
  _$jscoverage['js/vs_core.js'][3975] = 0;
  _$jscoverage['js/vs_core.js'][3977] = 0;
  _$jscoverage['js/vs_core.js'][3978] = 0;
  _$jscoverage['js/vs_core.js'][3980] = 0;
  _$jscoverage['js/vs_core.js'][3982] = 0;
  _$jscoverage['js/vs_core.js'][3995] = 0;
  _$jscoverage['js/vs_core.js'][3997] = 0;
  _$jscoverage['js/vs_core.js'][3998] = 0;
  _$jscoverage['js/vs_core.js'][4000] = 0;
  _$jscoverage['js/vs_core.js'][4001] = 0;
  _$jscoverage['js/vs_core.js'][4010] = 0;
  _$jscoverage['js/vs_core.js'][4012] = 0;
  _$jscoverage['js/vs_core.js'][4014] = 0;
  _$jscoverage['js/vs_core.js'][4015] = 0;
  _$jscoverage['js/vs_core.js'][4024] = 0;
  _$jscoverage['js/vs_core.js'][4026] = 0;
  _$jscoverage['js/vs_core.js'][4029] = 0;
  _$jscoverage['js/vs_core.js'][4033] = 0;
  _$jscoverage['js/vs_core.js'][4034] = 0;
  _$jscoverage['js/vs_core.js'][4035] = 0;
  _$jscoverage['js/vs_core.js'][4039] = 0;
  _$jscoverage['js/vs_core.js'][4061] = 0;
  _$jscoverage['js/vs_core.js'][4063] = 0;
  _$jscoverage['js/vs_core.js'][4064] = 0;
  _$jscoverage['js/vs_core.js'][4065] = 0;
  _$jscoverage['js/vs_core.js'][4067] = 0;
  _$jscoverage['js/vs_core.js'][4068] = 0;
  _$jscoverage['js/vs_core.js'][4070] = 0;
  _$jscoverage['js/vs_core.js'][4104] = 0;
  _$jscoverage['js/vs_core.js'][4105] = 0;
  _$jscoverage['js/vs_core.js'][4106] = 0;
  _$jscoverage['js/vs_core.js'][4107] = 0;
  _$jscoverage['js/vs_core.js'][4109] = 0;
  _$jscoverage['js/vs_core.js'][4111] = 0;
  _$jscoverage['js/vs_core.js'][4113] = 0;
  _$jscoverage['js/vs_core.js'][4114] = 0;
  _$jscoverage['js/vs_core.js'][4115] = 0;
  _$jscoverage['js/vs_core.js'][4117] = 0;
  _$jscoverage['js/vs_core.js'][4118] = 0;
  _$jscoverage['js/vs_core.js'][4119] = 0;
  _$jscoverage['js/vs_core.js'][4122] = 0;
  _$jscoverage['js/vs_core.js'][4133] = 0;
  _$jscoverage['js/vs_core.js'][4134] = 0;
  _$jscoverage['js/vs_core.js'][4136] = 0;
  _$jscoverage['js/vs_core.js'][4137] = 0;
  _$jscoverage['js/vs_core.js'][4139] = 0;
  _$jscoverage['js/vs_core.js'][4141] = 0;
  _$jscoverage['js/vs_core.js'][4142] = 0;
  _$jscoverage['js/vs_core.js'][4144] = 0;
  _$jscoverage['js/vs_core.js'][4156] = 0;
  _$jscoverage['js/vs_core.js'][4157] = 0;
  _$jscoverage['js/vs_core.js'][4159] = 0;
  _$jscoverage['js/vs_core.js'][4162] = 0;
  _$jscoverage['js/vs_core.js'][4163] = 0;
  _$jscoverage['js/vs_core.js'][4165] = 0;
  _$jscoverage['js/vs_core.js'][4168] = 0;
  _$jscoverage['js/vs_core.js'][4170] = 0;
  _$jscoverage['js/vs_core.js'][4179] = 0;
  _$jscoverage['js/vs_core.js'][4180] = 0;
  _$jscoverage['js/vs_core.js'][4187] = 0;
  _$jscoverage['js/vs_core.js'][4230] = 0;
  _$jscoverage['js/vs_core.js'][4232] = 0;
  _$jscoverage['js/vs_core.js'][4233] = 0;
  _$jscoverage['js/vs_core.js'][4234] = 0;
  _$jscoverage['js/vs_core.js'][4236] = 0;
  _$jscoverage['js/vs_core.js'][4237] = 0;
  _$jscoverage['js/vs_core.js'][4238] = 0;
  _$jscoverage['js/vs_core.js'][4245] = 0;
  _$jscoverage['js/vs_core.js'][4251] = 0;
  _$jscoverage['js/vs_core.js'][4257] = 0;
  _$jscoverage['js/vs_core.js'][4263] = 0;
  _$jscoverage['js/vs_core.js'][4269] = 0;
  _$jscoverage['js/vs_core.js'][4275] = 0;
  _$jscoverage['js/vs_core.js'][4281] = 0;
  _$jscoverage['js/vs_core.js'][4287] = 0;
  _$jscoverage['js/vs_core.js'][4293] = 0;
  _$jscoverage['js/vs_core.js'][4299] = 0;
  _$jscoverage['js/vs_core.js'][4307] = 0;
  _$jscoverage['js/vs_core.js'][4314] = 0;
  _$jscoverage['js/vs_core.js'][4321] = 0;
  _$jscoverage['js/vs_core.js'][4328] = 0;
  _$jscoverage['js/vs_core.js'][4335] = 0;
  _$jscoverage['js/vs_core.js'][4342] = 0;
  _$jscoverage['js/vs_core.js'][4349] = 0;
  _$jscoverage['js/vs_core.js'][4356] = 0;
  _$jscoverage['js/vs_core.js'][4363] = 0;
  _$jscoverage['js/vs_core.js'][4370] = 0;
  _$jscoverage['js/vs_core.js'][4377] = 0;
  _$jscoverage['js/vs_core.js'][4384] = 0;
  _$jscoverage['js/vs_core.js'][4387] = 0;
  _$jscoverage['js/vs_core.js'][4405] = 0;
  _$jscoverage['js/vs_core.js'][4414] = 0;
  _$jscoverage['js/vs_core.js'][4416] = 0;
  _$jscoverage['js/vs_core.js'][4418] = 0;
  _$jscoverage['js/vs_core.js'][4420] = 0;
  _$jscoverage['js/vs_core.js'][4421] = 0;
  _$jscoverage['js/vs_core.js'][4422] = 0;
  _$jscoverage['js/vs_core.js'][4424] = 0;
  _$jscoverage['js/vs_core.js'][4426] = 0;
  _$jscoverage['js/vs_core.js'][4427] = 0;
  _$jscoverage['js/vs_core.js'][4428] = 0;
  _$jscoverage['js/vs_core.js'][4430] = 0;
  _$jscoverage['js/vs_core.js'][4432] = 0;
  _$jscoverage['js/vs_core.js'][4433] = 0;
  _$jscoverage['js/vs_core.js'][4434] = 0;
  _$jscoverage['js/vs_core.js'][4436] = 0;
  _$jscoverage['js/vs_core.js'][4438] = 0;
  _$jscoverage['js/vs_core.js'][4439] = 0;
  _$jscoverage['js/vs_core.js'][4440] = 0;
  _$jscoverage['js/vs_core.js'][4442] = 0;
  _$jscoverage['js/vs_core.js'][4444] = 0;
  _$jscoverage['js/vs_core.js'][4445] = 0;
  _$jscoverage['js/vs_core.js'][4446] = 0;
  _$jscoverage['js/vs_core.js'][4447] = 0;
  _$jscoverage['js/vs_core.js'][4449] = 0;
  _$jscoverage['js/vs_core.js'][4450] = 0;
  _$jscoverage['js/vs_core.js'][4451] = 0;
  _$jscoverage['js/vs_core.js'][4453] = 0;
  _$jscoverage['js/vs_core.js'][4454] = 0;
  _$jscoverage['js/vs_core.js'][4457] = 0;
  _$jscoverage['js/vs_core.js'][4460] = 0;
  _$jscoverage['js/vs_core.js'][4462] = 0;
  _$jscoverage['js/vs_core.js'][4463] = 0;
  _$jscoverage['js/vs_core.js'][4464] = 0;
  _$jscoverage['js/vs_core.js'][4465] = 0;
  _$jscoverage['js/vs_core.js'][4467] = 0;
  _$jscoverage['js/vs_core.js'][4468] = 0;
  _$jscoverage['js/vs_core.js'][4470] = 0;
  _$jscoverage['js/vs_core.js'][4485] = 0;
  _$jscoverage['js/vs_core.js'][4488] = 0;
  _$jscoverage['js/vs_core.js'][4489] = 0;
  _$jscoverage['js/vs_core.js'][4491] = 0;
  _$jscoverage['js/vs_core.js'][4493] = 0;
  _$jscoverage['js/vs_core.js'][4494] = 0;
  _$jscoverage['js/vs_core.js'][4495] = 0;
  _$jscoverage['js/vs_core.js'][4498] = 0;
  _$jscoverage['js/vs_core.js'][4500] = 0;
  _$jscoverage['js/vs_core.js'][4501] = 0;
  _$jscoverage['js/vs_core.js'][4503] = 0;
  _$jscoverage['js/vs_core.js'][4504] = 0;
  _$jscoverage['js/vs_core.js'][4505] = 0;
  _$jscoverage['js/vs_core.js'][4506] = 0;
  _$jscoverage['js/vs_core.js'][4509] = 0;
  _$jscoverage['js/vs_core.js'][4511] = 0;
  _$jscoverage['js/vs_core.js'][4512] = 0;
  _$jscoverage['js/vs_core.js'][4515] = 0;
  _$jscoverage['js/vs_core.js'][4518] = 0;
  _$jscoverage['js/vs_core.js'][4520] = 0;
  _$jscoverage['js/vs_core.js'][4522] = 0;
  _$jscoverage['js/vs_core.js'][4527] = 0;
  _$jscoverage['js/vs_core.js'][4529] = 0;
  _$jscoverage['js/vs_core.js'][4530] = 0;
  _$jscoverage['js/vs_core.js'][4532] = 0;
  _$jscoverage['js/vs_core.js'][4533] = 0;
  _$jscoverage['js/vs_core.js'][4535] = 0;
  _$jscoverage['js/vs_core.js'][4538] = 0;
  _$jscoverage['js/vs_core.js'][4540] = 0;
  _$jscoverage['js/vs_core.js'][4544] = 0;
  _$jscoverage['js/vs_core.js'][4547] = 0;
  _$jscoverage['js/vs_core.js'][4557] = 0;
  _$jscoverage['js/vs_core.js'][4558] = 0;
  _$jscoverage['js/vs_core.js'][4567] = 0;
  _$jscoverage['js/vs_core.js'][4574] = 0;
  _$jscoverage['js/vs_core.js'][4576] = 0;
  _$jscoverage['js/vs_core.js'][4577] = 0;
  _$jscoverage['js/vs_core.js'][4578] = 0;
  _$jscoverage['js/vs_core.js'][4579] = 0;
  _$jscoverage['js/vs_core.js'][4580] = 0;
  _$jscoverage['js/vs_core.js'][4581] = 0;
  _$jscoverage['js/vs_core.js'][4582] = 0;
  _$jscoverage['js/vs_core.js'][4583] = 0;
  _$jscoverage['js/vs_core.js'][4584] = 0;
  _$jscoverage['js/vs_core.js'][4585] = 0;
  _$jscoverage['js/vs_core.js'][4586] = 0;
  _$jscoverage['js/vs_core.js'][4592] = 0;
  _$jscoverage['js/vs_core.js'][4594] = 0;
  _$jscoverage['js/vs_core.js'][4595] = 0;
  _$jscoverage['js/vs_core.js'][4596] = 0;
  _$jscoverage['js/vs_core.js'][4598] = 0;
  _$jscoverage['js/vs_core.js'][4599] = 0;
  _$jscoverage['js/vs_core.js'][4600] = 0;
  _$jscoverage['js/vs_core.js'][4603] = 0;
  _$jscoverage['js/vs_core.js'][4605] = 0;
  _$jscoverage['js/vs_core.js'][4612] = 0;
  _$jscoverage['js/vs_core.js'][4653] = 0;
  _$jscoverage['js/vs_core.js'][4655] = 0;
  _$jscoverage['js/vs_core.js'][4656] = 0;
  _$jscoverage['js/vs_core.js'][4657] = 0;
  _$jscoverage['js/vs_core.js'][4660] = 0;
  _$jscoverage['js/vs_core.js'][4715] = 0;
  _$jscoverage['js/vs_core.js'][4717] = 0;
  _$jscoverage['js/vs_core.js'][4718] = 0;
  _$jscoverage['js/vs_core.js'][4721] = 0;
  _$jscoverage['js/vs_core.js'][4722] = 0;
  _$jscoverage['js/vs_core.js'][4723] = 0;
  _$jscoverage['js/vs_core.js'][4725] = 0;
  _$jscoverage['js/vs_core.js'][4726] = 0;
  _$jscoverage['js/vs_core.js'][4728] = 0;
  _$jscoverage['js/vs_core.js'][4729] = 0;
  _$jscoverage['js/vs_core.js'][4731] = 0;
  _$jscoverage['js/vs_core.js'][4733] = 0;
  _$jscoverage['js/vs_core.js'][4735] = 0;
  _$jscoverage['js/vs_core.js'][4737] = 0;
  _$jscoverage['js/vs_core.js'][4738] = 0;
  _$jscoverage['js/vs_core.js'][4740] = 0;
  _$jscoverage['js/vs_core.js'][4742] = 0;
  _$jscoverage['js/vs_core.js'][4743] = 0;
  _$jscoverage['js/vs_core.js'][4747] = 0;
  _$jscoverage['js/vs_core.js'][4748] = 0;
  _$jscoverage['js/vs_core.js'][4753] = 0;
  _$jscoverage['js/vs_core.js'][4754] = 0;
  _$jscoverage['js/vs_core.js'][4760] = 0;
  _$jscoverage['js/vs_core.js'][4764] = 0;
  _$jscoverage['js/vs_core.js'][4770] = 0;
  _$jscoverage['js/vs_core.js'][4779] = 0;
  _$jscoverage['js/vs_core.js'][4781] = 0;
  _$jscoverage['js/vs_core.js'][4793] = 0;
  _$jscoverage['js/vs_core.js'][4795] = 0;
  _$jscoverage['js/vs_core.js'][4807] = 0;
  _$jscoverage['js/vs_core.js'][4809] = 0;
  _$jscoverage['js/vs_core.js'][4821] = 0;
  _$jscoverage['js/vs_core.js'][4823] = 0;
  _$jscoverage['js/vs_core.js'][4835] = 0;
  _$jscoverage['js/vs_core.js'][4837] = 0;
  _$jscoverage['js/vs_core.js'][4849] = 0;
  _$jscoverage['js/vs_core.js'][4861] = 0;
  _$jscoverage['js/vs_core.js'][4870] = 0;
  _$jscoverage['js/vs_core.js'][4904] = 0;
  _$jscoverage['js/vs_core.js'][4906] = 0;
  _$jscoverage['js/vs_core.js'][4907] = 0;
  _$jscoverage['js/vs_core.js'][4908] = 0;
  _$jscoverage['js/vs_core.js'][4911] = 0;
  _$jscoverage['js/vs_core.js'][4931] = 0;
  _$jscoverage['js/vs_core.js'][4948] = 0;
  _$jscoverage['js/vs_core.js'][4958] = 0;
  _$jscoverage['js/vs_core.js'][4959] = 0;
  _$jscoverage['js/vs_core.js'][4961] = 0;
  _$jscoverage['js/vs_core.js'][4963] = 0;
  _$jscoverage['js/vs_core.js'][4964] = 0;
  _$jscoverage['js/vs_core.js'][4965] = 0;
  _$jscoverage['js/vs_core.js'][4969] = 0;
  _$jscoverage['js/vs_core.js'][4973] = 0;
  _$jscoverage['js/vs_core.js'][4987] = 0;
  _$jscoverage['js/vs_core.js'][4988] = 0;
  _$jscoverage['js/vs_core.js'][4989] = 0;
  _$jscoverage['js/vs_core.js'][4991] = 0;
  _$jscoverage['js/vs_core.js'][4993] = 0;
  _$jscoverage['js/vs_core.js'][4995] = 0;
  _$jscoverage['js/vs_core.js'][5009] = 0;
  _$jscoverage['js/vs_core.js'][5010] = 0;
  _$jscoverage['js/vs_core.js'][5011] = 0;
  _$jscoverage['js/vs_core.js'][5012] = 0;
  _$jscoverage['js/vs_core.js'][5014] = 0;
  _$jscoverage['js/vs_core.js'][5015] = 0;
  _$jscoverage['js/vs_core.js'][5016] = 0;
  _$jscoverage['js/vs_core.js'][5037] = 0;
  _$jscoverage['js/vs_core.js'][5038] = 0;
  _$jscoverage['js/vs_core.js'][5048] = 0;
  _$jscoverage['js/vs_core.js'][5049] = 0;
  _$jscoverage['js/vs_core.js'][5061] = 0;
  _$jscoverage['js/vs_core.js'][5079] = 0;
  _$jscoverage['js/vs_core.js'][5081] = 0;
  _$jscoverage['js/vs_core.js'][5082] = 0;
  _$jscoverage['js/vs_core.js'][5084] = 0;
  _$jscoverage['js/vs_core.js'][5085] = 0;
  _$jscoverage['js/vs_core.js'][5086] = 0;
  _$jscoverage['js/vs_core.js'][5087] = 0;
  _$jscoverage['js/vs_core.js'][5088] = 0;
  _$jscoverage['js/vs_core.js'][5091] = 0;
  _$jscoverage['js/vs_core.js'][5092] = 0;
  _$jscoverage['js/vs_core.js'][5105] = 0;
  _$jscoverage['js/vs_core.js'][5106] = 0;
  _$jscoverage['js/vs_core.js'][5108] = 0;
  _$jscoverage['js/vs_core.js'][5110] = 0;
  _$jscoverage['js/vs_core.js'][5111] = 0;
  _$jscoverage['js/vs_core.js'][5113] = 0;
  _$jscoverage['js/vs_core.js'][5115] = 0;
  _$jscoverage['js/vs_core.js'][5116] = 0;
  _$jscoverage['js/vs_core.js'][5118] = 0;
  _$jscoverage['js/vs_core.js'][5119] = 0;
  _$jscoverage['js/vs_core.js'][5121] = 0;
  _$jscoverage['js/vs_core.js'][5122] = 0;
  _$jscoverage['js/vs_core.js'][5124] = 0;
  _$jscoverage['js/vs_core.js'][5127] = 0;
  _$jscoverage['js/vs_core.js'][5132] = 0;
  _$jscoverage['js/vs_core.js'][5136] = 0;
  _$jscoverage['js/vs_core.js'][5142] = 0;
  _$jscoverage['js/vs_core.js'][5154] = 0;
  _$jscoverage['js/vs_core.js'][5155] = 0;
  _$jscoverage['js/vs_core.js'][5168] = 0;
  _$jscoverage['js/vs_core.js'][5170] = 0;
  _$jscoverage['js/vs_core.js'][5179] = 0;
  _$jscoverage['js/vs_core.js'][5215] = 0;
  _$jscoverage['js/vs_core.js'][5217] = 0;
  _$jscoverage['js/vs_core.js'][5218] = 0;
  _$jscoverage['js/vs_core.js'][5219] = 0;
  _$jscoverage['js/vs_core.js'][5221] = 0;
  _$jscoverage['js/vs_core.js'][5224] = 0;
  _$jscoverage['js/vs_core.js'][5250] = 0;
  _$jscoverage['js/vs_core.js'][5252] = 0;
  _$jscoverage['js/vs_core.js'][5253] = 0;
  _$jscoverage['js/vs_core.js'][5255] = 0;
  _$jscoverage['js/vs_core.js'][5257] = 0;
  _$jscoverage['js/vs_core.js'][5271] = 0;
  _$jscoverage['js/vs_core.js'][5273] = 0;
  _$jscoverage['js/vs_core.js'][5275] = 0;
  _$jscoverage['js/vs_core.js'][5306] = 0;
  _$jscoverage['js/vs_core.js'][5312] = 0;
  _$jscoverage['js/vs_core.js'][5359] = 0;
  _$jscoverage['js/vs_core.js'][5361] = 0;
  _$jscoverage['js/vs_core.js'][5362] = 0;
  _$jscoverage['js/vs_core.js'][5363] = 0;
  _$jscoverage['js/vs_core.js'][5366] = 0;
  _$jscoverage['js/vs_core.js'][5390] = 0;
  _$jscoverage['js/vs_core.js'][5391] = 0;
  _$jscoverage['js/vs_core.js'][5393] = 0;
  _$jscoverage['js/vs_core.js'][5394] = 0;
  _$jscoverage['js/vs_core.js'][5396] = 0;
  _$jscoverage['js/vs_core.js'][5398] = 0;
  _$jscoverage['js/vs_core.js'][5399] = 0;
  _$jscoverage['js/vs_core.js'][5403] = 0;
  _$jscoverage['js/vs_core.js'][5404] = 0;
  _$jscoverage['js/vs_core.js'][5407] = 0;
  _$jscoverage['js/vs_core.js'][5409] = 0;
  _$jscoverage['js/vs_core.js'][5410] = 0;
  _$jscoverage['js/vs_core.js'][5412] = 0;
  _$jscoverage['js/vs_core.js'][5425] = 0;
  _$jscoverage['js/vs_core.js'][5426] = 0;
  _$jscoverage['js/vs_core.js'][5428] = 0;
  _$jscoverage['js/vs_core.js'][5429] = 0;
  _$jscoverage['js/vs_core.js'][5430] = 0;
  _$jscoverage['js/vs_core.js'][5432] = 0;
  _$jscoverage['js/vs_core.js'][5433] = 0;
  _$jscoverage['js/vs_core.js'][5437] = 0;
  _$jscoverage['js/vs_core.js'][5440] = 0;
  _$jscoverage['js/vs_core.js'][5441] = 0;
  _$jscoverage['js/vs_core.js'][5443] = 0;
  _$jscoverage['js/vs_core.js'][5446] = 0;
  _$jscoverage['js/vs_core.js'][5452] = 0;
}
_$jscoverage['js/vs_core.js'].source = ["<span class=\"c\">/** @license</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>window<span class=\"k\">,</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> document <span class=\"k\">=</span> window<span class=\"k\">.</span>document<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                   </span>","<span class=\"c\">*********************************************************************/</span>","","<span class=\"k\">var</span> vs <span class=\"k\">=</span> window<span class=\"k\">.</span>vs<span class=\"k\">,</span>","  util <span class=\"k\">=</span> vs<span class=\"k\">.</span>util<span class=\"k\">,</span>","  core <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns an unique Id &lt;p&gt;</span>","<span class=\"c\"> * The algorithm is use a time stamp and a random number to generate the id.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @memberOf vs.core</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {String}</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> createId <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"s\">\"hak_id_\"</span> <span class=\"k\">+</span> <span class=\"k\">new</span> Date<span class=\"k\">().</span>getTime<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">\"\"</span> <span class=\"k\">+</span> Math<span class=\"k\">.</span>floor <span class=\"k\">(</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"s\">1000000</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","core<span class=\"k\">.</span>createId <span class=\"k\">=</span> createId<span class=\"k\">;</span><span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class Object</span>","<span class=\"c\"> *  vs.core.Object is the root class of most class hierarchies. Through</span>","<span class=\"c\"> *  vs.core.Object, objects inherit a basic interface for configuration</span>","<span class=\"c\"> *  and clone mechanism. It provides an unique identifier for objects.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> VSObject <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>config<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> config<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> config<span class=\"k\">.</span>id<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">else</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> createId <span class=\"k\">();</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__config__ <span class=\"k\">=</span> util<span class=\"k\">.</span>clone <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","VSObject<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @String</span>","<span class=\"c\">   */</span>","   _id<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @boolean</span>","<span class=\"c\">   */</span>","   __i__<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @object</span>","<span class=\"c\">   */</span>","   __config__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Object default init. &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#init</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  myObject = new vs.core.Object (vs.core.createId ());</span>","<span class=\"c\">   *  myObject.init ();</span>","<span class=\"c\">   *  @return {Object} this</span>","<span class=\"c\">   */</span>","  init <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__i__<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_id <span class=\"k\">=</span> createId <span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// save the current object</span>","    VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>initComponent <span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__i__ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__config__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>configure <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__config__<span class=\"k\">);</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__config__<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  initComponent <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @deprecated</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  createId <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    console<span class=\"k\">.</span>warn","      <span class=\"k\">(</span><span class=\"s\">\"this.createId is deprecated, Use the static method vs.core.createId instead\"</span><span class=\"k\">);</span>","    <span class=\"k\">return</span> createId <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Object configuation method. &lt;p&gt;</span>","<span class=\"c\">   *  Call this method to adjust some properties of the internal components</span>","<span class=\"c\">   *  using one call. &lt;br/&gt;</span>","<span class=\"c\">   *  It takes as parameters, an associated array &lt;propertyName, value&gt;.</span>","<span class=\"c\">   *  &lt;br/&gt;&lt;br/&gt;</span>","<span class=\"c\">   *  Ex:</span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  var myObject = new vs.core.Object ({id: 'myobject'});</span>","<span class=\"c\">   *  myObject.init ();</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  myObject.configure ({prop1: \"1\", prop2: 'hello', ..}); </span>","<span class=\"c\">   *  &lt;=&gt;</span>","<span class=\"c\">   *  myObject.prop1 = \"1\";</span>","<span class=\"c\">   *  myObject.prop2 = \"hello\";</span>","<span class=\"c\">   *  ...</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#configure</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Object} config the associated array used for configuring the </span>","<span class=\"c\">   *        object.</span>","<span class=\"c\">   */</span>","  configure <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>config<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> props<span class=\"k\">,</span> key<span class=\"k\">,</span> i<span class=\"k\">,</span> should_propagate <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span> desc<span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>df<span class=\"k\">)</span> df<span class=\"k\">.</span>pausePropagation <span class=\"k\">();</span>","","    <span class=\"c\">// Manage model</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">instanceof</span> Model<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      desc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getPropertyDescriptor <span class=\"k\">(</span><span class=\"s\">'model'</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc <span class=\"k\">&amp;&amp;</span> desc<span class=\"k\">.</span>set<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// model property assignation</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>model <span class=\"k\">=</span> config<span class=\"k\">;</span>","        should_propagate <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// one by one property copy</span>","        props <span class=\"k\">=</span> config<span class=\"k\">.</span>getProperties <span class=\"k\">();</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> props<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","        <span class=\"k\">{</span>","          key <span class=\"k\">=</span> props <span class=\"k\">[</span>i<span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">===</span> <span class=\"s\">'id'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> config <span class=\"k\">[</span>key<span class=\"k\">];</span>","          should_propagate <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span> <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> config<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">===</span> <span class=\"s\">'id'</span> <span class=\"k\">||</span> key <span class=\"k\">===</span> <span class=\"s\">'node'</span> <span class=\"k\">||</span>","            key <span class=\"k\">===</span> <span class=\"s\">'nodeRef'</span> <span class=\"k\">||</span> key <span class=\"k\">===</span> <span class=\"s\">'view'</span><span class=\"k\">)</span> ","        <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> config <span class=\"k\">[</span>key<span class=\"k\">];</span>","        should_propagate <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>df<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      df<span class=\"k\">.</span>restartPropagation <span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>should_propagate<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange <span class=\"k\">();</span>","        df<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>should_propagate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange<span class=\"k\">)</span> ","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>propertiesDidChange <span class=\"k\">();</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns the list of object's properties name &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#getProperties</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @return {Array} Array of name of properties</span>","<span class=\"c\">   */</span>","  getProperties <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>_properties_<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>_properties_<span class=\"k\">.</span>slice <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns a copy of the objet's properties for JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used for persistence or serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#toJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @return {String} The JSON String</span>","<span class=\"c\">   */</span>","  toJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_toJSON <span class=\"k\">(</span><span class=\"s\">\"{\"</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\"}\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set objet's properties from JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used when retrieve data from serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#parseJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} json The JSON String</span>","<span class=\"c\">   */</span>","  parseJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>json<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> obj <span class=\"k\">=</span> <span class=\"k\">(</span>json <span class=\"k\">&amp;&amp;</span> util<span class=\"k\">.</span>parseJSON <span class=\"k\">(</span>json<span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> value<span class=\"k\">,</span> result<span class=\"k\">;</span>","  ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> obj<span class=\"k\">)</span>","      <span class=\"k\">{</span>","<span class=\"c\">//         value = obj [key];</span>","<span class=\"c\">//         if (util.isString (value))</span>","<span class=\"c\">//         {</span>","<span class=\"c\">//           result = util.__date_reg_exp.exec (value);</span>","<span class=\"c\">//           if (result &amp;&amp; result [1]) // JSON Date -&gt; Date generation</span>","<span class=\"c\">//           {</span>","<span class=\"c\">//             this ['_' + key] = new Date (parseInt (result [1]));</span>","<span class=\"c\">//           }</span>","<span class=\"c\">//           else this ['_' + key] = value; // String</span>","<span class=\"c\">//         }</span>","        <span class=\"k\">this</span> <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.parseJSON failed. \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns a copy of the objet's properties for JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used for persistence or serialization.</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * @name vs.core.Object#_toJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  _toJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>json<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> prop_name<span class=\"k\">,</span> value<span class=\"k\">,</span> str<span class=\"k\">,</span>","      _properties_ <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">.</span>_properties_<span class=\"k\">,</span> n <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>_properties_<span class=\"k\">)</span> <span class=\"k\">return</span> json<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> _properties_<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      prop_name <span class=\"k\">=</span> _properties_ <span class=\"k\">[</span>i<span class=\"k\">];</span>","      value <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> str <span class=\"k\">=</span> <span class=\"s\">'null'</span><span class=\"k\">;</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">instanceof</span> Date<span class=\"k\">)</span>","      <span class=\"k\">{</span> str <span class=\"k\">=</span> <span class=\"s\">'\"</span><span class=\"t\">\\/</span><span class=\"s\">Date('</span> <span class=\"k\">+</span> value<span class=\"k\">.</span>getTime <span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">')</span><span class=\"t\">\\/</span><span class=\"s\">\"'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value<span class=\"k\">.</span>toJSON<span class=\"k\">)</span> <span class=\"k\">{</span> str <span class=\"k\">=</span> value<span class=\"k\">.</span>toJSON <span class=\"k\">();</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">try</span> <span class=\"k\">{</span>","          str <span class=\"k\">=</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>value<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","        <span class=\"k\">{</span> ","          console<span class=\"k\">.</span>warn <span class=\"k\">(</span>e<span class=\"k\">);</span>","          <span class=\"k\">continue</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>n<span class=\"k\">++)</span> json <span class=\"k\">+=</span> <span class=\"s\">','</span><span class=\"k\">;</span>","      json <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span> <span class=\"k\">+</span> prop_name <span class=\"k\">+</span> <span class=\"s\">\"</span><span class=\"t\">\\\"</span><span class=\"s\">:\"</span> <span class=\"k\">+</span> str<span class=\"k\">;</span>","    <span class=\"k\">}</span>","        ","    <span class=\"k\">return</span> json<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually force properties change propagation.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * If no property name is specified, the system will assume all component's</span>","<span class=\"c\">   * properties have been modified.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Object#propertyChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} property the name of the modified property.[optional]</span>","<span class=\"c\">   */</span>","  propertyChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>property<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    df<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">,</span> property<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually force properties change propagation.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * @deprecated</span>","<span class=\"c\">   * @name vs.core.Object#propagateChange</span>","<span class=\"c\">   * @see vs.core.Object#propertyChange</span>","<span class=\"c\">   * @param {String} property the name of the modified property.[optional]</span>","<span class=\"c\">   * @param {Object} data.[optional]</span>","<span class=\"c\">   */</span>","  propagateChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>property<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>propertyChange <span class=\"k\">(</span>property<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Clone the Object &lt;p&gt;</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @name vs.core.Object#clone</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Object} config the configuration structure for the new object</span>","<span class=\"c\">   * @return {vs.core.Object} the cloned object</span>","<span class=\"c\">   */</span>","  clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> obj<span class=\"k\">,</span> key<span class=\"k\">,</span> value<span class=\"k\">,</span> desc<span class=\"k\">,</span> desc_clone<span class=\"k\">,</span> getter<span class=\"k\">,</span> setter<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>cloned_map<span class=\"k\">)</span> <span class=\"k\">{</span> cloned_map <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// have already cloned;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span> cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">];</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">)</span> <span class=\"k\">{</span> config <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> config<span class=\"k\">.</span>id <span class=\"k\">=</span> createId <span class=\"k\">();</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>constructor<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      obj <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">(</span>config<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">\"impossible to clone this object.\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">null</span>","    <span class=\"k\">}</span>","    ","    cloned_map <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">]</span> <span class=\"k\">=</span> obj<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"s\">'id'</span> <span class=\"k\">||</span> key <span class=\"k\">==</span> <span class=\"s\">'_id'</span><span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      ","      value <span class=\"k\">=</span> <span class=\"k\">this</span> <span class=\"k\">[</span>key<span class=\"k\">];</span>","      desc <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> key<span class=\"k\">);</span>","      desc_clone <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">);</span>","      ","      <span class=\"c\">// manage getter and setter</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>desc<span class=\"k\">.</span>get <span class=\"k\">||</span> desc<span class=\"k\">.</span>set<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// the property description doesn't exist. Create it.</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>desc_clone<span class=\"k\">)</span> <span class=\"k\">{</span> util<span class=\"k\">.</span>defineProperty <span class=\"k\">(</span>obj<span class=\"k\">,</span> key<span class=\"k\">,</span> desc<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      ","      <span class=\"c\">// manage other object members</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>key<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>value <span class=\"k\">instanceof</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          obj <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">.</span>clone <span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> cloned_map<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>value<span class=\"k\">))</span>","        <span class=\"k\">{</span>","          obj <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">.</span>slice <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> obj <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    obj<span class=\"k\">.</span>__i__ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/*************************************************************</span>","<span class=\"c\">                  Properties introscpection</span>","<span class=\"c\">  *************************************************************/</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   * Returns a property descriptor for an own property (that is, one directly </span>","<span class=\"c\">   * present on an object, not present by dint of being along an object's </span>","<span class=\"c\">   * prototype chain) of a given object.</span>","<span class=\"c\">   * @name vs.core.Object#getOwnPropertyDescriptor </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} prop The name of the property whose description is to </span>","<span class=\"c\">   *   be retrieved</span>","<span class=\"c\">   * @return {Object} The property descriptor or null</span>","<span class=\"c\">   */</span> ","  getOwnPropertyDescriptor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>prop<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> proto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>proto<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>proto<span class=\"k\">,</span> prop<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   * Returns a property descriptor for a property (along the object's </span>","<span class=\"c\">   * prototype chain) of a given object.</span>","<span class=\"c\">   * @name vs.core.Object#getPropertyDescriptor </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} prop The name of the property whose description is to </span>","<span class=\"c\">   *   be retrieved</span>","<span class=\"c\">   * @return {Object} The property descriptor or null</span>","<span class=\"c\">   */</span> ","  getPropertyDescriptor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>prop<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">/** @private */</span>","    <span class=\"k\">function</span> _getOwnPropertyDescriptor <span class=\"k\">(</span>obj<span class=\"k\">,</span> prop<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> proto <span class=\"k\">=</span> Object<span class=\"k\">.</span>getPrototypeOf <span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>proto<span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> desc <span class=\"k\">=</span> Object<span class=\"k\">.</span>getOwnPropertyDescriptor <span class=\"k\">(</span>proto<span class=\"k\">,</span> prop<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>desc<span class=\"k\">)</span> <span class=\"k\">return</span> desc<span class=\"k\">;</span>","      <span class=\"k\">return</span> _getOwnPropertyDescriptor <span class=\"k\">(</span>proto<span class=\"k\">,</span> prop<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> _getOwnPropertyDescriptor <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> prop<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  _super <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> superFunc <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_super<span class=\"k\">.</span>caller<span class=\"k\">.</span>_super_func_<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>superFunc<span class=\"k\">)</span> superFunc<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>VSObject<span class=\"k\">,</span> <span class=\"s\">\"id\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"c\">/** </span>","<span class=\"c\">   * Getter for vs.core.Object id</span>","<span class=\"c\">   * @name vs.core.Object#id </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @type {String}</span>","<span class=\"c\">   */</span> ","  get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">;</span> <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Static members</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","VSObject<span class=\"k\">.</span>_obs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Object <span class=\"k\">=</span> VSObject<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/********************************************************************</span>","","<span class=\"c\">*********************************************************************/</span>","","<span class=\"k\">var</span> _constructor_ <span class=\"k\">=</span> window<span class=\"k\">.</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *  var Class1 = vs.core.createClass ({</span>","<span class=\"c\"> *    properties: {name: vs.core.Object.PROPERTY_IN_OUT},{});</span>","<span class=\"c\"> *  var t = new Class1 ({name: 'Hello'});</span>","<span class=\"c\"> *  t.init ();</span>","<span class=\"c\"> *  console.log (t.name); // &gt; 'Hello'</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *  var MyView = vs.core.createClass (</span>","<span class=\"c\"> *    parent: vs.ui.View,</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *    constructor : function ()</span>","<span class=\"c\"> *    {</span>","<span class=\"c\"> *      console.log ('MyView constructor');</span>","<span class=\"c\"> *    }  </span>","<span class=\"c\"> *  });</span>","<span class=\"c\"> *  var d = new Dest ({size: [20, 20]}); // &gt; 'MyView constructor'</span>","<span class=\"c\"> *  d.init ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @public</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> createClass <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> klass <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> __spec <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> ","    parent <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">,</span> properties <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  <span class=\"c\">// Create the class</span>","  klass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>parent<span class=\"k\">;</span>","    <span class=\"c\">// Call class constructor if it exists</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>klass<span class=\"k\">.</span>__spec <span class=\"k\">&amp;&amp;</span> klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>_constructor<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>_constructor<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// Otherwise the parent constructor</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>klass<span class=\"k\">.</span>__spec <span class=\"k\">&amp;&amp;</span> klass<span class=\"k\">.</span>__spec<span class=\"k\">.</span>parent<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>parent<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> arguments<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> klass<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>parent<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    parent <span class=\"k\">=</span> config<span class=\"k\">.</span>parent<span class=\"k\">;</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>parent<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>properties<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    properties <span class=\"k\">=</span> config<span class=\"k\">.</span>properties<span class=\"k\">;</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>properties<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  ","  __spec<span class=\"k\">.</span>parent <span class=\"k\">=</span> parent<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>constructor <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> _constructor_<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    __spec<span class=\"k\">.</span>_constructor <span class=\"k\">=</span> config<span class=\"k\">.</span>constructor<span class=\"k\">;</span>","    __spec<span class=\"k\">.</span>_constructor<span class=\"k\">.</span>_super_func_ <span class=\"k\">=</span> parent<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  klass<span class=\"k\">.</span>__spec <span class=\"k\">=</span> __spec<span class=\"k\">;</span>","  ","  <span class=\"c\">// set class prototype  </span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    klass<span class=\"k\">.</span>prototype <span class=\"k\">=</span> config<span class=\"k\">;</span>","    config<span class=\"k\">.</span>constructor <span class=\"k\">=</span> klass<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>parent<span class=\"k\">.</span>prototype<span class=\"k\">)</span> util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>klass<span class=\"k\">,</span> parent<span class=\"k\">);</span>","  ","  <span class=\"c\">// declare super methods</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>config<span class=\"k\">)</span> <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> config<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>key<span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","    <span class=\"k\">var</span> func <span class=\"k\">=</span> config <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">var</span> superFunc <span class=\"k\">=</span> parent<span class=\"k\">.</span>prototype <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>superFunc<span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// new implementation</span>","    func<span class=\"k\">.</span>_super_func_ <span class=\"k\">=</span> superFunc<span class=\"k\">;</span>","","<span class=\"c\">//     Old implementation</span>","<span class=\"c\">//     The new one, base on this._super.caller._super_func_ (VSObject)</span>","<span class=\"c\">//     should be more efficient</span>","<span class=\"c\">//     config [key] =  (function (func, superFunc)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       return function ()</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         var result, _super = this._super;</span>","<span class=\"c\">//         this._super = superFunc;</span>","<span class=\"c\">//         result = func.apply (this, arguments);</span>","<span class=\"c\">//         this._super = _super;</span>","<span class=\"c\">//         return result;  </span>","<span class=\"c\">//       };</span>","<span class=\"c\">//     }(func, superFunc));  </span>","  <span class=\"k\">}</span>","","  <span class=\"c\">// set class properties</span>","  _setProperties <span class=\"k\">(</span>klass<span class=\"k\">,</span> properties<span class=\"k\">);</span>","  ","  <span class=\"k\">return</span> klass<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @name vs.core.Object.PROPERTY_IN</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {number}</span>","<span class=\"c\"> */</span>","vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_IN <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @name vs.core.Object.PROPERTY_OUT</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {number}</span>","<span class=\"c\"> */</span>","vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_OUT <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * @name vs.core.Object.PROPERTY_IN_OUT</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {number}</span>","<span class=\"c\"> */</span>","vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_IN_OUT <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Regular expression used for parsing property export path.</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @type {RegExp}</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> property_reg <span class=\"k\">=</span> <span class=\"s\">/(\\w+[.\\w+]*)#(\\w+)/</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> _setProperties <span class=\"k\">(</span>klass<span class=\"k\">,</span> properties<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> descriptions <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> export_value<span class=\"k\">,</span> desc<span class=\"k\">,</span> _prop_name<span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> prop_name <span class=\"k\">in</span> properties<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> value <span class=\"k\">=</span> properties <span class=\"k\">[</span>prop_name<span class=\"k\">];</span>","    ","    <span class=\"c\">// 1) simple description with In, OUT, IN_OUT export</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isNumber <span class=\"k\">(</span>value<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      export_value <span class=\"k\">=</span> value<span class=\"k\">;</span> desc <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      _prop_name <span class=\"k\">=</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> prop_name<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>export_value <span class=\"k\">&amp;</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_IN<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        desc<span class=\"k\">.</span>set <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_prop_name<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            <span class=\"k\">this</span><span class=\"k\">[</span>_prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> v<span class=\"k\">;</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>propertyChange <span class=\"k\">(</span>_prop_name<span class=\"k\">);</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">(</span>_prop_name<span class=\"k\">));</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>export_value <span class=\"k\">&amp;</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Object<span class=\"k\">.</span>PROPERTY_OUT<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        desc<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_prop_name<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","          <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">[</span>_prop_name<span class=\"k\">];</span>","          <span class=\"k\">}</span><span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">(</span>_prop_name<span class=\"k\">));</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// 2) export path</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>value<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> property_reg<span class=\"k\">.</span>exec <span class=\"k\">(</span>value<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>result <span class=\"k\">||</span> result<span class=\"k\">.</span>length <span class=\"k\">!=</span> <span class=\"s\">3</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"s\">\"Unvalid property path: \"</span> <span class=\"k\">+</span> value<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      desc <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      desc<span class=\"k\">.</span>set <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_path<span class=\"k\">,</span> _prop_name<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">[</span>_path<span class=\"k\">][</span>_prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> v<span class=\"k\">;</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>propertyChange <span class=\"k\">(</span>_prop_name<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">(</span>result<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> result<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","","      desc<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>_path<span class=\"k\">,</span> _prop_name<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","        <span class=\"k\">{</span>","          <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">[</span>_path<span class=\"k\">][</span>_prop_name<span class=\"k\">];</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">(</span>result<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> result<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]));</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// 3) Full description</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> value <span class=\"k\">==</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      desc <span class=\"k\">=</span> value<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    descriptions <span class=\"k\">[</span>prop_name<span class=\"k\">]</span> <span class=\"k\">=</span> desc<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  util<span class=\"k\">.</span>defineClassProperties <span class=\"k\">(</span>klass<span class=\"k\">,</span> descriptions<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>createClass <span class=\"k\">=</span> createClass<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The vs.core.Model class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @extends vs.core.Object</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * vs.core.Model is a class that defines the basic Model mechanisms to implement</span>","<span class=\"c\"> * a MVC like architecture. If you need to implement a MVC component, you</span>","<span class=\"c\"> * should extend this class.&lt;br/&gt;&lt;br/&gt; &gt;&gt;&gt;&gt; THIS CODE IS STILL UNDER BETA AND </span>","<span class=\"c\"> * THE API MAY CHANGE IN THE FUTURE &lt;&lt;&lt; &lt;p&gt;</span>","<span class=\"c\"> * WikiPedia gives this following definition of a model:&lt;br&gt;</span>","<span class=\"c\"> * \"The model manages the behavior and data of the application, responds to </span>","<span class=\"c\"> * requests for information about its state (usually from the view), and </span>","<span class=\"c\"> * responds to instructions to change state (usually from the controller)\"</span>","<span class=\"c\"> * &lt;p&gt;</span>","<span class=\"c\"> * The Model class exposes 2 kinds of mechanisms you will need:</span>","<span class=\"c\"> * &lt;ul&gt;</span>","<span class=\"c\"> *  &lt;li&gt; Change event binding</span>","<span class=\"c\"> *  &lt;li&gt; Properties change propagation</span>","<span class=\"c\"> * &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * &lt;p/&gt;</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> * &lt;p/&gt;</span>","<span class=\"c\"> * The fallowing example show a TodoModel class with three properties</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *  var TodoModel = vs.core.createClass ({</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   // parent class</span>","<span class=\"c\"> *   parent: vs.core.Model,</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   // Properties definition</span>","<span class=\"c\"> *   properties {</span>","<span class=\"c\"> *     content: vs.core.Object.PROPERTY_IN_OUT,</span>","<span class=\"c\"> *     done: vs.core.Object.PROPERTY_IN_OUT,</span>","<span class=\"c\"> *     date: vs.core.Object.PROPERTY_OUT</span>","<span class=\"c\"> *   },</span>","<span class=\"c\"> *  </span>","<span class=\"c\"> *   // Initialization</span>","<span class=\"c\"> *   initComponent : function ()</span>","<span class=\"c\"> *   {</span>","<span class=\"c\"> *     this._date = new Date ();</span>","<span class=\"c\"> *     this._done = false;</span>","<span class=\"c\"> *     this._content = \"\";</span>","<span class=\"c\"> *   } </span>","<span class=\"c\"> * });</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * var myModel = new TodoModel ({content:\"Something to do\"});</span>","<span class=\"c\"> * myModel.init ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @see vs.core.DataStorage </span>","<span class=\"c\"> * @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Model</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> Model <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","Model<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {Array}</span>","<span class=\"c\">   */</span>","   __bindings__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {Boolean}</span>","<span class=\"c\">   */</span>","   __should_propagate_changes__<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {vs.core.DataStorage}</span>","<span class=\"c\">   */</span>","   _sync_service_<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    core<span class=\"k\">.</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>destructor<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_sync_service_<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>_sync_service_<span class=\"k\">.</span>removeModel <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    ","    <span class=\"k\">function</span> deleteBindings <span class=\"k\">(</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">var</span> bind<span class=\"k\">,</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        bind <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","        util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> spec <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      deleteBindings <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * The event bind method to listen model changes</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   * When you want listen modificaan event generated by this object, you can</span>","<span class=\"c\">   * bind your object (the observer) to this object using 'bindChange' method.</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#bindChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @example</span>","<span class=\"c\">   *  // Listen every change of the model</span>","<span class=\"c\">   *  myModel.bindChange ('', this, this.onChange);</span>","<span class=\"c\">   *  // Listen all the 'add' change of the model</span>","<span class=\"c\">   *  myModel.bindChange ('add', this, this.onChange);</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} action the event specification [optional]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object interested to catch the event [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        notify method will be called [optional]</span>","<span class=\"c\">   */</span>","  bindChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> list_bind<span class=\"k\">,</span> handler<span class=\"k\">;</span>","    ","    spec <span class=\"k\">=</span> spec <span class=\"k\">||</span> <span class=\"s\">'change'</span>","    handler <span class=\"k\">=</span> <span class=\"k\">new</span> Handler <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>    ","    ","    list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]</span> <span class=\"k\">=</span> list_bind<span class=\"k\">;</span> ","    <span class=\"k\">}</span>","    list_bind<span class=\"k\">.</span>push <span class=\"k\">(</span>handler<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event unbind change method</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Should be call when you want stop event listening on this object</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#unbindChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} spec the event specification [optional]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object you want unbind [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        all binding with &lt;spec, obj&gt; will be removed</span>","<span class=\"c\">   */</span>","  unbindChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>spec<span class=\"k\">)</span> spec <span class=\"k\">=</span> <span class=\"s\">'change'</span><span class=\"k\">;</span>","","    <span class=\"k\">function</span> unbind <span class=\"k\">(</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">var</span> bind<span class=\"k\">,</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        bind <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>spec <span class=\"k\">===</span> spec<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>obj <span class=\"k\">===</span> obj<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">||</span> util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">)</span>","            <span class=\"k\">{</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>func <span class=\"k\">===</span> func <span class=\"k\">||</span> bind<span class=\"k\">.</span>func_ptr <span class=\"k\">===</span> func<span class=\"k\">)</span>","              <span class=\"k\">{</span>","                list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","                util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","              <span class=\"k\">}</span>","              <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span>","            <span class=\"k\">{</span>","              list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","              util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    unbind <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Configure the model to do not propagate event change.&lt;br/&gt;</span>","<span class=\"c\">   * In order to aggregate rapid changes to a model, you will deactivate</span>","<span class=\"c\">   * change event propagate.</span>","<span class=\"c\">   * After all change are finish you can manual call model.change () to </span>","<span class=\"c\">   * trigger the event.</span>","<span class=\"c\">   * &lt;p&gt;</span>","<span class=\"c\">   * Calling model.change () will reactivate event propagation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#stopPropagation</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stopPropagation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  When you override a Model, you should call this.hasToPropagateChange ()</span>","<span class=\"c\">   *  before calling this.change ().</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Calling model.change () will reactivate event propagation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#hasToPropagateChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   */</span>","  hasToPropagateChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually trigger the \"change\" event.</span>","<span class=\"c\">   * If you have deactivated propagation using myModel.stopPropagation ()</span>","<span class=\"c\">   * in order to aggregate changes to a model, you will want to call </span>","<span class=\"c\">   * myModel.change () when you're all finished.</span>","<span class=\"c\">   * &lt;p&gt;</span>","<span class=\"c\">   * Calling myModel.change () reactivate automatic change propagation</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#change</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {String} action the event specification [optional]</span>","<span class=\"c\">   */</span>","  change <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> list_bind<span class=\"k\">,</span> event<span class=\"k\">,</span> handler<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","    event <span class=\"k\">=</span> <span class=\"k\">new</span> Event <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> spec <span class=\"k\">||</span> <span class=\"s\">'change:'</span> <span class=\"k\">+</span> spec<span class=\"k\">);</span>","    ","    <span class=\"k\">try</span>","    <span class=\"k\">{</span>","      <span class=\"k\">function</span> _change <span class=\"k\">(</span>list_bind<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">var</span> i <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">,</span> handler<span class=\"k\">;</span>","  ","        <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span>","        <span class=\"k\">{</span>","          <span class=\"c\">/** @private */</span>","          handler <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>    ","          ","          <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func_ptr<span class=\"k\">)</span> <span class=\"c\">// function pointer call</span>","          <span class=\"k\">{</span>","            handler<span class=\"k\">.</span>func_ptr<span class=\"k\">.</span>call <span class=\"k\">(</span>handler<span class=\"k\">.</span>obj<span class=\"k\">,</span> event<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func<span class=\"k\">)</span> <span class=\"c\">// function name call</span>","          <span class=\"k\">{</span>","            handler<span class=\"k\">.</span>obj<span class=\"k\">[</span>handler<span class=\"k\">.</span>func<span class=\"k\">]</span> <span class=\"k\">(</span>event<span class=\"k\">);</span> ","          <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"c\">// default notify method</span>","          <span class=\"k\">{</span>","            handler<span class=\"k\">.</span>obj<span class=\"k\">.</span>notify <span class=\"k\">(</span>event<span class=\"k\">);</span> ","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(</span>spec <span class=\"k\">&amp;&amp;</span> spec <span class=\"k\">!=</span> <span class=\"s\">'change'</span><span class=\"k\">)</span> _change <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","      _change <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span><span class=\"s\">'change'</span><span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * Manually force dataflow properties change propagation.</span>","<span class=\"c\">   * &lt;br/&gt;</span>","<span class=\"c\">   * If no property name is specified, the system will assume all component's</span>","<span class=\"c\">   * properties have been modified.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Model#propertyChange</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} property the name of the modified property.[optional]</span>","<span class=\"c\">   */</span>","  propertyChange <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>property<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    df<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_id<span class=\"k\">,</span> property<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__should_propagate_changes__<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">();</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Model<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Model <span class=\"k\">=</span> Model<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.FORCE_EVENT_PROPAGATION_DELAY</span>","<span class=\"c\"> */</span>","FORCE_EVENT_PROPAGATION_DELAY <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","<span class=\"c\">/* touch event messages */</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.EVENT_SUPPORT_TOUCH</span>","<span class=\"c\"> */</span>","EVENT_SUPPORT_TOUCH <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"s\">'createTouch'</span> <span class=\"k\">in</span> document<span class=\"k\">);</span>","<span class=\"k\">if</span> <span class=\"k\">(!</span>EVENT_SUPPORT_TOUCH<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>navigator<span class=\"k\">.</span>userAgent<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'Android'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">||</span>","      window<span class=\"k\">.</span>navigator<span class=\"k\">.</span>userAgent<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'BlackBerry'</span><span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","  <span class=\"k\">{</span> EVENT_SUPPORT_TOUCH <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","<span class=\"k\">}</span>","","","<span class=\"c\">/** </span>","<span class=\"c\"> * Start pointer event (mousedown, touchstart, )</span>","<span class=\"c\"> * @name vs.core.POINTER_START</span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_START<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Move pointer event (mousemove, touchmove, )</span>","<span class=\"c\"> * @name vs.core.POINTER_MOVE </span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_MOVE<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * End pointer event (mouseup, touchend, )</span>","<span class=\"c\"> * @name vs.core.POINTER_END </span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_END<span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Cancel pointer event (mouseup, touchcancel, )</span>","<span class=\"c\"> * @name vs.core.POINTER_CANCEL </span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span> ","core<span class=\"k\">.</span>POINTER_CANCEL<span class=\"k\">;</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span>EVENT_SUPPORT_TOUCH<span class=\"k\">)</span>","<span class=\"k\">{</span>","  core<span class=\"k\">.</span>POINTER_START <span class=\"k\">=</span> <span class=\"s\">'touchstart'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_MOVE <span class=\"k\">=</span> <span class=\"s\">'touchmove'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_END <span class=\"k\">=</span> <span class=\"s\">'touchend'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_CANCEL <span class=\"k\">=</span> <span class=\"s\">'touchcancel'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","<span class=\"k\">else</span>","<span class=\"k\">{</span>","  core<span class=\"k\">.</span>POINTER_START <span class=\"k\">=</span> <span class=\"s\">'mousedown'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_MOVE <span class=\"k\">=</span> <span class=\"s\">'mousemove'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_END <span class=\"k\">=</span> <span class=\"s\">'mouseup'</span><span class=\"k\">;</span>","  core<span class=\"k\">.</span>POINTER_CANCEL <span class=\"k\">=</span> <span class=\"s\">'mouseup'</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  An vs.core.Event object, or simply an event, contains information about an </span>","<span class=\"c\"> *  input action such as a button click or a key down. The Event object contains</span>","<span class=\"c\"> *  pertinent information about each event, such as where the cursor was located</span>","<span class=\"c\"> *  or which character was typed.&lt;br&gt;</span>","<span class=\"c\"> *  When an event is catch by an application component, the callback</span>","<span class=\"c\"> *  receives as parameters an instance (or sub instance) of this class.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  It specifies the source of the event (which object has generated the event),</span>","<span class=\"c\"> *  the type of the event and an event data.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @memberOf vs.core</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {vs.core.EventSource} src the source of the event [mandatory]</span>","<span class=\"c\"> * @param {string} type the event type [mandatory]</span>","<span class=\"c\"> * @param {Object} data complemetary event data [optional]</span>","<span class=\"c\">*/</span>","<span class=\"k\">var</span> Event <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>src<span class=\"k\">,</span> type<span class=\"k\">,</span> data<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>src <span class=\"k\">=</span> src<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>srcTarget <span class=\"k\">=</span> src<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>type <span class=\"k\">=</span> type<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>data <span class=\"k\">=</span> data<span class=\"k\">;</span>","<span class=\"k\">}</span>","","Event<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * The component which produce the event</span>","<span class=\"c\">   * @type {vs.core.EventSource|HTMLElement}</span>","<span class=\"c\">   * @name vs.core.Event#src</span>","<span class=\"c\">   */</span>","  src<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * [Deprecated] The component which produce the event. &lt;br&gt;</span>","<span class=\"c\">   * In case of DOM event, the Event is mapped to the DOM event. Then</span>","<span class=\"c\">   * the developer has access to srcTarget (and many other data).</span>","<span class=\"c\">   * @type {vs.core.EventSource|HTMLElement}</span>","<span class=\"c\">   * @name vs.core.Event#srcTarget</span>","<span class=\"c\">   * @deprecated</span>","<span class=\"c\">   */</span>","  srcTarget <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * The event spec. For instance 'click' for a mouse click event.</span>","<span class=\"c\">   * @type {String}</span>","<span class=\"c\">   * @name vs.core.Event#type</span>","<span class=\"c\">   */</span>","  type<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * The optional data associate to the event.</span>","<span class=\"c\">   * @type {Object|null}</span>","<span class=\"c\">   * @name vs.core.Event#data</span>","<span class=\"c\">   */</span>","  data<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>src<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>srcTarget<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>type<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Event <span class=\"k\">=</span> Event<span class=\"k\">;</span>","core<span class=\"k\">.</span>FORCE_EVENT_PROPAGATION_DELAY <span class=\"k\">=</span> FORCE_EVENT_PROPAGATION_DELAY<span class=\"k\">;</span>","core<span class=\"k\">.</span>EVENT_SUPPORT_TOUCH <span class=\"k\">=</span> EVENT_SUPPORT_TOUCH<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Structure used for managing events</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> Handler <span class=\"k\">(</span>_spec<span class=\"k\">,</span> _obj<span class=\"k\">,</span> _func<span class=\"k\">,</span> _delay<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>spec <span class=\"k\">=</span> _spec<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>obj <span class=\"k\">=</span> _obj<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>delay <span class=\"k\">=</span> FORCE_EVENT_PROPAGATION_DELAY<span class=\"k\">?</span><span class=\"k\">true</span><span class=\"k\">:</span>_delay<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>_func<span class=\"k\">))</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>func_ptr <span class=\"k\">=</span> _func<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>func <span class=\"k\">=</span> _func<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @protected</span>","<span class=\"c\"> */</span>","Handler<span class=\"k\">.</span>prototype<span class=\"k\">.</span>destructor <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>spec<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>obj<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delay<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>func_ptr<span class=\"k\">);</span>","  <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>func<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  vs.core.EventSource is an  class that forms the basis of event and command </span>","<span class=\"c\"> *  processing. All class that handles events must inherit form EventSource.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.EventSource</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure [mandatory]</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> EventSource <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/** @name vs.core.EventSource# */</span>","EventSource<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  __bindings__ <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  __node_binds__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","","  <span class=\"c\">/***************************************************************</span>","","<span class=\"c\">  ***************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> spec<span class=\"k\">,</span> list_bind<span class=\"k\">,</span> i<span class=\"k\">,</span> handler<span class=\"k\">,</span> binds<span class=\"k\">;</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>spec <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        handler <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>pop <span class=\"k\">();</span>","        util<span class=\"k\">.</span>free <span class=\"k\">(</span>handler<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__bindings__<span class=\"k\">);</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>spec <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      binds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>binds<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn","          <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.destructor, no bind &lt;\"</span> <span class=\"k\">+</span> spec <span class=\"k\">+</span> <span class=\"s\">\" exists.\"</span><span class=\"k\">);</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> binds<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        data <span class=\"k\">=</span> binds <span class=\"k\">[</span>i<span class=\"k\">];</span>","        data<span class=\"k\">.</span>n<span class=\"k\">.</span>removeEventListener <span class=\"k\">(</span>event<span class=\"k\">,</span> data<span class=\"k\">.</span>h<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Clone the EventSource &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#clone</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Object} config the configuration structure for the new object</span>","<span class=\"c\">   * @return {vs.core.EventSource} the cloned object</span>","<span class=\"c\">   */</span>","  clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> obj <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>prototype<span class=\"k\">.</span>clone<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> config<span class=\"k\">,</span> cloned_map<span class=\"k\">);</span>","    obj<span class=\"k\">.</span>__bindings__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    obj<span class=\"k\">.</span>__node_binds__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event bind method to listen events</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  When you want listen an event generated by this object, you can</span>","<span class=\"c\">   *  bind your object (the observer) to this object using 'bind' method.</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Warning:&lt;br&gt;</span>","<span class=\"c\">   *  If you know the process of your callback can take time or can be blocking</span>","<span class=\"c\">   *  you should set delay to 'true' otherwise you application will be stuck.</span>","<span class=\"c\">   *  But be careful this options add an overlay in the event propagation.</span>","<span class=\"c\">   *  For debug purpose or more secure coding you can force delay to true, for</span>","<span class=\"c\">   *  all bind using global variable FORCE_EVENT_PROPAGATION_DELAY.&lt;br/&gt;</span>","<span class=\"c\">   *  You just have set as true (FORCE_EVENT_PROPAGATION_DELAY = true)</span>","<span class=\"c\">   *  at beginning of your program.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#bind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object interested to catch the event [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        notify method will be called [optional]</span>","<span class=\"c\">   * @param {boolean} delay if true the callback 'func' will be call within </span>","<span class=\"c\">   *        an other \"simili thread\". </span>","<span class=\"c\">   */</span>","  bind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> delay<span class=\"k\">)</span>","  <span class=\"k\">{</span>","     <span class=\"k\">if</span> <span class=\"k\">(!</span>spec <span class=\"k\">||</span> <span class=\"k\">!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">/** @private */</span>","    <span class=\"k\">var</span> handler <span class=\"k\">=</span> <span class=\"k\">new</span> Handler <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> delay<span class=\"k\">),</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      list_bind <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">]</span> <span class=\"k\">=</span> list_bind<span class=\"k\">;</span> ","    <span class=\"k\">}</span>","    list_bind<span class=\"k\">.</span>push <span class=\"k\">(</span>handler<span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> handler<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event unbind method</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Should be call when you want stop event listening on this object</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#unbind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {vs.core.Object} obj the object you want unbind [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        all binding with &lt;spec, obj&gt; will be removed</span>","<span class=\"c\">   */</span>","  unbind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>spec<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>spec<span class=\"k\">],</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> bind<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      bind <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>spec <span class=\"k\">===</span> spec<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>obj <span class=\"k\">===</span> obj<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">||</span> util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func<span class=\"k\">)</span> <span class=\"k\">)</span>","          <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>bind<span class=\"k\">.</span>func <span class=\"k\">===</span> func <span class=\"k\">||</span> bind<span class=\"k\">.</span>func_ptr <span class=\"k\">===</span> func<span class=\"k\">)</span>","            <span class=\"k\">{</span>","              list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","              util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span>","          <span class=\"k\">{</span>","            list_bind<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","            util<span class=\"k\">.</span>free <span class=\"k\">(</span>bind<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Propagate an event</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  All Object listening this EventSource will receive this new handled</span>","<span class=\"c\">   *  event.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#propagate</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {String} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {Object} data an optional data event [optional]</span>","<span class=\"c\">   * @param {vs.core.Object} srcTarget a event source, By default this object</span>","<span class=\"c\">   *        is the event source [mandatory]</span>","<span class=\"c\">   * @param {boolean} delay if true the callback 'func' will be call within </span>","<span class=\"c\">   *        an other \"simili thread\". </span>","<span class=\"c\">   */</span>","  propagate <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>type<span class=\"k\">,</span> data<span class=\"k\">,</span> srcTarget<span class=\"k\">,</span> delay<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>type<span class=\"k\">],</span> event<span class=\"k\">,</span> i<span class=\"k\">,</span> handler<span class=\"k\">,</span> func<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__parent<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>srcTarget<span class=\"k\">)</span> <span class=\"k\">{</span> srcTarget <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>__parent<span class=\"k\">.</span>propagate <span class=\"k\">(</span>type<span class=\"k\">,</span> data<span class=\"k\">,</span> srcTarget<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    event <span class=\"k\">=</span> <span class=\"k\">new</span> Event <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> type<span class=\"k\">,</span> data<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>srcTarget<span class=\"k\">)</span> <span class=\"k\">{</span> event<span class=\"k\">.</span>srcTarget <span class=\"k\">=</span> srcTarget<span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    i <span class=\"k\">=</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">try</span>","    <span class=\"k\">{</span>","      func <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func_ptr<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"c\">// call function</span>","          handler<span class=\"k\">.</span>func_ptr<span class=\"k\">.</span>call <span class=\"k\">(</span>handler<span class=\"k\">.</span>obj<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>func<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          handler<span class=\"k\">.</span>obj<span class=\"k\">[</span>handler<span class=\"k\">.</span>func<span class=\"k\">]</span> <span class=\"k\">(</span>event<span class=\"k\">);</span> <span class=\"c\">// specific notify method</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          handler<span class=\"k\">.</span>obj<span class=\"k\">.</span>notify <span class=\"k\">(</span>event<span class=\"k\">);</span> <span class=\"c\">// default notify method</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","","      <span class=\"k\">while</span> <span class=\"k\">(</span>i<span class=\"k\">--)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">/** @private */</span>","        handler <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>    ","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>delay <span class=\"k\">||</span> handler<span class=\"k\">.</span>delay<span class=\"k\">)</span> <span class=\"k\">{</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">(</span>func<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span> <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">{</span> func<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * if this object receive an event it repropagates it if nobody has </span>","<span class=\"c\">   * overcharged the notify method.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#notify</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   */</span>","  notify <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","  <span class=\"k\">{</span>","     <span class=\"k\">this</span><span class=\"k\">.</span>propagate <span class=\"k\">(</span>event<span class=\"k\">.</span>type<span class=\"k\">,</span> event<span class=\"k\">.</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  The event bind method to listen events form DOM</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  When you want you object listen an event generated by the DOM, you can</span>","<span class=\"c\">   *  bind your object (the observer) to the node using 'nodeBind' method.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#nodeBind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Node} node the node to observe [mandatory]</span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {string|Function} func the name of a callback or the callback</span>","<span class=\"c\">   *      itself. If its not defined notify method will be called [optional]</span>","<span class=\"c\">   */</span>","  nodeBind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> event<span class=\"k\">,</span> func_s<span class=\"k\">,</span> modifiers<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>node<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>event<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> func <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> handler <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> binds<span class=\"k\">,</span> key<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>func_s<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span> func_s <span class=\"k\">=</span> <span class=\"s\">'notify'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">[</span>func_s<span class=\"k\">]))</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn","          <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeBind, unknown function named: \"</span> <span class=\"k\">+</span> func_s<span class=\"k\">);</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeBind, invalid func parameter\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      func <span class=\"k\">=</span> func_s<span class=\"k\">;</span>","      func_s <span class=\"k\">=</span> func<span class=\"k\">.</span>name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span>modifiers <span class=\"k\">||</span> modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>ANY_MASK<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * @private</span>","<span class=\"c\">       */</span>","      handler <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// event.preventDefault ();</span>","        <span class=\"c\">// event.stopPropagation (); // Seems this line of code bug with BB OS </span>","        ","        <span class=\"k\">try</span>","        <span class=\"k\">{</span>","          event<span class=\"k\">.</span>src <span class=\"k\">=</span> event<span class=\"k\">.</span>currentTarget<span class=\"k\">;</span>","          event<span class=\"k\">.</span>data <span class=\"k\">=</span> event<span class=\"k\">;</span>","  ","          <span class=\"k\">if</span> <span class=\"k\">(!</span>func<span class=\"k\">)</span> <span class=\"k\">{</span> func <span class=\"k\">=</span> self <span class=\"k\">[</span>func_s<span class=\"k\">];</span> <span class=\"k\">}</span>","          func<span class=\"k\">.</span>call <span class=\"k\">(</span>self<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      handler <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// event.preventDefault ();</span>","        event<span class=\"k\">.</span>stopPropagation <span class=\"k\">();</span>","        ","        <span class=\"k\">try</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>modifiers <span class=\"k\">&amp;&amp;</span>","            <span class=\"k\">(</span>event<span class=\"k\">.</span>altKey <span class=\"k\">||</span> event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>shiftKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">))</span> ","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>ALT <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>altKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>CTRL <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>ctrlKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>SHIFT <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>modifiers <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span>","          <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          event<span class=\"k\">.</span>src <span class=\"k\">=</span> event<span class=\"k\">.</span>currentTarget<span class=\"k\">;</span>","          event<span class=\"k\">.</span>data <span class=\"k\">=</span> event<span class=\"k\">;</span>","  ","          <span class=\"k\">if</span> <span class=\"k\">(!</span>func<span class=\"k\">)</span> <span class=\"k\">{</span> func <span class=\"k\">=</span> self <span class=\"k\">[</span>func_s<span class=\"k\">];</span> <span class=\"k\">}</span>","          func<span class=\"k\">.</span>call <span class=\"k\">(</span>self<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// save data for nodeUnbind</span>","    key <span class=\"k\">=</span> event <span class=\"k\">+</span> func_s<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">'nodeBind impossible'</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    binds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>binds<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      binds <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> binds<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    binds<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">{</span>n<span class=\"k\">:</span> node<span class=\"k\">,</span> h<span class=\"k\">:</span> handler<span class=\"k\">}</span><span class=\"k\">);</span>","    ","    <span class=\"c\">// set the listener</span>","    node<span class=\"k\">.</span>addEventListener <span class=\"k\">(</span>event<span class=\"k\">,</span> handler<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Unbind a DOM event listening</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.EventSource#nodeUnbind</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @param {Node} node the node which is observed [mandatory]</span>","<span class=\"c\">   * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\">   * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\">   *        notify method will be called [optional]</span>","<span class=\"c\">   */</span>","  nodeUnbind <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>node<span class=\"k\">,</span> event<span class=\"k\">,</span> func_s<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>node<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>event<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> func <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">,</span> i<span class=\"k\">,</span> key<span class=\"k\">,</span> binds<span class=\"k\">,</span> data<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>func_s<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span> func_s <span class=\"k\">=</span> <span class=\"s\">'notify'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span><span class=\"k\">this</span> <span class=\"k\">[</span>func_s<span class=\"k\">]))</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeUnbind, unknown function named: \"</span> <span class=\"k\">+</span> func_s<span class=\"k\">);</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isFunction <span class=\"k\">(</span>func_s<span class=\"k\">))</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeBind, invalid func parameter\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      func <span class=\"k\">=</span> func_s<span class=\"k\">;</span>","      func_s <span class=\"k\">=</span> func<span class=\"k\">.</span>name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    key <span class=\"k\">=</span> event <span class=\"k\">+</span> func_s<span class=\"k\">;</span>","    binds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__node_binds__ <span class=\"k\">[</span>key<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">(</span>binds<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>warn","        <span class=\"k\">(</span><span class=\"s\">\"vs.core.Object.nodeUnbind, no bind &lt;\"</span> <span class=\"k\">+</span> event <span class=\"k\">+</span> <span class=\"s\">','</span> <span class=\"k\">+</span> func_s <span class=\"k\">+</span> <span class=\"s\">\" exists.\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> binds<span class=\"k\">.</span>length<span class=\"k\">;)</span>","    <span class=\"k\">{</span>","      data <span class=\"k\">=</span> binds <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">.</span>n <span class=\"k\">===</span> node<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        node<span class=\"k\">.</span>removeEventListener <span class=\"k\">(</span>event<span class=\"k\">,</span> data<span class=\"k\">.</span>h<span class=\"k\">);</span>","        binds<span class=\"k\">.</span>remove <span class=\"k\">(</span>i<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        i<span class=\"k\">++;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// TODO WARNING pas bon, si plusieurs objets l'observe !!!</span>","    node<span class=\"k\">.</span>_object_ <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"c\">//   </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    *  Should be documented</span>","<span class=\"c\">//    *</span>","<span class=\"c\">//    * @name vs.core.EventSource#allDocumentBind</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    * </span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   allDocumentBind : function (event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     this._allDocumentBind (document, event, func);</span>","<span class=\"c\">//   },</span>","<span class=\"c\">//   </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    * @private</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   _allDocumentBind : function (doc, event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     if (!doc) { return; }</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     // current document event management</span>","<span class=\"c\">//     this.nodeBind (doc, event, func);</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     // children document event management</span>","<span class=\"c\">//     var frame, iframes, i;</span>","<span class=\"c\">//     if (doc.frames)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; doc.frames.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = doc.frames [i];</span>","<span class=\"c\">//         this._allDocumentBind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     iframes = doc.getElementsByTagName ('iframe');</span>","<span class=\"c\">//     if (iframes)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; iframes.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = iframes.item (i);</span>","<span class=\"c\">//         this._allDocumentBind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//   },</span>","<span class=\"c\">// </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    *  Should be documented</span>","<span class=\"c\">//    *</span>","<span class=\"c\">//    * @name vs.core.EventSource#allDocumentUnbind</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    *</span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   allDocumentUnbind : function (event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     this._allDocumentUnbind (document, event, func);</span>","<span class=\"c\">//   },</span>","<span class=\"c\">//   </span>","<span class=\"c\">//   /**</span>","<span class=\"c\">//    * @private</span>","<span class=\"c\">//    * @function</span>","<span class=\"c\">//    */</span>","<span class=\"c\">//   _allDocumentUnbind : function (doc, event, func)</span>","<span class=\"c\">//   {</span>","<span class=\"c\">//     if (!doc) { return; }</span>","<span class=\"c\">//     </span>","<span class=\"c\">//     // current document event management</span>","<span class=\"c\">//     this.nodeUnbind (doc, event, func);</span>","<span class=\"c\">// </span>","<span class=\"c\">//     // children document event management</span>","<span class=\"c\">//     var frame, iframes, i;</span>","<span class=\"c\">//     if (doc.frames)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; doc.frames.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = doc.frames [i];</span>","<span class=\"c\">//         this._allDocumentUnbind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//     iframes = doc.getElementsByTagName ('iframe');</span>","<span class=\"c\">//     if (iframes)</span>","<span class=\"c\">//     {</span>","<span class=\"c\">//       for (i = 0; i &lt; iframes.length; i++)</span>","<span class=\"c\">//       {</span>","<span class=\"c\">//         frame = iframes.item (i);</span>","<span class=\"c\">//         this._allDocumentUnbind (frame.contentDocument, event, func);</span>","<span class=\"c\">//       }</span>","<span class=\"c\">//     }</span>","<span class=\"c\">//   }</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>EventSource<span class=\"k\">,</span> VSObject<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>EventSource <span class=\"k\">=</span> EventSource<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.KEYBOARD Object</span>","<span class=\"c\"> * &lt;p&gt;</span>","<span class=\"c\"> * &lt;p&gt;</span>","<span class=\"c\"> *  List of predefined event spec:&lt;br&gt;</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.KEY_UP</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ESC</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ENTER</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.SPACE</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.BACKSPACE</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.SHIFT</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.CTRL</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ALT</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.NUMLOCK</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.LEFT_ARROW </span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.UP_ARROW </span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.RIGHT_ARROW</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.DOWN_ARROW </span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.A</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.S</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.Z</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.META</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.ANY_MASK</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.UNDO</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.REDO</span>","<span class=\"c\"> *  &lt;li&gt; vs.core.KEYBOARD.SAVE</span>","<span class=\"c\"> * &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @type vs.core.EventSource</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.KEYBOARD</span>","<span class=\"c\"> *  @const</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> KEYBOARD <span class=\"k\">=</span> <span class=\"k\">new</span> EventSource <span class=\"k\">(</span><span class=\"s\">'__KEYBOARD__'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","KEYBOARD<span class=\"k\">.</span>_handler_set_down <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","KEYBOARD<span class=\"k\">.</span>_handler_set_up <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The event bind method to listen events</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  When you want listen an event generated by this object, you can</span>","<span class=\"c\"> *  bind your object (the observer) to this object using 'bind' method.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  Warning:&lt;br&gt;</span>","<span class=\"c\"> *  If you know the process of your callback can take time or can be blocking</span>","<span class=\"c\"> *  you should set delay to 'true' otherwise you application will be stuck.</span>","<span class=\"c\"> *  But be careful this options add an overlay in the event propagation.</span>","<span class=\"c\"> *  For debug purpose or more secure coding you can force delay to true, for</span>","<span class=\"c\"> *  all bind using global variable FORCE_EVENT_PROPAGATION_DELAY.&lt;br/&gt;</span>","<span class=\"c\"> *  You just have set as true (FORCE_EVENT_PROPAGATION_DELAY = true)</span>","<span class=\"c\"> *  at beginning of your program.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.KEYBOARD.bind</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @param {string} spec the event specification [mandatory]</span>","<span class=\"c\"> * @param {vs.core.Object} obj the object interested to catch the event [mandatory]</span>","<span class=\"c\"> * @param {string} func the name of a callback. If its not defined</span>","<span class=\"c\"> *        notify method will be called [optional]</span>","<span class=\"c\"> * @param {boolean} delay if true the callback 'func' will be call within </span>","<span class=\"c\"> *        an other \"simili thread\". </span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> KEYBOARD_bind <span class=\"k\">(</span>keyCode<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">,</span> prevent<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> handler <span class=\"k\">=</span> EventSource<span class=\"k\">.</span>prototype<span class=\"k\">.</span>bind<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> keyCode<span class=\"k\">,</span> obj<span class=\"k\">,</span> func<span class=\"k\">),</span>","    self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>prevent<span class=\"k\">)</span> <span class=\"k\">{</span> handler<span class=\"k\">.</span>prevent <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>keyCode <span class=\"k\">&gt;</span> KEYBOARD<span class=\"k\">.</span>KEY_UP<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_up<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      document<span class=\"k\">.</span>documentElement<span class=\"k\">.</span>addEventListener","        <span class=\"k\">(</span><span class=\"s\">\"keyup\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        self<span class=\"k\">.</span>managePrevent <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","        self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode <span class=\"k\">+</span> KEYBOARD<span class=\"k\">.</span>KEY_UP<span class=\"k\">,</span> event<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_up <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">else</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_down<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      document<span class=\"k\">.</span>documentElement<span class=\"k\">.</span>addEventListener","        <span class=\"k\">(</span><span class=\"s\">\"keydown\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","            <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>Z<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>UNDO<span class=\"k\">);</span>","          event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","                  event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>Z<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>REDO<span class=\"k\">);</span>","          event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode <span class=\"k\">===</span> KEYBOARD<span class=\"k\">.</span>S<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>SAVE<span class=\"k\">);</span>","          event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>event<span class=\"k\">.</span>ctrlKey <span class=\"k\">||</span> event<span class=\"k\">.</span>metaKey<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>event<span class=\"k\">.</span>shiftKey <span class=\"k\">&amp;&amp;</span> event<span class=\"k\">.</span>keyCode<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>managePrevent <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">+</span> event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">+</span> event<span class=\"k\">.</span>keyCode<span class=\"k\">);</span>","          <span class=\"c\">//event.preventDefault ();</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>managePrevent <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span>event<span class=\"k\">.</span>keyCode<span class=\"k\">,</span> event<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_handler_set_down <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> */</span>","KEYBOARD<span class=\"k\">.</span>managePrevent <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>type<span class=\"k\">,</span> event<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> list_bind <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>__bindings__ <span class=\"k\">[</span>type<span class=\"k\">],</span> i<span class=\"k\">,</span> handler<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>list_bind<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> list_bind<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","  <span class=\"k\">{</span>","    handler <span class=\"k\">=</span> list_bind <span class=\"k\">[</span>i<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>handler<span class=\"k\">.</span>prevent<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      event<span class=\"k\">.</span>preventDefault <span class=\"k\">();</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>KEY_UP <span class=\"k\">=</span> <span class=\"s\">1000</span><span class=\"k\">;</span> ","KEYBOARD<span class=\"k\">.</span>ESC <span class=\"k\">=</span> <span class=\"s\">27</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>ENTER <span class=\"k\">=</span> <span class=\"s\">13</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>SPACE <span class=\"k\">=</span> <span class=\"s\">32</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>BACKSPACE <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>SHIFT <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>CTRL <span class=\"k\">=</span> <span class=\"s\">17</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>ALT <span class=\"k\">=</span> <span class=\"s\">18</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>NUMLOCK <span class=\"k\">=</span> <span class=\"s\">144</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>LEFT_ARROW <span class=\"k\">=</span> <span class=\"s\">37</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>UP_ARROW <span class=\"k\">=</span> <span class=\"s\">38</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>RIGHT_ARROW <span class=\"k\">=</span> <span class=\"s\">39</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>DOWN_ARROW <span class=\"k\">=</span> <span class=\"s\">40</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>L <span class=\"k\">=</span> <span class=\"s\">76</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>S <span class=\"k\">=</span> <span class=\"s\">83</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>Z <span class=\"k\">=</span> <span class=\"s\">90</span><span class=\"k\">;</span>","","","KEYBOARD<span class=\"k\">.</span>META <span class=\"k\">=</span> <span class=\"s\">2000</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>ANY_MASK <span class=\"k\">=</span> <span class=\"s\">3000</span><span class=\"k\">;</span>","","KEYBOARD<span class=\"k\">.</span>UNDO <span class=\"k\">=</span> <span class=\"s\">256</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>REDO <span class=\"k\">=</span> <span class=\"s\">257</span><span class=\"k\">;</span>","KEYBOARD<span class=\"k\">.</span>SAVE <span class=\"k\">=</span> <span class=\"s\">258</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","core<span class=\"k\">.</span>KEYBOARD <span class=\"k\">=</span> KEYBOARD<span class=\"k\">;</span>","core<span class=\"k\">.</span>KEYBOARD<span class=\"k\">.</span>bind <span class=\"k\">=</span> KEYBOARD_bind<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\"> OTHER DEALINGS IN THE SOFTWARE.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The Fsm class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.EventSource</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Fsm element defines a deterministic Finite-State-Machine</span>","<span class=\"c\"> *  (aka Finite-State Automaton). A fsn is an automaton such as:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li /&gt;there is only one initial state;</span>","<span class=\"c\"> *    &lt;li /&gt;there is no transitions conditioned on null input;</span>","<span class=\"c\"> *    &lt;li /&gt;there is only one transition for a given input and a given state.</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *    A fsm is specified as flollowing :</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li /&gt;the set Q, is the set of state;</span>","<span class=\"c\"> *    &lt;li /&gt;the set I, is the input alphabet, i.e. a set of word that ca be</span>","<span class=\"c\"> *      generate a transition between two states;</span>","<span class=\"c\"> *    &lt;li /&gt;the set O, is the ouput alphabet. It containts the set of word</span>","<span class=\"c\"> *      produced when a transition is crossed;</span>","<span class=\"c\"> *    &lt;li /&gt;the set E, is the list of transition &lt;QxIxQxO&gt;;</span>","<span class=\"c\"> *    &lt;li /&gt;an initial state.</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  When an automaton is rendered (after run), it begins in the initial state.</span>","<span class=\"c\"> *  It changes to new states depending on events that it receives and the</span>","<span class=\"c\"> *  transition function. Whenever the automaton is deactivated (for instance</span>","<span class=\"c\"> *  by being in a deactivated branch of a Rules), it does not react any more</span>","<span class=\"c\"> *  to events. It will resume to its last state and react again to events when</span>","<span class=\"c\"> *  reactivated.&lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  The general manner to control fsm and make it cross a transition is to</span>","<span class=\"c\"> *  associate event to a input lexem. For that use the methods setInput ().</span>","<span class=\"c\"> *  But an automaton can also be manually control by notifying to it a input</span>","<span class=\"c\"> *  lexem. For that, use the method Fsm.fsmNotify (String).&lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Automatons can have outputs associated to their transitions (aka Mealy</span>","<span class=\"c\"> *  machine) or states (aka Moore machine, not yet implemented). At that time </span>","<span class=\"c\"> *  the fsm emit event defined by an string (the output lexem) or call an</span>","<span class=\"c\"> *  action associated to the output lexem.</span>","<span class=\"c\"> *  The event can be received by setting a Binding on this fsm.</span>","<span class=\"c\"> *  Otherwise for specifying the action use the setOuput () method.&lt;br /&gt;</span>","<span class=\"c\"> *  &lt;br /&gt;</span>","<span class=\"c\"> *  Known limitations:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *   &lt;li /&gt;only one output lexem can be generated when crossing a transition.</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Simple example to create a automata:</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   var my_fsm = new vs.core.Fsm (object);</span>","<span class=\"c\"> *   // States declaration </span>","<span class=\"c\"> *   my_fsm.addState (\"1\");</span>","<span class=\"c\"> *   my_fsm.addState (\"2\");</span>","<span class=\"c\"> *   // Input lexems declaration</span>","<span class=\"c\"> *   my_fsm.addInput (\"a\");</span>","<span class=\"c\"> *   my_fsm.addInput (\"b\");</span>","<span class=\"c\"> *   // Ouptut lexems declaration</span>","<span class=\"c\"> *   my_fsm.addOutput (\"c\");</span>","<span class=\"c\"> *   my_fsm.addOutput (\"d\");</span>","<span class=\"c\"> *   // transitions declaration</span>","<span class=\"c\"> *   my_fsm.addTransition (\"1\", \"2\", \"a\", \"c\");</span>","<span class=\"c\"> *   my_fsm.addTransition (\"2\", \"3\", \"b\", \"d\");</span>","<span class=\"c\"> *   // initial state declaration</span>","<span class=\"c\"> *   my_fsm.setInitialState (\"1\");</span>","<span class=\"c\"> *   // activate the FSM</span>","<span class=\"c\"> *   my_fsm.activate ();</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *   // event associations</span>","<span class=\"c\"> *   // \"a\" will be generated after the button selection</span>","<span class=\"c\"> *   my_fsm.setInput (\"a\", aButton, 'select');</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Fsm.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Fsm</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {vs.core.Object} owner the Object using this Fsm [mandatory]</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> Fsm <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>owner<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>createId <span class=\"k\">());</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Fsm<span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>owner <span class=\"k\">=</span> owner<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>   <span class=\"c\">///&lt; List of fsm state : Q</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_list_input <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>   <span class=\"c\">///&lt; List of input lexem (alphabet) : I</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_list_output <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>  <span class=\"c\">///&lt; List of output lexem (alphabet) : O</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>  <span class=\"c\">///&lt; initial state name</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_current_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>  <span class=\"c\">///&lt; current state name</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","Fsm<span class=\"k\">.</span>prototype <span class=\"k\">=</span>","<span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  destructor <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">);</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>owner <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","  ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_inputs<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_output_action<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">  *     Generic function</span>","<span class=\"c\">  ****************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  clone <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>object<span class=\"k\">,</span> cloned_map<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> obj <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">.</span>prototype<span class=\"k\">.</span>clone<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> cloned_map<span class=\"k\">);</span>","    ","    obj<span class=\"k\">.</span>owner <span class=\"k\">=</span> object<span class=\"k\">;</span>","    obj<span class=\"k\">.</span>_current_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","    ","    obj<span class=\"k\">.</span>_inputs <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    obj<span class=\"k\">.</span>_output_action <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// XXX TODO WARNING il faut refaire in inputs en outputs.</span>","    ","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Full facility constructor that takes specification of the fsm as</span>","<span class=\"c\">   *  parameter.</span>","<span class=\"c\">   *  transitions is an array of object {from, to, on, output}</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#initWithData </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {Array} states is an array of state</span>","<span class=\"c\">   * @param {Array} inputs is an array of input</span>","<span class=\"c\">   * @param {Array} outputs is an array of output</span>","<span class=\"c\">   * @param {Array} transitions is an array of object {from, to, on, output}</span>","<span class=\"c\">   */</span>","  initWithData <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>states<span class=\"k\">,</span> inputs<span class=\"k\">,</span> outputs<span class=\"k\">,</span> transitions<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>states <span class=\"k\">||</span> <span class=\"k\">!</span>inputs <span class=\"k\">||</span> <span class=\"k\">!</span>outputs <span class=\"k\">||</span> <span class=\"k\">!</span>transitions<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> states<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addState <span class=\"k\">(</span>states <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> inputs<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addInput <span class=\"k\">(</span>inputs <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> outputs<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOutput <span class=\"k\">(</span>outputs <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> transitions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>from<span class=\"k\">,</span> transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>to<span class=\"k\">,</span>","        transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>on<span class=\"k\">,</span> transitions <span class=\"k\">[</span>i<span class=\"k\">].</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Full facility constructor that takes state x state matrix of the fsm as</span>","<span class=\"c\">   *  parameter:</span>","<span class=\"c\">   * &lt;ul&gt;</span>","<span class=\"c\">   *   &lt;li /&gt;First columm : list of \"from\" sates \\n</span>","<span class=\"c\">   *   &lt;li /&gt;First row : list of \"to\" sates \\n</span>","<span class=\"c\">   *   &lt;li /&gt;other cell : tuple \"i/o\" of input and ouput event \\n</span>","<span class=\"c\">   * &lt;/ul&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  If no id is specified, will create a random one.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  // fsm is : 1 -a-&gt; 2 -b-&gt; 3 -c-&gt; 1 \\n</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  matrix = [</span>","<span class=\"c\">   *       [\"\", \"1\", \"2\", \"3\"],</span>","<span class=\"c\">   *       [\"1\", \"\", \"a/\", \"\"],</span>","<span class=\"c\">   *       [\"2\", \"\", \"\", \"b/\"],</span>","<span class=\"c\">   *       [\"3\", \"c/\", \"\", \"\"]</span>","<span class=\"c\">   *  ];</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  // Specification for input/output of a transition must have the following</span>","<span class=\"c\">   *  // form : \"i\" | \"i/\" | \"/o\" | \"i/o\"</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  fsm = new Fsm (object);</span>","<span class=\"c\">   *  fsm.initWithMatrix (matrix);</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#initWithMatrix </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {Array} matrix</span>","<span class=\"c\">   */</span>","  initWithMatrix <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>matrix<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">// add state</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>addState <span class=\"k\">(</span>matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">[</span>i<span class=\"k\">]);</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// add transition (add input / output)</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> matrix<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> from <span class=\"k\">=</span> matrix<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]</span>","","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> to <span class=\"k\">=</span> matrix<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">][</span>j<span class=\"k\">];</span>","        <span class=\"k\">var</span> i_o <span class=\"k\">=</span>  matrix <span class=\"k\">[</span>i<span class=\"k\">][</span>j<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>i_o<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">var</span> io_a <span class=\"k\">=</span> i_o<span class=\"k\">.</span>split <span class=\"k\">(</span><span class=\"s\">'/'</span><span class=\"k\">);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">])</span> <span class=\"k\">this</span><span class=\"k\">.</span>addInput <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOutput <span class=\"k\">(</span>io_a<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","          ","          <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">,</span> io_a<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> io_a<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*******************************************</span>","<span class=\"c\">              Managing inputs</span>","<span class=\"c\">  *******************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add an imput to the fsm</span>","<span class=\"c\">   *  This input will be add to the list of input alphabet.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addInput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} input the new word that will be add to the alphabet</span>","<span class=\"c\">   */</span>","  addInput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>input <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>input<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">.</span>push <span class=\"k\">(</span>input<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the input alphabet of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getInputs </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return {Array} the alphabet as a set of String</span>","<span class=\"c\">   */</span>","  getInputs <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">.</span>slice <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Test if a word in inlcude in imput alphabet</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#existInput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} input the input</span>","<span class=\"c\">   * @return true is exists</span>","<span class=\"c\">   */</span>","  existInput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>input<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">.</span>findItem <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/*******************************************</span>","<span class=\"c\">              Managing outputs</span>","<span class=\"c\">  *******************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add an ouput to the fsm</span>","<span class=\"c\">   *  This ouput will be add to the list of ouput alphabet.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addOutput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} output the new word that will be add to the alphabet</span>","<span class=\"c\">   */</span>","  addOutput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>output<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>output <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existOutput <span class=\"k\">(</span>output<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">.</span>push <span class=\"k\">(</span>output<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the ouput alphabet of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getOutputs </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return the alphanet as a set of String</span>","<span class=\"c\">   */</span>","  getOutputs <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">.</span>slice <span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Test if a word in include in ouput alphabet</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#existOutput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} output the output</span>","<span class=\"c\">   * @return true is exists</span>","<span class=\"c\">   */</span>","  existOutput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>output<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>output<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">.</span>findItem <span class=\"k\">(</span>output<span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*******************************************</span>","<span class=\"c\">              Managing States</span>","<span class=\"c\">  *******************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add a State to the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} name the new state name</span>","<span class=\"c\">   */</span>","  addState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    state<span class=\"k\">.</span>transitionEvents <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> state<span class=\"k\">;</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Remove a State from the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#removeState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} name the new state name</span>","<span class=\"c\">   */</span>","  removeState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>name<span class=\"k\">]);</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Rename a State of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#renameState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} old_name the old state name</span>","<span class=\"c\">   * @param {string} new_name the new state name</span>","<span class=\"c\">   */</span>","  renameState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>old_name<span class=\"k\">,</span> new_name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>old_name <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>old_name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>new_name <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>new_name<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// change state name</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>new_name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>old_name<span class=\"k\">];</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>old_name<span class=\"k\">]);</span>","    ","    <span class=\"c\">// rename initial state if need</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">===</span> old_name<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> new_name<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// change all transition to state with the new name</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> state_id <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>state_id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> input <span class=\"k\">in</span> state<span class=\"k\">.</span>transitionEvents<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>input<span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">===</span> old_name<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          t<span class=\"k\">.</span>to <span class=\"k\">=</span> new_name<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Get list of fsm State</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getListState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return {Array} list of states</span>","<span class=\"c\">   */</span>","  getListState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      result<span class=\"k\">.</span>push <span class=\"k\">(</span>key<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Test existance of a state</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#existState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} state the state</span>","<span class=\"c\">   * @return true if state exists</span>","<span class=\"c\">   */</span>","  existState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>state<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>state<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Add a new transition from the state \"from\" to the state \"to\".</span>","<span class=\"c\">   *  The state from have to be already specified, otherwise, it will</span>","<span class=\"c\">   *  generate a exception.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#addTransition </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} from State from</span>","<span class=\"c\">   * @param {string} to State to</span>","<span class=\"c\">   * @param {string} on input lexem which cause the crossing of transition</span>","<span class=\"c\">   * @param {string} ouput optional ouput lexem that will be produce by the </span>","<span class=\"c\">   *    crossing</span>","<span class=\"c\">   */</span>","  addTransition <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">,</span> on<span class=\"k\">,</span> output<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>from <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>from<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>to <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>to<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>on<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> transition <span class=\"k\">=</span> <span class=\"k\">{</span>","      on<span class=\"k\">:</span> on<span class=\"k\">,</span>","      to<span class=\"k\">:</span> to<span class=\"k\">,</span>","      output<span class=\"k\">:</span> output","    <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">].</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">]</span> <span class=\"k\">=</span> transition<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Remove a transition from the state \"from\".</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#removeTransitionFrom </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} from State from</span>","<span class=\"c\">   * @param {string} on input lexem which cause the crossing of transition</span>","<span class=\"c\">   */</span>","  removeTransitionFrom <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> on<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>from <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>from<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>on<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">]</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">])</span>","    <span class=\"k\">{</span>","      <span class=\"k\">delete</span> <span class=\"k\">(</span>state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Remove a transition to the state \"to\".</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#removeTransitionTo </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} tp State tp</span>","<span class=\"c\">   * @param {string} on input lexem which cause the crossing of transition</span>","<span class=\"c\">   */</span>","  removeTransitionTo <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>to<span class=\"k\">,</span> on<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>to <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>to<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existInput <span class=\"k\">(</span>on<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> from <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">];</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>t <span class=\"k\">||</span> t<span class=\"k\">.</span>to <span class=\"k\">!==</span> to<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">delete</span> <span class=\"k\">(</span>state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the list of transitions to the state set</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getTransionsToState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} to State to</span>","<span class=\"c\">   * @return {Array} list of transitions</span>","<span class=\"c\">   */</span>","  getTransionsToState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>to<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>to<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> state_id <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>state_id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> input <span class=\"k\">in</span> state<span class=\"k\">.</span>transitionEvents<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>input<span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">!==</span> to<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","        ","        <span class=\"k\">var</span> tt <span class=\"k\">=</span> util<span class=\"k\">.</span>clone <span class=\"k\">(</span>t<span class=\"k\">);</span>","        tt<span class=\"k\">.</span>from <span class=\"k\">=</span> state_id<span class=\"k\">;</span>","        result<span class=\"k\">.</span>push <span class=\"k\">(</span>tt<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Return the list of transitions from the state set</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#getTransionsFromState </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} from State from</span>","<span class=\"c\">   * @return {Array} list of transitions</span>","<span class=\"c\">   */</span>","  getTransionsFromState <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>from<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[];</span>","    ","    <span class=\"k\">var</span> state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span>from<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>state <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> inputs <span class=\"k\">in</span> state<span class=\"k\">.</span>transitionEvents<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> state<span class=\"k\">.</span>transitionEvents <span class=\"k\">[</span>inputs<span class=\"k\">];</span>","      ","      <span class=\"k\">var</span> tt <span class=\"k\">=</span> util<span class=\"k\">.</span>clone <span class=\"k\">(</span>t<span class=\"k\">);</span>","      tt<span class=\"k\">.</span>from <span class=\"k\">=</span> from<span class=\"k\">;</span>","      result<span class=\"k\">.</span>push <span class=\"k\">(</span>tt<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> result<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Switch two states of the fsm</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  if states have transitions from or to them,</span>","<span class=\"c\">   *  the function reconfigures the transitions.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#switchStates </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} state_id1 State </span>","<span class=\"c\">   * @param {string} state_id2 State </span>","<span class=\"c\">   */</span>","  switchStates <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state_id1<span class=\"k\">,</span> state_id2<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>state_id1 <span class=\"k\">===</span> state_id2<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","   ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id1<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id2<span class=\"k\">))</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","    <span class=\"c\">// 1) get all transitions coming from arriving to state 1 and 2</span>","    <span class=\"c\">// 1.1) get all transitions</span>","    <span class=\"k\">var</span> t_to_state1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsToState <span class=\"k\">(</span>state_id1<span class=\"k\">);</span>","    <span class=\"k\">var</span> t_from_state1 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsFromState <span class=\"k\">(</span>state_id1<span class=\"k\">);</span>","    <span class=\"k\">var</span> t_to_state2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsToState <span class=\"k\">(</span>state_id2<span class=\"k\">);</span>","    <span class=\"k\">var</span> t_from_state2 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTransionsFromState <span class=\"k\">(</span>state_id2<span class=\"k\">);</span>","    ","    <span class=\"c\">// 1.2) remove doublons in case state_id1 is connected to state_id2</span>","    <span class=\"c\">//   and vise versa.</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state1<span class=\"k\">.</span>length<span class=\"k\">;)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id2<span class=\"k\">)</span> <span class=\"k\">{</span> t_to_state1<span class=\"k\">.</span>remove <span class=\"k\">(</span>t<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state1<span class=\"k\">.</span>length<span class=\"k\">;)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">===</span> state_id2<span class=\"k\">)</span> <span class=\"k\">{</span> t_from_state1<span class=\"k\">.</span>remove <span class=\"k\">(</span>t<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// 2) remove all these transitions in order to reconfigure the fsm</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeTransitionFrom <span class=\"k\">(</span>t<span class=\"k\">.</span>from<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// 3) reconfigure the fsm</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","      ","      <span class=\"k\">var</span> from <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id2<span class=\"k\">)?</span>state_id1<span class=\"k\">:</span>t<span class=\"k\">.</span>from<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>from<span class=\"k\">,</span> state_id2<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state1<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state1 <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">var</span> to <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id2<span class=\"k\">)?</span>state_id1<span class=\"k\">:</span>t<span class=\"k\">.</span>to<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>state_id2<span class=\"k\">,</span> to<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_to_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_to_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">var</span> from <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>from <span class=\"k\">===</span> state_id1<span class=\"k\">)?</span>state_id2<span class=\"k\">:</span>t<span class=\"k\">.</span>from<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>from<span class=\"k\">,</span> state_id1<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> t_from_state2<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> t <span class=\"k\">=</span> t_from_state2 <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      <span class=\"k\">var</span> to <span class=\"k\">=</span> <span class=\"k\">(</span>t<span class=\"k\">.</span>to <span class=\"k\">===</span> state_id1<span class=\"k\">)?</span>state_id2<span class=\"k\">:</span>t<span class=\"k\">.</span>to<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>addTransition <span class=\"k\">(</span>state_id1<span class=\"k\">,</span> to<span class=\"k\">,</span> t<span class=\"k\">.</span>on<span class=\"k\">,</span> t<span class=\"k\">.</span>output<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">===</span> state_id1<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> state_id2<span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">===</span> state_id2<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> state_id1<span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","<span class=\"c\">/*******************************************</span>","<span class=\"c\">            Managing Call</span>","<span class=\"c\">*******************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *   Build a event binding to an input lexem.</span>","<span class=\"c\">   *  To control the fsm and make it passes trought a transition, the</span>","<span class=\"c\">   *  programmer is able to directly fsmNotify a entry lexem to the fsm (see the</span>","<span class=\"c\">   *  general fsm documentation), or associate event source and spec to an</span>","<span class=\"c\">   *  input lexem, like event binding. &lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  This method takes as parameter a pointer on the event source and the</span>","<span class=\"c\">   *  specification of the event.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#setInput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string} on input lexem on which is associated the event</span>","<span class=\"c\">   * @param {vs.core.EventSource} src the object source of the event</span>","<span class=\"c\">   * @param {string} spec the name of the event</span>","<span class=\"c\">   */</span>","  setInput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>on<span class=\"k\">,</span> src<span class=\"k\">,</span> event_spec<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>on <span class=\"k\">||</span> <span class=\"k\">!</span>src <span class=\"k\">||</span> <span class=\"k\">!</span>event_spec<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>bind<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      src<span class=\"k\">.</span>bind <span class=\"k\">(</span>event_spec<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>addEventListener<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>nodeBind <span class=\"k\">(</span>src<span class=\"k\">,</span> event_spec<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">var</span> a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>src<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>a<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      a <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>src<span class=\"k\">]</span> <span class=\"k\">=</span> a<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    a<span class=\"k\">.</span>push <span class=\"k\">([</span>event_spec<span class=\"k\">,</span> on<span class=\"k\">,</span> src<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","","  <span class=\"c\">/**</span>","<span class=\"c\">   *   Associate an action to the generation of an output lexem.</span>","<span class=\"c\">   *  To make able the fsm to control the application, the programmer can</span>","<span class=\"c\">   *  associate an action to the generation of an ouput lexem when the fsm</span>","<span class=\"c\">   *  cross a transition.&lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  This method takes as parameter a pointer on an action object and a</span>","<span class=\"c\">   *  optional user data.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#setOutput </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {string}output output lexem on which is associated the action</span>","<span class=\"c\">   * @param {function|string} action the function's name a function of the</span>","<span class=\"c\">   *        fsm owner</span>","<span class=\"c\">   */</span>","  setOutput <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>output<span class=\"k\">,</span> action<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>output <span class=\"k\">||</span> <span class=\"k\">!</span>action<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">]</span> <span class=\"k\">=</span> action<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","<span class=\"c\">/*******************************************</span>","<span class=\"c\">          Event managing methodes</span>","<span class=\"c\">*******************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Activate the FSM which start by the initial state.</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  Return false if no initial state is specified.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#activate </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @return {boolean} is activated</span>","<span class=\"c\">   */</span>","  activate <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state<span class=\"k\">])</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>goTo <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_initial_state<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Private method use by the fsm to cross a transition.</span>","<span class=\"c\">   *  @note for the moment only one ouput lexem can be generation when</span>","<span class=\"c\">   *  crossing a transition</span>","<span class=\"c\">   *  @private</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#goTo </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} id_sate the id of target state.</span>","<span class=\"c\">   * @param {String} output</span>","<span class=\"c\">   * @param {Object} event the event</span>","<span class=\"c\">   * @return {Boolean} is the transition was reached</span>","<span class=\"c\">   */</span>","  goTo <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state_id<span class=\"k\">,</span> output<span class=\"k\">,</span> event<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"c\">// manage output</span>","    <span class=\"c\">// TODO WARNING</span>","    <span class=\"k\">var</span> state <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id<span class=\"k\">))</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"c\">// hide old states view</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      state <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">];</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">///</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_current_state <span class=\"k\">=</span> state_id<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>output <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">])</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> clb <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>clb <span class=\"k\">instanceof</span> Function<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        clb<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>owner<span class=\"k\">,</span> event<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>clb<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>owner <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_output_action <span class=\"k\">[</span>output<span class=\"k\">]]</span> <span class=\"k\">(</span>event<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Clear the fsm.</span>","<span class=\"c\">   *  All state, event and binding are deleted</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#clear</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  clear <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_input<span class=\"k\">);</span>","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_output<span class=\"k\">);</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_input <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_list_output <span class=\"k\">=</span> <span class=\"k\">new</span> Array <span class=\"k\">();</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","    ","    <span class=\"c\">// remove input event bindings</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>key<span class=\"k\">];</span>","      ","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> src <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">2</span><span class=\"k\">];</span>","        <span class=\"k\">var</span> event_spec <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>bind<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          src<span class=\"k\">.</span>unbind <span class=\"k\">(</span>event_spec<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">)</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>src<span class=\"k\">.</span>addEventListener<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>nodeUnbind <span class=\"k\">(</span>src<span class=\"k\">,</span> event_spec<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_current_state <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  @private</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#notify </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {Object} event the event</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  notify <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>event<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> a <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_inputs <span class=\"k\">[</span>event<span class=\"k\">.</span>src<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>a<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> spec <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">],</span> on <span class=\"k\">=</span> a <span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>event<span class=\"k\">.</span>type <span class=\"k\">!==</span> spec<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>fsmNotify <span class=\"k\">(</span>on<span class=\"k\">,</span> event<span class=\"k\">.</span>data<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  @public</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Fsm#fsmNotify </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} on input</span>","<span class=\"c\">   * @return {Object} data associate to the event </span>","<span class=\"c\">   */</span>","  fsmNotify <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>on<span class=\"k\">,</span> data<span class=\"k\">,</span> instant<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">])</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> transition <span class=\"k\">=</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_list_of_state <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_current_state<span class=\"k\">].</span>transitionEvents <span class=\"k\">[</span>on<span class=\"k\">];</span>","      ","    <span class=\"k\">if</span> <span class=\"k\">(!</span>transition<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>goTo <span class=\"k\">(</span>transition<span class=\"k\">.</span>to<span class=\"k\">,</span> transition<span class=\"k\">.</span>output<span class=\"k\">,</span> <span class=\"k\">{</span>on<span class=\"k\">:</span> on<span class=\"k\">,</span> data<span class=\"k\">:</span> data<span class=\"k\">}</span><span class=\"k\">,</span> instant<span class=\"k\">);</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Fsm<span class=\"k\">,</span> EventSource<span class=\"k\">);</span>","","<span class=\"c\">/*****************************************************************</span>","<span class=\"c\"> *     Properties declaration</span>","<span class=\"c\"> ****************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>Fsm<span class=\"k\">,</span> <span class=\"s\">\"initialState\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *   Define the initiale state</span>","<span class=\"c\">   *   Generate a exception if the state was not already defined</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *   @name vs.core.Fsm#initialState </span>","<span class=\"c\">   *   @param {string} state_id the state</span>","<span class=\"c\">   */</span>","  set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>state_id<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>state_id<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","      <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>existState <span class=\"k\">(</span>state_id<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"c\">// set initial state and go to it   </span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state <span class=\"k\">=</span> state_id<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   */</span>","  get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_initial_state<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/**</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","core<span class=\"k\">.</span>Fsm <span class=\"k\">=</span> Fsm<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"k\">function</span> DataFlow <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">=</span> <span class=\"k\">[];</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_edges <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","DataFlow<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  propagate_values <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>id<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> ids <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_edges <span class=\"k\">[</span>id<span class=\"k\">],</span> k<span class=\"k\">,</span> j<span class=\"k\">,</span> obj<span class=\"k\">,</span> prop_in<span class=\"k\">,</span> prop_out<span class=\"k\">,</span>","      obj_next<span class=\"k\">,</span> connector<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>ids<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    obj <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span>id<span class=\"k\">];</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>k <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> k <span class=\"k\">&lt;</span> ids<span class=\"k\">.</span>length<span class=\"k\">;</span> k<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      obj_next <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span>ids <span class=\"k\">[</span>k<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">]];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj_next<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      connector <span class=\"k\">=</span> ids <span class=\"k\">[</span>k<span class=\"k\">][</span><span class=\"s\">2</span><span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>connector<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"c\">// properties value propagation</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> connector<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++)</span>","        <span class=\"k\">{</span>","          prop_in <span class=\"k\">=</span> connector <span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">0</span><span class=\"k\">];</span>","          prop_out <span class=\"k\">=</span> connector <span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">1</span><span class=\"k\">];</span>","          ","          <span class=\"k\">var</span> desc_in <span class=\"k\">=</span> obj<span class=\"k\">.</span>getPropertyDescriptor <span class=\"k\">(</span>prop_in<span class=\"k\">);</span>","          <span class=\"k\">var</span> desc_out <span class=\"k\">=</span> obj_next<span class=\"k\">.</span>getPropertyDescriptor <span class=\"k\">(</span>prop_out<span class=\"k\">);</span>","","          <span class=\"k\">if</span> <span class=\"k\">(!</span>desc_in <span class=\"k\">||</span> <span class=\"k\">!</span>desc_in<span class=\"k\">.</span>get<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            prop_in <span class=\"k\">=</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> util<span class=\"k\">.</span>underscore <span class=\"k\">(</span>prop_in<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>prop_in<span class=\"k\">))</span>","            <span class=\"k\">{</span>","              <span class=\"k\">continue</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>desc_out <span class=\"k\">||</span> <span class=\"k\">!</span>desc_out<span class=\"k\">.</span>set<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            prop_out <span class=\"k\">=</span> <span class=\"s\">'_'</span> <span class=\"k\">+</span> util<span class=\"k\">.</span>underscore <span class=\"k\">(</span>prop_out<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>obj_next<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">(</span>prop_out<span class=\"k\">))</span>","            <span class=\"k\">{</span>","              <span class=\"k\">continue</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","","          obj_next <span class=\"k\">[</span>prop_out<span class=\"k\">]</span> <span class=\"k\">=</span> obj <span class=\"k\">[</span>prop_in<span class=\"k\">];</span>","        <span class=\"k\">}</span>","        ","        obj_next<span class=\"k\">.</span>__should__call__has__changed__ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  propagate <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>_id<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    ","    <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> obj<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>_id<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"c\">// find the first node corresponding to the id</span>","      <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">!==</span> _id<span class=\"k\">)</span>","      <span class=\"k\">{</span> i<span class=\"k\">++;</span> <span class=\"k\">}</span>","    ","      <span class=\"c\">// the node wad found. First data propagation</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>propagate_values <span class=\"k\">(</span>_id<span class=\"k\">);</span>","        i<span class=\"k\">++;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// continue the propagation</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      obj <span class=\"k\">=</span> VSObject<span class=\"k\">.</span>_obs <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">[</span>i<span class=\"k\">]];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>__should__call__has__changed__ <span class=\"k\">&amp;&amp;</span> obj<span class=\"k\">.</span>propertiesDidChange<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        obj<span class=\"k\">.</span>propertiesDidChange <span class=\"k\">();</span>","        obj<span class=\"k\">.</span>__should__call__has__changed__ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>propagate_values <span class=\"k\">(</span>obj<span class=\"k\">.</span>id<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>is_propagating <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  build <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_ref_node <span class=\"k\">||</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> temp <span class=\"k\">=</span> <span class=\"k\">[],</span> i<span class=\"k\">,</span> ref<span class=\"k\">,</span> edges<span class=\"k\">,</span> edges_temp<span class=\"k\">,</span> edge<span class=\"k\">,</span> edge_temp<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_node<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      ref <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_node <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">])</span>","      <span class=\"k\">{</span>","<span class=\"c\">//        console.warn ('_df_build, this._node_link [ref] null');</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      temp<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_node <span class=\"k\">=</span> temp<span class=\"k\">;</span>","    ","    temp <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>ref <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">])</span>","      <span class=\"k\">{</span>","<span class=\"c\">//        console.warn ('_df_build, this._node_link [ref] null');</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","  ","      edges <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges <span class=\"k\">[</span>ref<span class=\"k\">];</span>","      edges_temp <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> edges<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","      <span class=\"k\">{</span>","        edge <span class=\"k\">=</span> edges <span class=\"k\">[</span>i<span class=\"k\">];</span>","        edge_temp <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">];</span>","        ","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>edge <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]])</span>","        <span class=\"k\">{</span>","<span class=\"c\">//          console.warn ('_df_build, this._node_link [edge [0]] null');</span>","          <span class=\"k\">continue</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        edge_temp <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>edge <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]];</span>","        edge_temp <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">=</span> edge <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","        edge_temp <span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">=</span> edge <span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">].</span>slice <span class=\"k\">();</span>","        ","        edges_temp<span class=\"k\">.</span>push <span class=\"k\">(</span>edge_temp<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      ","      temp <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">]]</span> <span class=\"k\">=</span> edges_temp<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>dataflow_edges <span class=\"k\">=</span> temp<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  register_ref_node <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_ref_node <span class=\"k\">=</span> data<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  register_ref_edges <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_ref_edges <span class=\"k\">=</span> data<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  pausePropagation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">++;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  restartPropagation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>__shouldnt_propagate__ <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> _df_node_to_def <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_node_register <span class=\"k\">(</span>df_id<span class=\"k\">,</span> ref<span class=\"k\">,</span> id<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df_id <span class=\"k\">||</span> <span class=\"k\">!</span>ref <span class=\"k\">||</span> <span class=\"k\">!</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>df_id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>_node_link <span class=\"k\">[</span>ref<span class=\"k\">]</span> <span class=\"k\">=</span> id<span class=\"k\">;</span>","  _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> df<span class=\"k\">;</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_node_register <span class=\"k\">=</span> _df_node_register<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_create <span class=\"k\">(</span>id<span class=\"k\">,</span> ref<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> df <span class=\"k\">=</span> <span class=\"k\">new</span> DataFlow <span class=\"k\">();</span>","  ","  df<span class=\"k\">.</span>ref <span class=\"k\">=</span> ref<span class=\"k\">;</span>","  _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">]</span> <span class=\"k\">=</span> df<span class=\"k\">;</span>","  ","  <span class=\"k\">return</span> df<span class=\"k\">;</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_create <span class=\"k\">=</span> _df_create<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_register_ref_node <span class=\"k\">(</span>id<span class=\"k\">,</span> data<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>id <span class=\"k\">||</span> <span class=\"k\">!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>register_ref_node <span class=\"k\">(</span>data<span class=\"k\">);</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_register_ref_node <span class=\"k\">=</span> _df_register_ref_node<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_register_ref_edges <span class=\"k\">(</span>id<span class=\"k\">,</span> data<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>id <span class=\"k\">||</span> <span class=\"k\">!</span>data<span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>register_ref_edges <span class=\"k\">(</span>data<span class=\"k\">);</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_register_ref_edges <span class=\"k\">=</span> _df_register_ref_edges<span class=\"k\">;</span>","","<span class=\"k\">function</span> _df_build <span class=\"k\">(</span>id<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>id<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> df <span class=\"k\">=</span> _df_node_to_def <span class=\"k\">[</span>id<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>df<span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"k\">return</span><span class=\"k\">;</span><span class=\"k\">}</span>","  ","  df<span class=\"k\">.</span>build <span class=\"k\">();</span>","<span class=\"k\">}</span>","window<span class=\"k\">.</span>_df_build <span class=\"k\">=</span> _df_build<span class=\"k\">;</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","core<span class=\"k\">.</span>DataFlow <span class=\"k\">=</span> DataFlow<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","","<span class=\"c\">// function Scheduler ()</span>","<span class=\"c\">// {</span>","<span class=\"c\">//   this.parent = core.EventSource;</span>","<span class=\"c\">//   this.parent (createId ());</span>","<span class=\"c\">//   this.constructor = vs.core.Scheduler;</span>","<span class=\"c\">// };</span>","<span class=\"c\">// </span>","<span class=\"c\">// Scheduler.prototype = {</span>","<span class=\"c\">// </span>","<span class=\"c\">// };</span>","<span class=\"c\">//util.extendClass (Scheduler, EventSource);</span>","<span class=\"c\">// </span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.Task class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Delegates:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidStop : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidPause : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidEnd : function (vs.core.Task)</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Task .</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Task</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> Task <span class=\"k\">(</span>conf<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>conf<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Task<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The task is started</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @name vs.core.Task.STARTED</span>","<span class=\"c\"> */</span>","Task<span class=\"k\">.</span>STARTED <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The task is stopped</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @name vs.core.Task.STOPPED</span>","<span class=\"c\"> */</span>","Task<span class=\"k\">.</span>STOPPED <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The task is paused</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> * @name vs.core.Task.PAUSED</span>","<span class=\"c\"> */</span>","Task<span class=\"k\">.</span>PAUSED <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","Task<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   * TaskDelegate.</span>","<span class=\"c\">   * Methods are called when state changes (stop | pause)</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  &lt;p&gt;</span>","<span class=\"c\">   *  @example</span>","<span class=\"c\">   *  var delegate = {};</span>","<span class=\"c\">   *  delegate.taskDidEnd = function () { ... }</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *  // Declare a PAR task including a SEC Task</span>","<span class=\"c\">   *  var task = new Task (...)</span>","<span class=\"c\">   *  task.delegate = delegate;</span>","<span class=\"c\">   *  task.start ();</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#delegate</span>","<span class=\"c\">   *</span>","<span class=\"c\">   *\t@property</span>","<span class=\"c\">   */</span>","  delegate <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  States</span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">   */</span>","  _state <span class=\"k\">:</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">,</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#start</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>param<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the TaskDelegate.taskDidStop</span>","<span class=\"c\">   *  if it declared.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#stop</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls the TaskDelegate.taskDidPause</span>","<span class=\"c\">   *  if it declared.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#pause</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Task<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>Task<span class=\"k\">,</span> <span class=\"s\">\"state\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   *  Return the task State. &lt;br /&gt;</span>","<span class=\"c\">   *  Possible values: {@link vs.core.Task.STARTED},</span>","<span class=\"c\">   *  {@link vs.core.Task.STOPPED},</span>","<span class=\"c\">   *  {@link vs.core.Task.PAUSED}</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task#state</span>","<span class=\"c\">   *  @type {number}</span>","<span class=\"c\">   */</span> ","  get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_state<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.Task_PAR class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Implements {@link vs.core.Task}.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  The Task_PAR class provides a parallel group of tasks.&lt;br /&gt;</span>","<span class=\"c\"> *  Task_PAR is a vs.core.Task that starts all its tasks when it is started itself.</span>","<span class=\"c\"> *  &lt;br /&gt;</span>","<span class=\"c\"> *  The Task_SEQ ended when longest lasting task has ended.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> * The delegate has to implement:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidStop : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidPause : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidEnd : function (vs.core.Task)</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Methods borrowed from class {@link vs.core.Task}:&lt;br /&gt;</span>","<span class=\"c\"> *  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{@link vs.core.Task#pause}, {@link vs.core.Task#start},</span>","<span class=\"c\"> *  {@link vs.core.Task#stop}</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  // Declare two tasks (animations)</span>","<span class=\"c\"> *  var rotate = new vs.fx.RotateXYZAnimation (30, 50, 100);</span>","<span class=\"c\"> *  rotate.durations = '3s';</span>","<span class=\"c\"> *  var scale = new vs.fx.ScaleAnimation (2,0.5);</span>","<span class=\"c\"> *  scale.durations = '2s';</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare the Task_PAR</span>","<span class=\"c\"> *  var par = Task_PAR ([rotate, comp1], [scale, comp2]);</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Start the task =&gt; start animations</span>","<span class=\"c\"> *  par.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare a PAR task including a SEC Task</span>","<span class=\"c\"> *  var seq = new Task_SEQ </span>","<span class=\"c\"> *    ([scale, comp0], new Task_PAR ([rotate, comp1], [rotate, comp2]));</span>","<span class=\"c\"> *  seq.delegate = this;</span>","<span class=\"c\"> *  seq.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @borrows vs.core.Task#start as Task_PAR#start</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Task.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Task_PAR</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param list List of task to start parallel with an optional</span>","<span class=\"c\"> *  parameter</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> Task_PAR <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">();</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Task_PAR<span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>setTasks <span class=\"k\">(</span>arguments<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Task_PAR<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _tasksAndParams <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * taks ended</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _tasksWillEnded <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set tasks.</span>","<span class=\"c\">   *  The task has to be stopped</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task_PAR#setTasks</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param list List of task to start parallel with an optional</span>","<span class=\"c\">   *  parameter</span>","<span class=\"c\">   */</span>","  setTasks <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">!==</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> i<span class=\"k\">,</span> taskAndparam<span class=\"k\">,</span> task<span class=\"k\">,</span> param<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> task <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  ","      <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>taskAndparam<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","          param <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        task <span class=\"k\">=</span> taskAndparam<span class=\"k\">;</span>","        param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Undefined task'</span><span class=\"k\">);</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">.</span>start <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>stop <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>pause<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Invalid task: '</span> <span class=\"k\">+</span> task<span class=\"k\">.</span>toString <span class=\"k\">());</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>push <span class=\"k\">([</span>task<span class=\"k\">,</span> param<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task_PAR#start</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>param<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam<span class=\"k\">,</span> i<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>delegate <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>start <span class=\"k\">((</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])?</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]:</span>param<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the taskDidStop if it exits.</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam<span class=\"k\">,</span> i<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>stop <span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls the taskDidPause if it exits.</span>","<span class=\"c\">   *  @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam<span class=\"k\">,</span> i<span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>pause <span class=\"k\">();</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">               delegate methodes   </span>","<span class=\"c\">********************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidStop <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidPause <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidEnd <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">--;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_tasksWillEnded <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Task_PAR<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The Task_SEQ class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Implements {@link vs.core.Task}.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  The Task_SEQ class provides a sequential group of tasks.&lt;br /&gt;</span>","<span class=\"c\"> *  Task_SEQ is a vs.core.Task that runs its tasks in sequence, i.e., it starts</span>","<span class=\"c\"> *  one task after another has ended. &lt;br /&gt;</span>","<span class=\"c\"> *  The tasks are started in the order they are defined within the constructor.</span>","<span class=\"c\"> *  &lt;br /&gt;</span>","<span class=\"c\"> *  The Task_SEQ finishes when its last tasks has ended.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * The delegate has to implement:</span>","<span class=\"c\"> *  &lt;ul&gt;</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidStop : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidPause : function (vs.core.Task)</span>","<span class=\"c\"> *    &lt;li/&gt;taskDidEnd : function (vs.core.Task)</span>","<span class=\"c\"> *  &lt;/ul&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Methods borrowed from class {@link vs.core.Task}:&lt;br /&gt;</span>","<span class=\"c\"> *  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{@link vs.core.Task#pause}, {@link vs.core.Task#start},</span>","<span class=\"c\"> *  {@link vs.core.Task#stop}</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *  // Declare two tasks (animations)</span>","<span class=\"c\"> *  var rotate = new vs.fx.RotateXYZAnimation (30, 50, 100);</span>","<span class=\"c\"> *  rotate.durations = '3s';</span>","<span class=\"c\"> *  var scale = new vs.fx.ScaleAnimation (2,0.5);</span>","<span class=\"c\"> *  scale.durations = '2s';</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare the Task_SEQ</span>","<span class=\"c\"> *  var seq = Task_SEQ ([rotate, comp1], [scale, comp2]);</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Start the task =&gt; start animations sequentially</span>","<span class=\"c\"> *  seq.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  // Declare a PAR task including a SEC Task</span>","<span class=\"c\"> *  var seq = new Task_SEQ </span>","<span class=\"c\"> *    ([scale, comp0], new Task_PAR ([rotate, comp1], [rotate, comp2]));</span>","<span class=\"c\"> *  seq.delegate = this;</span>","<span class=\"c\"> *  seq.start ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.Task_SEQ.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Task_SEQ</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param list List of task to start sequentially with an optional </span>","<span class=\"c\"> *  parameter</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> Task_SEQ <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">();</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> Task_SEQ<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">this</span><span class=\"k\">.</span>setTasks <span class=\"k\">(</span>arguments<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","Task_SEQ<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _tasksAndParams <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _nextTaskToStart <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _startParam <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","    ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set tasks.</span>","<span class=\"c\">   *  The task has to be stopped</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Task_SEQ#setTasks</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param list List of task to start parallel with an optional</span>","<span class=\"c\">   *  parameter</span>","<span class=\"c\">   */</span>","  setTasks <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tasksAndParams<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">!==</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> i<span class=\"k\">,</span> taskAndparam<span class=\"k\">,</span> task<span class=\"k\">,</span> param<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      taskAndparam <span class=\"k\">=</span> tasksAndParams <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> task <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  ","      <span class=\"k\">if</span> <span class=\"k\">(</span>util<span class=\"k\">.</span>isArray <span class=\"k\">(</span>taskAndparam<span class=\"k\">))</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>taskAndparam<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          task <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","          param <span class=\"k\">=</span> taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        task <span class=\"k\">=</span> taskAndparam<span class=\"k\">;</span>","        param <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Undefined task'</span><span class=\"k\">);</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(!</span>task<span class=\"k\">.</span>start <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>stop <span class=\"k\">||</span> <span class=\"k\">!</span>task<span class=\"k\">.</span>pause<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>warn <span class=\"k\">(</span><span class=\"s\">'Invalid task: '</span> <span class=\"k\">+</span> task<span class=\"k\">.</span>toString <span class=\"k\">());</span>","        <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>push <span class=\"k\">([</span>task<span class=\"k\">,</span> param<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>param<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_startParam <span class=\"k\">=</span> param<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart<span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart<span class=\"k\">++;</span>","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>delegate <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>start <span class=\"k\">((</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])?</span>taskAndparam <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]:</span>param<span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the taskDidStop if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>stop <span class=\"k\">();</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls</span>","<span class=\"c\">   *  the TaskDelegate.taskDidPause if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","  ","    <span class=\"k\">var</span> taskAndparam <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams <span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>taskAndparam<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    taskAndparam <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>pause <span class=\"k\">();</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">               delegate methodes   </span>","<span class=\"c\">********************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidStop <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidPause <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  taskDidEnd <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>task<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_tasksAndParams<span class=\"k\">.</span>length<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"c\">// start the next task</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>start <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_startParam<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_nextTaskToStart <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>Task_SEQ<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The vs.core.TaskWait class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @extends vs.core.Object</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  Implements {@link vs.core.Task}.</span>","<span class=\"c\"> *  &lt;p&gt;</span>","<span class=\"c\"> *  The vs.core.TaskWait class provides ...</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new vs.core.TaskWait.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.TaskWait</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param time The time to wait, using millisecond </span>","<span class=\"c\"> *  parameter</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> TaskWait <span class=\"k\">(</span>time<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">();</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> TaskWait<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>time <span class=\"k\">=</span> time<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","TaskWait<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">  */</span>","  _time <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","  _left_time <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">   */</span>","  _timer <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *\t@private</span>","<span class=\"c\">   */</span>","  _start_time <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","    ","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  </span>","<span class=\"c\">********************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Starts the task</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {any} param any parameter (scalar, Array, Object)</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  start<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span> time <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_time<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span>","    <span class=\"k\">{</span> time <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_left_time<span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">else</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">=</span> time<span class=\"k\">;</span> <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STARTED<span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_start_time <span class=\"k\">=</span> <span class=\"k\">new</span> Date <span class=\"k\">().</span>getTime <span class=\"k\">();</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_timer <span class=\"k\">=</span> setTimeout <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> ","    <span class=\"k\">{</span> ","      self<span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>self<span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> self<span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd<span class=\"k\">)</span>","      <span class=\"k\">{</span> self<span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidEnd <span class=\"k\">(</span>self<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> time<span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Stops the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is stopped, it calls the taskDidStop if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  stop<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>STOPPED<span class=\"k\">;</span>","    ","    clearTimeout <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_timer<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_timer <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_time<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidStop <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Pause the task.&lt;br /&gt;</span>","<span class=\"c\">   *  When the task is paused, it calls</span>","<span class=\"c\">   *  the TaskDelegate.taskDidPause if it exits.</span>","<span class=\"c\">   * @ignore</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  pause<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">===</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_state <span class=\"k\">=</span> Task<span class=\"k\">.</span>PAUSED<span class=\"k\">;</span>","  ","    <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">=</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_left_time <span class=\"k\">-</span> <span class=\"k\">new</span> Date <span class=\"k\">().</span>getTime <span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>_start_time<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>delegate <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>delegate<span class=\"k\">.</span>taskDidPause <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span> <span class=\"k\">}</span>","","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>TaskWait<span class=\"k\">,</span> core<span class=\"k\">.</span>Object<span class=\"k\">);</span>","","util<span class=\"k\">.</span>defineClassProperty <span class=\"k\">(</span>TaskWait<span class=\"k\">,</span> <span class=\"s\">\"state\"</span><span class=\"k\">,</span> <span class=\"k\">{</span>","","  <span class=\"c\">/** </span>","<span class=\"c\">   * Set the task time, using millisecond. &lt;br /&gt;</span>","<span class=\"c\">   * @name vs.core.TaskWait#time</span>","<span class=\"c\">   * @type {number}</span>","<span class=\"c\">   */</span> ","  set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isNumber <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_time <span class=\"k\">=</span> v<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","util<span class=\"k\">.</span>extend <span class=\"k\">(</span>core<span class=\"k\">,</span> <span class=\"k\">{</span>","  Task<span class=\"k\">:</span>        Task<span class=\"k\">,</span>","  Task_PAR<span class=\"k\">:</span>    Task_PAR<span class=\"k\">,</span>","  Task_SEQ<span class=\"k\">:</span>    Task_SEQ<span class=\"k\">,</span>","  TaskWait<span class=\"k\">:</span>    TaskWait","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/*</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * This represents the mobile device, and provides properties for inspecting</span>","<span class=\"c\"> * the model, version, UUID of the</span>","<span class=\"c\"> * phone, etc.</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>"," ","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  An vs.core.DeviceConfiguration object, ...</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @name vs.core.DeviceConfiguration</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> DeviceConfiguration <span class=\"k\">()</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>orientation <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>deviceId <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>targets <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_UNKNOWN<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_UNKNOWN<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_UNKNOWN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_WINDOWS </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_WINDOWS <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_MACOS </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_MACOS <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_LINUX </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_LINUX <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_IOS </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_IOS <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_WP7 </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_WP7 <span class=\"k\">=</span> <span class=\"s\">6</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_BLACK_BERRY </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_BLACK_BERRY <span class=\"k\">=</span> <span class=\"s\">7</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_SYMBIAN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_SYMBIAN <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_ANDROID </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_ANDROID <span class=\"k\">=</span> <span class=\"s\">9</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.OS_MEEGO </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>OS_MEEGO <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","","","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_UNKNOWN </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_UNKNOWN <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_QVGA </span>","<span class=\"c\"> * QVGA (320&#195;&#151;240) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_QVGA <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_WQVGA </span>","<span class=\"c\"> * QVGA (400&#195;&#151;240) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_WQVGA <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_HVGA </span>","<span class=\"c\"> * HVGA (480&#195;&#151;320) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_HVGA <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_VGA </span>","<span class=\"c\"> * VGA (640&#195;&#151;480) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_VGA <span class=\"k\">=</span> <span class=\"s\">5</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_WVGA </span>","<span class=\"c\"> * WVGA (800&#195;&#151;480) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_WVGA <span class=\"k\">=</span> <span class=\"s\">6</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_FWVGA </span>","<span class=\"c\"> * FWVGA (854&#195;&#151;480) </span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_FWVGA <span class=\"k\">=</span> <span class=\"s\">7</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_SVGA </span>","<span class=\"c\"> * SVGA (800&#195;&#151;600)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_SVGA <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_XGA </span>","<span class=\"c\"> * XGA (1024&#195;&#151;768)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_XGA <span class=\"k\">=</span> <span class=\"s\">9</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_N_HD </span>","<span class=\"c\"> * nHD (640&#195;&#151;360)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_N_HD <span class=\"k\">=</span> <span class=\"s\">10</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_Q_HD </span>","<span class=\"c\"> * qHD (960&#195;&#151;540)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_Q_HD <span class=\"k\">=</span> <span class=\"s\">11</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name vs.core.DeviceConfiguration.SR_WXGA </span>","<span class=\"c\"> * WXGA (1280&#195;&#151;720/768/800)</span>","<span class=\"c\"> * @const</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>SR_WXGA <span class=\"k\">=</span> <span class=\"s\">12</span><span class=\"k\">;</span>","","","DeviceConfiguration<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Returns the current GUI orientation.</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   * Be careful this API does not return the device orientation, which can be</span>","<span class=\"c\">   * deferent from the GUI orientation.</span>","<span class=\"c\">   * &lt;p/&gt;</span>","<span class=\"c\">   * Use the orientation module to have access to the device orientation.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DeviceConfiguration#getOrientation </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * </span>","<span class=\"c\">   * @return {integer} returns a integer include in [-90, 0, 90, 180];</span>","<span class=\"c\">   * @public</span>","<span class=\"c\">   */</span>","  getOrientation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>orientation<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  setDeviceId <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>did<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>did<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span> ","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>deviceId <span class=\"k\">=</span> did<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"wp7\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_WP7<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_WVGA<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">10</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"iphone\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_IOS<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_HVGA<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"ipad\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_IOS<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_XGA<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">/</span><span class=\"s\">3</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"nokia_s3\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_SYMBIAN<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>SR_N_HD<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">/</span><span class=\"s\">3</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"android\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_ANDROID<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"_3_2\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"_16_10\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">10</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"_16_9\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">9</span><span class=\"k\">;</span> <span class=\"k\">}</span>","","      <span class=\"k\">var</span> width <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>width<span class=\"k\">;</span>","      <span class=\"k\">var</span> height <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>height<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">&gt;</span> height<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        width <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>height<span class=\"k\">;</span>","        height <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>width<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span>","        DeviceConfiguration<span class=\"k\">.</span>_getScreenResolutionCode <span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">\"blackberry\"</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>os <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">.</span>OS_BLACK_BERRY<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"_4_3\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">4</span><span class=\"k\">/</span><span class=\"s\">3</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"_3_2\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">3</span><span class=\"k\">/</span><span class=\"s\">2</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>did<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"_16_10\"</span><span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">this</span><span class=\"k\">.</span>screenRatio <span class=\"k\">=</span> <span class=\"s\">16</span><span class=\"k\">/</span><span class=\"s\">10</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">var</span> width <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>width<span class=\"k\">;</span>","      <span class=\"k\">var</span> height <span class=\"k\">=</span> window<span class=\"k\">.</span>screen<span class=\"k\">.</span>height<span class=\"k\">;</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>screenResolution <span class=\"k\">=</span>","        DeviceConfiguration<span class=\"k\">.</span>_getScreenResolutionCode <span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Set the GUI orientation</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.ui.Application#setOrientation </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @param {number} orientation number include in {0, 180, -90, 90}</span>","<span class=\"c\">   */</span>","  setOrientation <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>orientation<span class=\"k\">,</span> force<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> pid<span class=\"k\">,</span> device<span class=\"k\">,</span> i<span class=\"k\">,</span> len<span class=\"k\">,</span> id<span class=\"k\">,</span> comp<span class=\"k\">,</span> ","      width <span class=\"k\">=</span> window<span class=\"k\">.</span>innerWidth<span class=\"k\">,</span> height <span class=\"k\">=</span> window<span class=\"k\">.</span>innerHeight<span class=\"k\">,</span> t<span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>orientation <span class=\"k\">===</span> orientation<span class=\"k\">)</span>","    <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">&gt;</span> height<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      t <span class=\"k\">=</span> height<span class=\"k\">;</span>","      height <span class=\"k\">=</span> width<span class=\"k\">;</span>","      width <span class=\"k\">=</span> t<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  ","    <span class=\"k\">for</span> <span class=\"k\">(</span>id <span class=\"k\">in</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      comp <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs <span class=\"k\">[</span>id<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>comp<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">if</span> <span class=\"k\">(</span>comp<span class=\"k\">.</span>_orientationWillChange<span class=\"k\">)</span>","      <span class=\"k\">{</span> comp<span class=\"k\">.</span>_orientationWillChange <span class=\"k\">(</span>orientation<span class=\"k\">);</span> <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>comp<span class=\"k\">.</span>orientationWillChange<span class=\"k\">)</span>","      <span class=\"k\">{</span> comp<span class=\"k\">.</span>orientationWillChange <span class=\"k\">(</span>orientation<span class=\"k\">);</span> <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">for</span> <span class=\"k\">(</span>pid <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>targets<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      device <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>targets <span class=\"k\">[</span>pid<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>device<span class=\"k\">.</span>device <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>deviceId<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          ","      <span class=\"c\">// verify orientation matching with target id</span>","      <span class=\"k\">if</span> <span class=\"k\">(((</span>orientation <span class=\"k\">!==</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> orientation <span class=\"k\">!==</span> <span class=\"s\">180</span><span class=\"k\">)</span> <span class=\"k\">||</span> ","            pid<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'_p'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","          <span class=\"k\">((</span>orientation <span class=\"k\">!==</span> <span class=\"s\">90</span> <span class=\"k\">&amp;&amp;</span> orientation <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">90</span><span class=\"k\">)</span> <span class=\"k\">||</span> ","            pid<span class=\"k\">.</span>indexOf <span class=\"k\">(</span><span class=\"s\">'_l'</span><span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">))</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","  ","      <span class=\"k\">this</span><span class=\"k\">.</span>setActiveStyleSheet <span class=\"k\">(</span>pid<span class=\"k\">);</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>orientation <span class=\"k\">=</span> orientation<span class=\"k\">;</span>","      ","      <span class=\"c\">/**</span>","<span class=\"c\">       * @private</span>","<span class=\"c\">       */</span>","      <span class=\"k\">var</span> orientationDidChangeFct <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> id<span class=\"k\">,</span> comp<span class=\"k\">;</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span>id <span class=\"k\">in</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs<span class=\"k\">)</span>","        <span class=\"k\">{</span>","          comp <span class=\"k\">=</span> core<span class=\"k\">.</span>Object<span class=\"k\">.</span>_obs <span class=\"k\">[</span>id<span class=\"k\">];</span>","          <span class=\"k\">if</span> <span class=\"k\">(!</span>comp <span class=\"k\">||</span> <span class=\"k\">!</span>comp<span class=\"k\">.</span>orientationDidChange<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","          ","          comp<span class=\"k\">.</span>orientationDidChange <span class=\"k\">(</span>orientation<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>force<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        setTimeout <span class=\"k\">(</span>orientationDidChangeFct<span class=\"k\">,</span> <span class=\"s\">100</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">else</span>","      <span class=\"k\">{</span>","        orientationDidChangeFct<span class=\"k\">.</span>call <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      ","      <span class=\"k\">return</span> pid<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  setActiveStyleSheet <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>pid<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    util<span class=\"k\">.</span>setActiveStyleSheet <span class=\"k\">(</span>pid<span class=\"k\">);</span>","    window<span class=\"k\">.</span>_current_platform_id <span class=\"k\">=</span> pid<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  registerTargetId <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>tid<span class=\"k\">,</span> conf<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>targets <span class=\"k\">[</span>tid<span class=\"k\">]</span> <span class=\"k\">=</span> conf<span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * private</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>_getScreenResolutionCode <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>width<span class=\"k\">,</span> height<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">240</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">320</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_QVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">240</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">400</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WQVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">320</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">480</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_HVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">480</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">640</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_VGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">480</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">800</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">320</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">854</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WFVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">600</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">800</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_SVGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">768</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">1024</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_XGA<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">360</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">640</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_N_HD<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">540</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">960</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_Q_HD<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>width <span class=\"k\">===</span> <span class=\"s\">800</span> <span class=\"k\">&amp;&amp;</span> height <span class=\"k\">===</span> <span class=\"s\">1280</span><span class=\"k\">)</span> <span class=\"k\">return</span> DeviceConfiguration<span class=\"k\">.</span>SR_WXGA<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * private</span>","<span class=\"c\"> */</span>","DeviceConfiguration<span class=\"k\">.</span>_estimateScreenSize <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>metric<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">var</span> w <span class=\"k\">=</span> metric<span class=\"k\">.</span>width <span class=\"k\">/</span> metric<span class=\"k\">.</span>xdpi<span class=\"k\">;</span>","  <span class=\"k\">var</span> h <span class=\"k\">=</span> metric<span class=\"k\">.</span>height <span class=\"k\">/</span> metric<span class=\"k\">.</span>ydpi<span class=\"k\">;</span>","  <span class=\"k\">var</span> size <span class=\"k\">=</span> Math<span class=\"k\">.</span>sqrt <span class=\"k\">(</span>w<span class=\"k\">*</span>w <span class=\"k\">+</span> h<span class=\"k\">*</span>h<span class=\"k\">);</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>size <span class=\"k\">&lt;</span> <span class=\"s\">5</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">3</span><span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>size <span class=\"k\">&lt;</span> <span class=\"s\">8</span><span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">7</span><span class=\"k\">;</span>","  <span class=\"k\">else</span> <span class=\"k\">return</span> <span class=\"s\">10</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> window<span class=\"k\">.</span>deviceConfiguration <span class=\"k\">==</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span>","<span class=\"k\">{</span>","  window<span class=\"k\">.</span>deviceConfiguration <span class=\"k\">=</span> <span class=\"k\">new</span> DeviceConfiguration <span class=\"k\">();</span>","<span class=\"k\">}</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>DeviceConfiguration <span class=\"k\">=</span> DeviceConfiguration<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> *  The HTTPRequest class</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @extends vs.core.EventSource</span>","<span class=\"c\"> * @name vs.core.HTTPRequest</span>","<span class=\"c\"> * @events textload, xmlload, loaderror </span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * It provides scripted client functionality for transferring data between</span>","<span class=\"c\"> * a client and a server.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *   Creates a new HTTPRequest.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *  var xhr = new core.HTTPRequest ({url: \"http...\"});</span>","<span class=\"c\"> *  xhr.init ();</span>","<span class=\"c\"> *  xhr.bind ('xmlload', this, this.processRSS);</span>","<span class=\"c\"> *  xhr.send ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","HTTPRequest <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> HTTPRequest<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","HTTPRequest<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>",""," <span class=\"c\">/*********************************************************</span>","<span class=\"c\"> *                  private data</span>","<span class=\"c\"> *********************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _url<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _method<span class=\"k\">:</span> <span class=\"s\">'GET'</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _login<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _password<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   * @type {string}</span>","<span class=\"c\">   */</span>","  _content_type<span class=\"k\">:</span> <span class=\"s\">''</span><span class=\"k\">,</span>","    "," <span class=\"c\">/*********************************************************</span>","<span class=\"c\"> *                   management</span>","<span class=\"c\"> *********************************************************/</span>"," ","  <span class=\"c\">/**</span>","<span class=\"c\">   * </span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.HTTPRequest#send </span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {String} data The data to send [optional]</span>","<span class=\"c\">   */</span>","  send <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> xhr <span class=\"k\">=</span> <span class=\"k\">new</span> XMLHttpRequest <span class=\"k\">();</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_response_text <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_response_xml <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","  ","    <span class=\"c\">//prepare the xmlhttprequest object</span>","    xhr<span class=\"k\">.</span>open <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_method<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_url<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_login <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_password <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">);</span>","    xhr<span class=\"k\">.</span>setRequestHeader <span class=\"k\">(</span><span class=\"s\">\"Cache-Control\"</span><span class=\"k\">,</span> <span class=\"s\">\"no-cache\"</span><span class=\"k\">);</span>","    xhr<span class=\"k\">.</span>setRequestHeader <span class=\"k\">(</span><span class=\"s\">\"Pragma\"</span><span class=\"k\">,</span> <span class=\"s\">\"no-cache\"</span><span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_content_type<span class=\"k\">)</span>","    <span class=\"k\">{</span> xhr<span class=\"k\">.</span>setRequestHeader<span class=\"k\">(</span><span class=\"s\">'Content-Type'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_content_type<span class=\"k\">);</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    xhr<span class=\"k\">.</span>onreadystatechange <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">4</span><span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>status <span class=\"k\">===</span> <span class=\"s\">200</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span>xhr<span class=\"k\">.</span>responseText<span class=\"k\">)</span>","          <span class=\"k\">{</span>","            self<span class=\"k\">.</span>_response_text <span class=\"k\">=</span> xhr<span class=\"k\">.</span>responseText<span class=\"k\">;</span>","            self<span class=\"k\">.</span>_response_xml <span class=\"k\">=</span> xhr<span class=\"k\">.</span>responseXML<span class=\"k\">;</span>","            ","            self<span class=\"k\">.</span>propagateChange <span class=\"k\">();</span>","","            self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'textload'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_text<span class=\"k\">);</span>","            self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'xmlload'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_xml<span class=\"k\">);</span>","          <span class=\"k\">}</span>","          <span class=\"k\">else</span>","          <span class=\"k\">{</span>","            self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'loaderror'</span><span class=\"k\">,</span> <span class=\"s\">'file not found.'</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span>","        <span class=\"k\">{</span>","          self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">'loaderror'</span><span class=\"k\">,</span> xhr<span class=\"k\">.</span>status<span class=\"k\">);</span>","          <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  ","    <span class=\"c\">//send the request</span>","    xhr<span class=\"k\">.</span>send <span class=\"k\">(</span>data<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>HTTPRequest<span class=\"k\">,</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperties <span class=\"k\">(</span>HTTPRequest<span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"s\">\"url\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Setter for the url</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#url </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_url <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'method'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request method (GET | POST)</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#method </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>v <span class=\"k\">!=</span> <span class=\"s\">'GET'</span> <span class=\"k\">||</span> v <span class=\"k\">!=</span> <span class=\"s\">'POST'</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_method <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'login'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request login</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#login </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_login <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'password'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request password</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#password </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_password <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'contentType'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Set request content type</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#contentType </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>util<span class=\"k\">.</span>isString <span class=\"k\">(</span>v<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_content_type <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'responseText'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Return request result as XML document</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#responseText </span>","<span class=\"c\">     * @type String</span>","<span class=\"c\">     */</span> ","    get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_text<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">'responseXML'</span><span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/** </span>","<span class=\"c\">     * Return request result as XML document</span>","<span class=\"c\">     * @name vs.core.HTTPRequest#responseXML </span>","<span class=\"c\">     * @type Document</span>","<span class=\"c\">     */</span> ","    get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_response_xml<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>HTTPRequest <span class=\"k\">=</span> HTTPRequest<span class=\"k\">;</span><span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\"> </span>","<span class=\"c\"> Use code from Canto.js Copyright 2010 Steven Levithan &lt;stevenlevithan.com&gt;</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @class</span>","<span class=\"c\"> *  vs.core.Array is an Array of Object or Model.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @extends vs.core.Model</span>","<span class=\"c\"> * @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.Array</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\">*/</span>","<span class=\"k\">function</span> VSArray <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Array<span class=\"k\">;</span>","<span class=\"k\">}</span>","","VSArray<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","   _data<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","   _model_class<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @name vs.core.Array#initComponent</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @protected</span>","<span class=\"c\">   */</span>","   initComponent <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","   <span class=\"k\">{</span>","     <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">[];</span>","   <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Returns the nth element</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#item</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {number} index</span>","<span class=\"c\">   */</span>","  item <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>index<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">[</span>index<span class=\"k\">];</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   * @name vs.core.Array#_instanceModel</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  _instanciateModel <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>obj<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>Model<span class=\"k\">)</span> <span class=\"k\">return</span> obj<span class=\"k\">;</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>obj <span class=\"k\">instanceof</span> Object <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_model_class<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">try</span>","      <span class=\"k\">{</span>","        <span class=\"k\">var</span> _model <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>_model_class <span class=\"k\">(</span>obj<span class=\"k\">);</span>","        _model<span class=\"k\">.</span>init <span class=\"k\">();</span>","        <span class=\"k\">return</span> _model<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>error <span class=\"k\">(</span>e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Adds one or more elements to the end of an array and returns the</span>","<span class=\"c\">   * new length of the array.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#add</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {element1, ..., elementN} datas</span>","<span class=\"c\">   */</span>","  add <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[],</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span>i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> args<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_instanciateModel <span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">]));</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>push<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">,</span> args<span class=\"k\">);</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'add'</span><span class=\"k\">);</span>","    ","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>length<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Adds one or more elements to the end of an array and returns the</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#addAtIndex</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {number} index the position </span>","<span class=\"c\">   * @param {element1, ..., elementN} datas</span>","<span class=\"c\">   */</span>","  addAtIndex <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    <span class=\"k\">var</span> args <span class=\"k\">=</span> <span class=\"k\">[],</span> i <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span>i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span> args<span class=\"k\">.</span>push <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_instanciateModel <span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">]));</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>splice<span class=\"k\">.</span>apply <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">,</span> args<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'add'</span><span class=\"k\">,</span> args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> args<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">2</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","    ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Removes the elements in the specified interval of this Array.&lt;br/&gt; </span>","<span class=\"c\">   * Shifts any subsequent elements to the left (subtracts one from</span>","<span class=\"c\">   * their indices).&lt;br/&gt;</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @example</span>","<span class=\"c\">   * myarray.remove (3); //remove the fourth item</span>","<span class=\"c\">   * ...</span>","<span class=\"c\">   * myarray.remove (3, 5); //remove the fourth, fifth and sixth items</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#remove</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @param {int} from Index of the first element to be removed</span>","<span class=\"c\">   * @param {int} to Index of the last element to be removed</span>","<span class=\"c\">   */</span>","  remove <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>remove <span class=\"k\">(</span>from<span class=\"k\">,</span> to<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'remove'</span><span class=\"k\">,</span> from<span class=\"k\">,</span> to<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Removes all elements of this Array.&lt;br/&gt; </span>","<span class=\"c\">   * @name vs.core.Array#removeAll</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   */</span>","  removeAll <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>hasToPropagateChange <span class=\"k\">())</span> <span class=\"k\">this</span><span class=\"k\">.</span>change <span class=\"k\">(</span><span class=\"s\">'removeall'</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  .</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#indexOf</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} str the url to parse</span>","<span class=\"c\">   */</span>","  indexOf <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">throw</span> <span class=\"k\">(</span><span class=\"s\">\"method not yet implemented\"</span><span class=\"k\">);</span>","<span class=\"c\">//    this._data.push ();</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Returns a copy of the objet's properties for JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used for persistence or serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#toJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @return {String} The JSON String</span>","<span class=\"c\">   */</span>","  toJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> json <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_toJSON <span class=\"k\">(</span><span class=\"s\">\"{\"</span><span class=\"k\">),</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> obj<span class=\"k\">;</span>","    ","    json <span class=\"k\">+=</span> <span class=\"s\">\", </span><span class=\"t\">\\\"</span><span class=\"s\">data</span><span class=\"t\">\\\"</span><span class=\"s\">: [\"</span><span class=\"k\">;</span>","    <span class=\"k\">for</span> <span class=\"k\">(;</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","    <span class=\"k\">{</span>","      obj <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>obj<span class=\"k\">)</span> <span class=\"k\">continue</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>obj<span class=\"k\">.</span>toJSON<span class=\"k\">)</span> json <span class=\"k\">+=</span> obj<span class=\"k\">.</span>toJSON <span class=\"k\">();</span>","      <span class=\"k\">else</span> json <span class=\"k\">+=</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>obj<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">)</span> json <span class=\"k\">+=</span> <span class=\"s\">','</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    json <span class=\"k\">+=</span> <span class=\"s\">\"]}\"</span><span class=\"k\">;</span>","    <span class=\"k\">return</span> json<span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   *  Set objet's properties from JSON stringification.&lt;p/&gt;</span>","<span class=\"c\">   *  This can be used when retrieve data from serialization.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.Array#parseJSON</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} json The JSON String</span>","<span class=\"c\">   */</span>","  parseJSON <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>json<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> obj <span class=\"k\">=</span> <span class=\"k\">(</span>json <span class=\"k\">&amp;&amp;</span> util<span class=\"k\">.</span>parseJSON <span class=\"k\">(</span>json<span class=\"k\">))</span> <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> i<span class=\"k\">,</span> key<span class=\"k\">,</span> _model<span class=\"k\">,</span> item<span class=\"k\">;</span>","  ","      <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> obj<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">[];</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>key <span class=\"k\">==</span> <span class=\"s\">'data'</span><span class=\"k\">)</span>","        <span class=\"k\">{</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> obj<span class=\"k\">.</span>data<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span>","          <span class=\"k\">{</span>","            item <span class=\"k\">=</span> obj<span class=\"k\">.</span>data <span class=\"k\">[</span>i<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>_model_class<span class=\"k\">)</span>","            <span class=\"k\">{</span>","              _model <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">this</span><span class=\"k\">.</span>_model_class <span class=\"k\">();</span>","              _model<span class=\"k\">.</span>init <span class=\"k\">();</span>","            ","              <span class=\"k\">for</span> <span class=\"k\">(</span>key <span class=\"k\">in</span> item<span class=\"k\">)</span> <span class=\"k\">{</span> _model <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> key<span class=\"k\">]</span> <span class=\"k\">=</span> item <span class=\"k\">[</span>key<span class=\"k\">];</span> <span class=\"k\">}</span>","              <span class=\"k\">this</span><span class=\"k\">.</span>add <span class=\"k\">(</span>_model<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">else</span> <span class=\"k\">this</span><span class=\"k\">.</span>add <span class=\"k\">(</span>item<span class=\"k\">);</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">else</span> <span class=\"k\">this</span> <span class=\"k\">[</span><span class=\"s\">'_'</span> <span class=\"k\">+</span> key<span class=\"k\">]</span> <span class=\"k\">=</span> obj <span class=\"k\">[</span>key<span class=\"k\">];</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"vs.core.Array.parseJSON failed. \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>VSArray<span class=\"k\">,</span> core<span class=\"k\">.</span>Model<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                  Define class properties</span>","<span class=\"c\">********************************************************************/</span>","","util<span class=\"k\">.</span>defineClassProperties <span class=\"k\">(</span>VSArray<span class=\"k\">,</span> <span class=\"k\">{</span>","  <span class=\"s\">\"length\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * The url anchor</span>","<span class=\"c\">     * @example</span>","<span class=\"c\">     * top in http://test.com/index.html#top</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @name vs.core.Array#length </span>","<span class=\"c\">     * @type {string}</span>","<span class=\"c\">     */</span>","    get <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>__i__<span class=\"k\">)</span> <span class=\"k\">throw</span> <span class=\"k\">(</span><span class=\"s\">\"Component not initialized\"</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_data<span class=\"k\">.</span>length<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"s\">\"modelClass\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * Set this property to specify the model class that the Array contains</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @name vs.core.Array#modelClass </span>","<span class=\"c\">     * @type {vs.core.Model}</span>","<span class=\"c\">     */</span>","    set <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>v<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!(</span>v <span class=\"k\">instanceof</span> Function<span class=\"k\">))</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">this</span><span class=\"k\">.</span>_model_class <span class=\"k\">=</span> v<span class=\"k\">;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>Array <span class=\"k\">=</span> VSArray<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @extends vs.core.EventSource</span>","<span class=\"c\"> *  @class vs.core.DataStorage </span>","<span class=\"c\"> *  is an abstract class for managing data save and laod.</span>","<span class=\"c\"> *  &lt;br/&gt;&lt;br/&gt; &gt;&gt;&gt;&gt; THIS CODE IS STILL UNDER BETA AND </span>","<span class=\"c\"> *  THE API MAY CHANGE IN THE FUTURE &lt;&lt;&lt; &lt;p&gt;</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.DataStorage</span>","<span class=\"c\"> * @see vs.core.LocalStorage</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> DataStorage <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>DataStorage<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","DataStorage<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","   __models__<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Register a model into the sync service.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#registerModel</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name</span>","<span class=\"c\">   * @param {vs.core.Model} model the model to register</span>","<span class=\"c\">   */</span>","  registerModel <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> model<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name <span class=\"k\">||</span> <span class=\"k\">!</span>model<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">])</span>","      error<span class=\"k\">.</span>log <span class=\"k\">(</span><span class=\"s\">\"Model with the name already registered.\"</span><span class=\"k\">);</span>","      ","    <span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> model<span class=\"k\">;</span>","    ","    model<span class=\"k\">.</span>_sync_service_ <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Remove a model from the sync service. &lt;br/&gt;</span>","<span class=\"c\">   * If the you want also delete delete data you have to call before the </span>","<span class=\"c\">   * delete methode</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#removeModel</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name</span>","<span class=\"c\">   */</span>","  removeModel <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>name<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","    <span class=\"k\">delete</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Save models. If a name is specified, it save only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#save</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  save <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Load models. If a name is specified, it load only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.DataStorage#load</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  load <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>DataStorage<span class=\"k\">,</span> core<span class=\"k\">.</span>EventSource<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>DataStorage <span class=\"k\">=</span> DataStorage<span class=\"k\">;</span>","<span class=\"c\">/**</span>","<span class=\"c\">  Copyright (C) 2009-2012. David Thevenin, ViniSketch SARL (c), and </span>","<span class=\"c\">  contributors. All rights reserved</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is free software: you can redistribute it and/or modify</span>","<span class=\"c\">  it under the terms of the GNU Lesser General Public License as published</span>","<span class=\"c\">  by the Free Software Foundation, either version 3 of the License, or</span>","<span class=\"c\">  (at your option) any later version.</span>","<span class=\"c\">  </span>","<span class=\"c\">  This program is distributed in the hope that it will be useful,</span>","<span class=\"c\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>","<span class=\"c\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span>","<span class=\"c\">  GNU Lesser General Public License for more details.</span>","<span class=\"c\">  </span>","<span class=\"c\">  You should have received a copy of the GNU Lesser General Public License</span>","<span class=\"c\">  along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span>","<span class=\"c\">*/</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  @extends vs.core.DataStorage</span>","<span class=\"c\"> *  @class vs.core.LocalStorage </span>","<span class=\"c\"> *  is an implementation of DataStorage for storing data into HTML5 LocalStorage</span>","<span class=\"c\"> *  &lt;br/&gt;&lt;br/&gt; &gt;&gt;&gt;&gt; THIS CODE IS STILL UNDER BETA AND </span>","<span class=\"c\"> *  THE API MAY CHANGE IN THE FUTURE &lt;&lt;&lt; &lt;p&gt;</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *  @example</span>","<span class=\"c\"> *   var todoList = vs.core.Array ();</span>","<span class=\"c\"> *   todoList.init ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *   var localStorage = new vs.core.LocalStorage ();</span>","<span class=\"c\"> *   localStorage.init ();</span>","<span class=\"c\"> *   localStorage.registerModel (\"todoslist\", todosList);</span>","<span class=\"c\"> *   localStorage.load ();</span>","<span class=\"c\"> *   ...</span>","<span class=\"c\"> *   // model modification</span>","<span class=\"c\"> *   localStorage.save ();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @author David Thevenin</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  @constructor</span>","<span class=\"c\"> *  Main constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name vs.core.LocalStorage</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} config the configuration structure</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> LocalStorage <span class=\"k\">(</span>config<span class=\"k\">)</span>","<span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">=</span> DataStorage<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>parent <span class=\"k\">(</span>config<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>constructor <span class=\"k\">=</span> vs<span class=\"k\">.</span>core<span class=\"k\">.</span>LocalStorage<span class=\"k\">;</span>","<span class=\"k\">}</span>","","LocalStorage<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *</span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","   ","  <span class=\"c\">/*****************************************************************</span>","<span class=\"c\">   *              </span>","<span class=\"c\">   ****************************************************************/</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Save models. If a name is specified, it saves only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.LocalStorage#save</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  save <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> _save <span class=\"k\">(</span>name<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">var</span> json<span class=\"k\">,</span> model <span class=\"k\">=</span> self<span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">];</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","      ","      <span class=\"k\">try</span>","      <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>model<span class=\"k\">.</span>toJSON<span class=\"k\">)</span> json <span class=\"k\">=</span> model<span class=\"k\">.</span>toJSON <span class=\"k\">();</span>","        <span class=\"k\">else</span> json <span class=\"k\">=</span> JSON<span class=\"k\">.</span>stringify <span class=\"k\">(</span>model<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        error<span class=\"k\">.</span>log <span class=\"k\">(</span>e<span class=\"k\">);</span>","        self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">\"error\"</span><span class=\"k\">,</span> e<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      ","      localStorage<span class=\"k\">.</span>setItem <span class=\"k\">(</span>name<span class=\"k\">,</span> json<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> _save <span class=\"k\">(</span>name<span class=\"k\">);</span>","    <span class=\"k\">else</span> <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__models__<span class=\"k\">)</span> _save <span class=\"k\">(</span>name<span class=\"k\">);</span>","    ","    self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">\"save\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">   * Load models. If a name is specified, it load only the model</span>","<span class=\"c\">   * associated to the name.</span>","<span class=\"c\">   *</span>","<span class=\"c\">   * @name vs.core.LocalStorage#load</span>","<span class=\"c\">   * @function</span>","<span class=\"c\">   * @param {String} name model name to save [optional]</span>","<span class=\"c\">   */</span>","  load <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span>","  <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","    <span class=\"k\">function</span> _load <span class=\"k\">(</span>name<span class=\"k\">)</span>","    <span class=\"k\">{</span>","      <span class=\"k\">try</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> json<span class=\"k\">,</span> model <span class=\"k\">=</span> self<span class=\"k\">.</span>__models__ <span class=\"k\">[</span>name<span class=\"k\">];</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>model<span class=\"k\">)</span> <span class=\"k\">return</span><span class=\"k\">;</span>","        ","        <span class=\"k\">var</span> store <span class=\"k\">=</span> localStorage<span class=\"k\">.</span>getItem <span class=\"k\">(</span>name<span class=\"k\">);</span>","        model<span class=\"k\">.</span>parseJSON <span class=\"k\">(</span>store<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span>","      <span class=\"k\">{</span>","        console<span class=\"k\">.</span>error <span class=\"k\">(</span><span class=\"s\">\"LocalStorate.load failed. \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>toString <span class=\"k\">());</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> _load <span class=\"k\">(</span>name<span class=\"k\">);</span>","    <span class=\"k\">else</span> <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>__models__<span class=\"k\">)</span> _load <span class=\"k\">(</span>name<span class=\"k\">);</span>","    ","    self<span class=\"k\">.</span>propagate <span class=\"k\">(</span><span class=\"s\">\"load\"</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","util<span class=\"k\">.</span>extendClass <span class=\"k\">(</span>LocalStorage<span class=\"k\">,</span> DataStorage<span class=\"k\">);</span>","","<span class=\"c\">/********************************************************************</span>","<span class=\"c\">                      Export</span>","<span class=\"c\">*********************************************************************/</span>","<span class=\"c\">/** @private */</span>","core<span class=\"k\">.</span>LocalStorage <span class=\"k\">=</span> LocalStorage<span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">)(</span>window<span class=\"k\">);</span>"];
_$jscoverage['js/vs_core.js'][19]++;
(function (window, undefined) {
  _$jscoverage['js/vs_core.js'][21]++;
  var document = window.document;
  _$jscoverage['js/vs_core.js'][45]++;
  var vs = window.vs, util = vs.util, core = vs.core;
  _$jscoverage['js/vs_core.js'][57]++;
  function createId() {
    _$jscoverage['js/vs_core.js'][59]++;
    return ("hak_id_" + new Date().getTime() + "" + Math.floor((Math.random() * 1000000)));
}
  _$jscoverage['js/vs_core.js'][68]++;
  core.createId = createId;
  _$jscoverage['js/vs_core.js'][104]++;
  function VSObject(config) {
    _$jscoverage['js/vs_core.js'][106]++;
    this.constructor = core.Object;
    _$jscoverage['js/vs_core.js'][107]++;
    if (util.isString(config)) {
      _$jscoverage['js/vs_core.js'][107]++;
      this._id = config;
    }
    else {
      _$jscoverage['js/vs_core.js'][108]++;
      if ((config && config.id)) {
        _$jscoverage['js/vs_core.js'][108]++;
        this._id = config.id;
      }
      else {
        _$jscoverage['js/vs_core.js'][109]++;
        this._id = createId();
      }
    }
    _$jscoverage['js/vs_core.js'][111]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][113]++;
      this.__config__ = util.clone(config);
    }
}
  _$jscoverage['js/vs_core.js'][117]++;
  VSObject.prototype = {_id: "", __i__: false, __config__: null, init: (function () {
  _$jscoverage['js/vs_core.js'][150]++;
  if (this.__i__) {
    _$jscoverage['js/vs_core.js'][150]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][152]++;
  if ((! this._id)) {
    _$jscoverage['js/vs_core.js'][154]++;
    this._id = createId();
  }
  _$jscoverage['js/vs_core.js'][158]++;
  VSObject._obs[this._id] = this;
  _$jscoverage['js/vs_core.js'][160]++;
  this.initComponent();
  _$jscoverage['js/vs_core.js'][161]++;
  this.__i__ = true;
  _$jscoverage['js/vs_core.js'][163]++;
  if (this.__config__) {
    _$jscoverage['js/vs_core.js'][165]++;
    this.configure(this.__config__);
    _$jscoverage['js/vs_core.js'][166]++;
    (delete this.__config__);
  }
  _$jscoverage['js/vs_core.js'][169]++;
  return this;
}), initComponent: (function () {
}), createId: (function () {
  _$jscoverage['js/vs_core.js'][185]++;
  console.warn("this.createId is deprecated, Use the static method vs.core.createId instead");
  _$jscoverage['js/vs_core.js'][187]++;
  return createId();
}), configure: (function (config) {
  _$jscoverage['js/vs_core.js'][215]++;
  if (((typeof config) !== "object")) {
    _$jscoverage['js/vs_core.js'][215]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][216]++;
  var props, key, i, should_propagate = false, desc;
  _$jscoverage['js/vs_core.js'][218]++;
  var df = _df_node_to_def[this._id];
  _$jscoverage['js/vs_core.js'][219]++;
  if (df) {
    _$jscoverage['js/vs_core.js'][219]++;
    df.pausePropagation();
  }
  _$jscoverage['js/vs_core.js'][222]++;
  if ((config instanceof Model)) {
    _$jscoverage['js/vs_core.js'][224]++;
    desc = this.getPropertyDescriptor("model");
    _$jscoverage['js/vs_core.js'][225]++;
    if ((desc && desc.set)) {
      _$jscoverage['js/vs_core.js'][228]++;
      this.model = config;
      _$jscoverage['js/vs_core.js'][229]++;
      should_propagate = true;
    }
    else {
      _$jscoverage['js/vs_core.js'][234]++;
      props = config.getProperties();
      _$jscoverage['js/vs_core.js'][235]++;
      for (i = 0; (i < props.length); (i++)) {
        _$jscoverage['js/vs_core.js'][237]++;
        key = props[i];
        _$jscoverage['js/vs_core.js'][238]++;
        if ((key === "id")) {
          _$jscoverage['js/vs_core.js'][238]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][239]++;
        this[key] = config[key];
        _$jscoverage['js/vs_core.js'][240]++;
        should_propagate = true;
}
    }
  }
  else {
    _$jscoverage['js/vs_core.js'][246]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][246]++;
      for (key in config) {
        _$jscoverage['js/vs_core.js'][248]++;
        if (((key === "id") || (key === "node") || (key === "nodeRef") || (key === "view"))) {
          _$jscoverage['js/vs_core.js'][250]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][251]++;
        this[key] = config[key];
        _$jscoverage['js/vs_core.js'][252]++;
        should_propagate = true;
}
    }
  }
  _$jscoverage['js/vs_core.js'][256]++;
  if (df) {
    _$jscoverage['js/vs_core.js'][258]++;
    df.restartPropagation();
    _$jscoverage['js/vs_core.js'][259]++;
    if (should_propagate) {
      _$jscoverage['js/vs_core.js'][261]++;
      if (this.propertiesDidChange) {
        _$jscoverage['js/vs_core.js'][261]++;
        this.propertiesDidChange();
      }
      _$jscoverage['js/vs_core.js'][262]++;
      df.propagate(this._id);
    }
  }
  else {
    _$jscoverage['js/vs_core.js'][265]++;
    if ((should_propagate && this.propertiesDidChange)) {
      _$jscoverage['js/vs_core.js'][266]++;
      this.propertiesDidChange();
    }
  }
}), getProperties: (function () {
  _$jscoverage['js/vs_core.js'][278]++;
  if ((! this.constructor._properties_)) {
    _$jscoverage['js/vs_core.js'][278]++;
    return [];
  }
  _$jscoverage['js/vs_core.js'][280]++;
  return this.constructor._properties_.slice();
}), toJSON: (function () {
  _$jscoverage['js/vs_core.js'][293]++;
  return (this._toJSON("{") + "}");
}), parseJSON: (function (json) {
  _$jscoverage['js/vs_core.js'][306]++;
  try {
    _$jscoverage['js/vs_core.js'][307]++;
    var obj = ((json && util.parseJSON(json)) || {}), value, result;
    _$jscoverage['js/vs_core.js'][309]++;
    for (var key in obj) {
      _$jscoverage['js/vs_core.js'][321]++;
      this[("_" + key)] = value;
}
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][326]++;
    console.error(("vs.core.Object.parseJSON failed. " + e.toString()));
  }
}), _toJSON: (function (json) {
  _$jscoverage['js/vs_core.js'][339]++;
  var prop_name, value, str, _properties_ = this.constructor._properties_, n = 0;
  _$jscoverage['js/vs_core.js'][342]++;
  if ((! _properties_)) {
    _$jscoverage['js/vs_core.js'][342]++;
    return json;
  }
  _$jscoverage['js/vs_core.js'][344]++;
  for (var i = 0; (i < _properties_.length); (i++)) {
    _$jscoverage['js/vs_core.js'][346]++;
    prop_name = _properties_[i];
    _$jscoverage['js/vs_core.js'][347]++;
    value = this[("_" + prop_name)];
    _$jscoverage['js/vs_core.js'][348]++;
    if (((typeof value) == "undefined")) {
      _$jscoverage['js/vs_core.js'][348]++;
      continue;
    }
    else {
      _$jscoverage['js/vs_core.js'][349]++;
      if ((value == null)) {
        _$jscoverage['js/vs_core.js'][349]++;
        str = "null";
      }
      else {
        _$jscoverage['js/vs_core.js'][350]++;
        if ((value instanceof Date)) {
          _$jscoverage['js/vs_core.js'][351]++;
          str = ("\"/Date(" + value.getTime() + ")/\"");
        }
        else {
          _$jscoverage['js/vs_core.js'][354]++;
          if (value.toJSON) {
            _$jscoverage['js/vs_core.js'][354]++;
            str = value.toJSON();
          }
          else {
            _$jscoverage['js/vs_core.js'][355]++;
            try {
              _$jscoverage['js/vs_core.js'][356]++;
              str = JSON.stringify(value);
            }
            catch (e) {
              _$jscoverage['js/vs_core.js'][359]++;
              console.warn(e);
              _$jscoverage['js/vs_core.js'][360]++;
              continue;
            }
          }
        }
      }
    }
    _$jscoverage['js/vs_core.js'][363]++;
    if ((n++)) {
      _$jscoverage['js/vs_core.js'][363]++;
      json += ",";
    }
    _$jscoverage['js/vs_core.js'][364]++;
    json += ("\"" + prop_name + "\":" + str);
}
  _$jscoverage['js/vs_core.js'][367]++;
  return json;
}), destructor: (function () {
}), propertyChange: (function (property) {
  _$jscoverage['js/vs_core.js'][390]++;
  var df = _df_node_to_def[this._id];
  _$jscoverage['js/vs_core.js'][391]++;
  if ((! df)) {
    _$jscoverage['js/vs_core.js'][393]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][396]++;
  df.propagate(this._id, property);
}), propagateChange: (function (property) {
  _$jscoverage['js/vs_core.js'][410]++;
  this.propertyChange(property);
}), clone: (function (config, cloned_map) {
  _$jscoverage['js/vs_core.js'][424]++;
  var obj, key, value, desc, desc_clone, getter, setter;
  _$jscoverage['js/vs_core.js'][426]++;
  if ((! cloned_map)) {
    _$jscoverage['js/vs_core.js'][426]++;
    cloned_map = {};
  }
  _$jscoverage['js/vs_core.js'][429]++;
  if (cloned_map[this]) {
    _$jscoverage['js/vs_core.js'][429]++;
    return cloned_map[this];
  }
  _$jscoverage['js/vs_core.js'][431]++;
  if ((! config)) {
    _$jscoverage['js/vs_core.js'][431]++;
    config = {};
  }
  _$jscoverage['js/vs_core.js'][432]++;
  if ((! config.id)) {
    _$jscoverage['js/vs_core.js'][432]++;
    config.id = createId();
  }
  _$jscoverage['js/vs_core.js'][434]++;
  if (util.isFunction(this.constructor)) {
    _$jscoverage['js/vs_core.js'][436]++;
    obj = new (this.constructor)(config);
  }
  else {
    _$jscoverage['js/vs_core.js'][440]++;
    console.warn("impossible to clone this object.");
    _$jscoverage['js/vs_core.js'][441]++;
    return null;
  }
  _$jscoverage['js/vs_core.js'][444]++;
  cloned_map[this] = obj;
  _$jscoverage['js/vs_core.js'][446]++;
  for (key in this) {
    _$jscoverage['js/vs_core.js'][448]++;
    if (((key == "id") || (key == "_id"))) {
      _$jscoverage['js/vs_core.js'][448]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][450]++;
    value = this[key];
    _$jscoverage['js/vs_core.js'][451]++;
    desc = Object.getOwnPropertyDescriptor(this, key);
    _$jscoverage['js/vs_core.js'][452]++;
    desc_clone = Object.getOwnPropertyDescriptor(obj, key);
    _$jscoverage['js/vs_core.js'][455]++;
    if ((desc && (desc.get || desc.set))) {
      _$jscoverage['js/vs_core.js'][458]++;
      if ((! desc_clone)) {
        _$jscoverage['js/vs_core.js'][458]++;
        util.defineProperty(obj, key, desc);
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][462]++;
      if (this.hasOwnProperty(key)) {
        _$jscoverage['js/vs_core.js'][464]++;
        if ((value instanceof vs.core.Object)) {
          _$jscoverage['js/vs_core.js'][466]++;
          obj[key] = value.clone(null, cloned_map);
        }
        else {
          _$jscoverage['js/vs_core.js'][468]++;
          if (util.isArray(value)) {
            _$jscoverage['js/vs_core.js'][470]++;
            obj[key] = value.slice();
          }
          else {
            _$jscoverage['js/vs_core.js'][472]++;
            obj[key] = value;
          }
        }
      }
    }
}
  _$jscoverage['js/vs_core.js'][476]++;
  obj.__i__ = false;
  _$jscoverage['js/vs_core.js'][477]++;
  return obj;
}), getOwnPropertyDescriptor: (function (prop) {
  _$jscoverage['js/vs_core.js'][496]++;
  var proto = Object.getPrototypeOf(this);
  _$jscoverage['js/vs_core.js'][497]++;
  if ((! proto)) {
    _$jscoverage['js/vs_core.js'][497]++;
    return null;
  }
  _$jscoverage['js/vs_core.js'][498]++;
  return Object.getOwnPropertyDescriptor(proto, prop);
}), getPropertyDescriptor: (function (prop) {
  _$jscoverage['js/vs_core.js'][513]++;
  function _getOwnPropertyDescriptor(obj, prop) {
    _$jscoverage['js/vs_core.js'][515]++;
    if ((! obj)) {
      _$jscoverage['js/vs_core.js'][515]++;
      return null;
    }
    _$jscoverage['js/vs_core.js'][516]++;
    var proto = Object.getPrototypeOf(obj);
    _$jscoverage['js/vs_core.js'][517]++;
    if ((! proto)) {
      _$jscoverage['js/vs_core.js'][517]++;
      return null;
    }
    _$jscoverage['js/vs_core.js'][518]++;
    var desc = Object.getOwnPropertyDescriptor(proto, prop);
    _$jscoverage['js/vs_core.js'][519]++;
    if (desc) {
      _$jscoverage['js/vs_core.js'][519]++;
      return desc;
    }
    _$jscoverage['js/vs_core.js'][520]++;
    return _getOwnPropertyDescriptor(proto, prop);
}
  _$jscoverage['js/vs_core.js'][523]++;
  return _getOwnPropertyDescriptor(this, prop);
}), _super: (function () {
  _$jscoverage['js/vs_core.js'][531]++;
  var superFunc = this._super.caller._super_func_;
  _$jscoverage['js/vs_core.js'][532]++;
  if (superFunc) {
    _$jscoverage['js/vs_core.js'][532]++;
    superFunc.apply(this, arguments);
  }
})};
  _$jscoverage['js/vs_core.js'][540]++;
  util.defineClassProperty(VSObject, "id", {get: (function () {
  _$jscoverage['js/vs_core.js'][547]++;
  return this._id;
})});
  _$jscoverage['js/vs_core.js'][554]++;
  VSObject._obs = {};
  _$jscoverage['js/vs_core.js'][560]++;
  core.Object = VSObject;
  _$jscoverage['js/vs_core.js'][583]++;
  var _constructor_ = window.Object.prototype.constructor;
  _$jscoverage['js/vs_core.js'][606]++;
  function createClass(config) {
    _$jscoverage['js/vs_core.js'][608]++;
    var klass = null, __spec = {}, parent = vs.core.Object, properties = {};
    _$jscoverage['js/vs_core.js'][612]++;
    klass = (function () {
  _$jscoverage['js/vs_core.js'][614]++;
  this.parent = klass.__spec.parent;
  _$jscoverage['js/vs_core.js'][616]++;
  if ((klass.__spec && klass.__spec._constructor)) {
    _$jscoverage['js/vs_core.js'][618]++;
    klass.__spec._constructor.apply(this, arguments);
  }
  else {
    _$jscoverage['js/vs_core.js'][621]++;
    if ((klass.__spec && klass.__spec.parent)) {
      _$jscoverage['js/vs_core.js'][623]++;
      this.parent.apply(this, arguments);
    }
  }
  _$jscoverage['js/vs_core.js'][626]++;
  this.constructor = klass;
});
    _$jscoverage['js/vs_core.js'][628]++;
    if ((config && config.parent)) {
      _$jscoverage['js/vs_core.js'][630]++;
      parent = config.parent;
      _$jscoverage['js/vs_core.js'][631]++;
      (delete config.parent);
    }
    _$jscoverage['js/vs_core.js'][633]++;
    if ((config && config.properties)) {
      _$jscoverage['js/vs_core.js'][635]++;
      properties = config.properties;
      _$jscoverage['js/vs_core.js'][636]++;
      (delete config.properties);
    }
    _$jscoverage['js/vs_core.js'][639]++;
    __spec.parent = parent;
    _$jscoverage['js/vs_core.js'][640]++;
    if ((config && config.constructor && (config.constructor !== _constructor_))) {
      _$jscoverage['js/vs_core.js'][642]++;
      __spec._constructor = config.constructor;
      _$jscoverage['js/vs_core.js'][643]++;
      __spec._constructor._super_func_ = parent;
    }
    _$jscoverage['js/vs_core.js'][645]++;
    klass.__spec = __spec;
    _$jscoverage['js/vs_core.js'][648]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][650]++;
      klass.prototype = config;
      _$jscoverage['js/vs_core.js'][651]++;
      config.constructor = klass;
    }
    _$jscoverage['js/vs_core.js'][653]++;
    if (parent.prototype) {
      _$jscoverage['js/vs_core.js'][653]++;
      util.extendClass(klass, parent);
    }
    _$jscoverage['js/vs_core.js'][656]++;
    if (config) {
      _$jscoverage['js/vs_core.js'][656]++;
      for (key in config) {
        _$jscoverage['js/vs_core.js'][658]++;
        if ((! config.hasOwnProperty(key))) {
          _$jscoverage['js/vs_core.js'][658]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][659]++;
        var func = config[key];
        _$jscoverage['js/vs_core.js'][660]++;
        var superFunc = parent.prototype[key];
        _$jscoverage['js/vs_core.js'][661]++;
        if (((! util.isFunction(func)) || (! util.isFunction(superFunc)))) {
          _$jscoverage['js/vs_core.js'][661]++;
          continue;
        }
        _$jscoverage['js/vs_core.js'][664]++;
        func._super_func_ = superFunc;
}
    }
    _$jscoverage['js/vs_core.js'][683]++;
    _setProperties(klass, properties);
    _$jscoverage['js/vs_core.js'][685]++;
    return klass;
}
  _$jscoverage['js/vs_core.js'][693]++;
  vs.core.Object.PROPERTY_IN = 1;
  _$jscoverage['js/vs_core.js'][700]++;
  vs.core.Object.PROPERTY_OUT = 2;
  _$jscoverage['js/vs_core.js'][707]++;
  vs.core.Object.PROPERTY_IN_OUT = 3;
  _$jscoverage['js/vs_core.js'][715]++;
  var property_reg = /(\w+[.\w+]*)#(\w+)/;
  _$jscoverage['js/vs_core.js'][720]++;
  function _setProperties(klass, properties) {
    _$jscoverage['js/vs_core.js'][722]++;
    var descriptions = {}, export_value, desc, _prop_name;
    _$jscoverage['js/vs_core.js'][723]++;
    for (var prop_name in properties) {
      _$jscoverage['js/vs_core.js'][725]++;
      var value = properties[prop_name];
      _$jscoverage['js/vs_core.js'][728]++;
      if (util.isNumber(value)) {
        _$jscoverage['js/vs_core.js'][730]++;
        export_value = value;
        _$jscoverage['js/vs_core.js'][730]++;
        desc = {};
        _$jscoverage['js/vs_core.js'][731]++;
        _prop_name = ("_" + prop_name);
        _$jscoverage['js/vs_core.js'][732]++;
        if ((export_value & vs.core.Object.PROPERTY_IN)) {
          _$jscoverage['js/vs_core.js'][734]++;
          desc.set = (function (_prop_name) {
  _$jscoverage['js/vs_core.js'][736]++;
  return (function (v) {
  _$jscoverage['js/vs_core.js'][738]++;
  this[_prop_name] = v;
  _$jscoverage['js/vs_core.js'][739]++;
  this.propertyChange(_prop_name);
});
})(_prop_name);
        }
        _$jscoverage['js/vs_core.js'][743]++;
        if ((export_value & vs.core.Object.PROPERTY_OUT)) {
          _$jscoverage['js/vs_core.js'][745]++;
          desc.get = (function (_prop_name) {
  _$jscoverage['js/vs_core.js'][747]++;
  return (function () {
  _$jscoverage['js/vs_core.js'][749]++;
  return this[_prop_name];
});
})(_prop_name);
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][756]++;
        if (util.isString(value)) {
          _$jscoverage['js/vs_core.js'][758]++;
          var result = property_reg.exec(value);
          _$jscoverage['js/vs_core.js'][759]++;
          if (((! result) || (result.length != 3))) {
            _$jscoverage['js/vs_core.js'][761]++;
            throw ("Unvalid property path: " + value);
          }
          _$jscoverage['js/vs_core.js'][763]++;
          desc = {};
          _$jscoverage['js/vs_core.js'][764]++;
          desc.set = (function (_path, _prop_name) {
  _$jscoverage['js/vs_core.js'][766]++;
  return (function (v) {
  _$jscoverage['js/vs_core.js'][768]++;
  this[_path][_prop_name] = v;
  _$jscoverage['js/vs_core.js'][769]++;
  this.propertyChange(_prop_name);
});
})(result[1], result[2]);
          _$jscoverage['js/vs_core.js'][773]++;
          desc.get = (function (_path, _prop_name) {
  _$jscoverage['js/vs_core.js'][775]++;
  return (function () {
  _$jscoverage['js/vs_core.js'][777]++;
  return this[_path][_prop_name];
});
})(result[1], result[2]);
        }
        else {
          _$jscoverage['js/vs_core.js'][783]++;
          if (((typeof value) == "object")) {
            _$jscoverage['js/vs_core.js'][785]++;
            desc = value;
          }
        }
      }
      _$jscoverage['js/vs_core.js'][787]++;
      descriptions[prop_name] = desc;
}
    _$jscoverage['js/vs_core.js'][789]++;
    util.defineClassProperties(klass, descriptions);
}
  _$jscoverage['js/vs_core.js'][796]++;
  core.createClass = createClass;
  _$jscoverage['js/vs_core.js'][857]++;
  function Model(config) {
    _$jscoverage['js/vs_core.js'][859]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][860]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][861]++;
    this.constructor = vs.core.Model;
    _$jscoverage['js/vs_core.js'][863]++;
    this.__bindings__ = {};
}
  _$jscoverage['js/vs_core.js'][866]++;
  Model.prototype = {__bindings__: null, __should_propagate_changes__: true, _sync_service_: null, destructor: (function () {
  _$jscoverage['js/vs_core.js'][900]++;
  core.Object.prototype.destructor.call(this);
  _$jscoverage['js/vs_core.js'][902]++;
  if (this._sync_service_) {
    _$jscoverage['js/vs_core.js'][902]++;
    this._sync_service_.removeModel(this);
  }
  _$jscoverage['js/vs_core.js'][904]++;
  function deleteBindings(list_bind) {
    _$jscoverage['js/vs_core.js'][906]++;
    if ((! list_bind)) {
      _$jscoverage['js/vs_core.js'][906]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][908]++;
    var bind, i = 0;
    _$jscoverage['js/vs_core.js'][909]++;
    while ((i < list_bind.length)) {
      _$jscoverage['js/vs_core.js'][911]++;
      bind = list_bind[i];
      _$jscoverage['js/vs_core.js'][912]++;
      util.free(bind);
}
}
  _$jscoverage['js/vs_core.js'][914]++;
  ;
  _$jscoverage['js/vs_core.js'][916]++;
  for (var spec in this.__bindings__) {
    _$jscoverage['js/vs_core.js'][918]++;
    deleteBindings(this.__bindings__[spec]);
    _$jscoverage['js/vs_core.js'][919]++;
    (delete this.__bindings__[spec]);
}
  _$jscoverage['js/vs_core.js'][922]++;
  (delete this.__bindings__);
}), bindChange: (function (spec, obj, func) {
  _$jscoverage['js/vs_core.js'][951]++;
  if ((! obj)) {
    _$jscoverage['js/vs_core.js'][951]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][952]++;
  var list_bind, handler;
  _$jscoverage['js/vs_core.js'][954]++;
  spec = (spec || "change");
  _$jscoverage['js/vs_core.js'][955]++;
  handler = new Handler(spec, obj, func, false);
  _$jscoverage['js/vs_core.js'][957]++;
  list_bind = this.__bindings__[spec];
  _$jscoverage['js/vs_core.js'][958]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][960]++;
    list_bind = [];
    _$jscoverage['js/vs_core.js'][961]++;
    this.__bindings__[spec] = list_bind;
  }
  _$jscoverage['js/vs_core.js'][963]++;
  list_bind.push(handler);
}), unbindChange: (function (spec, obj, func) {
  _$jscoverage['js/vs_core.js'][981]++;
  if ((! spec)) {
    _$jscoverage['js/vs_core.js'][981]++;
    spec = "change";
  }
  _$jscoverage['js/vs_core.js'][983]++;
  function unbind(list_bind) {
    _$jscoverage['js/vs_core.js'][985]++;
    if ((! list_bind)) {
      _$jscoverage['js/vs_core.js'][985]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][987]++;
    var bind, i = 0;
    _$jscoverage['js/vs_core.js'][988]++;
    while ((i < list_bind.length)) {
      _$jscoverage['js/vs_core.js'][990]++;
      bind = list_bind[i];
      _$jscoverage['js/vs_core.js'][991]++;
      if ((bind.spec === spec)) {
        _$jscoverage['js/vs_core.js'][993]++;
        if ((bind.obj === obj)) {
          _$jscoverage['js/vs_core.js'][995]++;
          if ((util.isString(func) || util.isFunction(func))) {
            _$jscoverage['js/vs_core.js'][997]++;
            if (((bind.func === func) || (bind.func_ptr === func))) {
              _$jscoverage['js/vs_core.js'][999]++;
              list_bind.remove(i);
              _$jscoverage['js/vs_core.js'][1000]++;
              util.free(bind);
            }
            else {
              _$jscoverage['js/vs_core.js'][1002]++;
              (i++);
            }
          }
          else {
            _$jscoverage['js/vs_core.js'][1006]++;
            list_bind.remove(i);
            _$jscoverage['js/vs_core.js'][1007]++;
            util.free(bind);
          }
        }
        else {
          _$jscoverage['js/vs_core.js'][1010]++;
          (i++);
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][1012]++;
        (i++);
      }
}
}
  _$jscoverage['js/vs_core.js'][1014]++;
  ;
  _$jscoverage['js/vs_core.js'][1016]++;
  unbind(this.__bindings__[spec]);
}), stopPropagation: (function () {
  _$jscoverage['js/vs_core.js'][1033]++;
  this.__should_propagate_changes__ = false;
}), hasToPropagateChange: (function () {
  _$jscoverage['js/vs_core.js'][1048]++;
  return this.__should_propagate_changes__;
}), change: (function (spec) {
  _$jscoverage['js/vs_core.js'][1066]++;
  var list_bind, event, handler;
  _$jscoverage['js/vs_core.js'][1068]++;
  this.__should_propagate_changes__ = true;
  _$jscoverage['js/vs_core.js'][1070]++;
  event = new Event(this, (spec || ("change:" + spec)));
  _$jscoverage['js/vs_core.js'][1072]++;
  try {
    _$jscoverage['js/vs_core.js'][1074]++;
    function _change(list_bind) {
      _$jscoverage['js/vs_core.js'][1076]++;
      if ((! list_bind)) {
        _$jscoverage['js/vs_core.js'][1076]++;
        return;
      }
      _$jscoverage['js/vs_core.js'][1077]++;
      var i = list_bind.length, handler;
      _$jscoverage['js/vs_core.js'][1079]++;
      while ((i--)) {
        _$jscoverage['js/vs_core.js'][1082]++;
        handler = list_bind[i];
        _$jscoverage['js/vs_core.js'][1084]++;
        if (handler.func_ptr) {
          _$jscoverage['js/vs_core.js'][1086]++;
          handler.func_ptr.call(handler.obj, event);
        }
        else {
          _$jscoverage['js/vs_core.js'][1088]++;
          if (handler.func) {
            _$jscoverage['js/vs_core.js'][1090]++;
            (handler.obj[handler.func])(event);
          }
          else {
            _$jscoverage['js/vs_core.js'][1094]++;
            handler.obj.notify(event);
          }
        }
}
}
    _$jscoverage['js/vs_core.js'][1097]++;
    ;
    _$jscoverage['js/vs_core.js'][1099]++;
    if ((spec && (spec != "change"))) {
      _$jscoverage['js/vs_core.js'][1099]++;
      _change(this.__bindings__[spec]);
    }
    _$jscoverage['js/vs_core.js'][1100]++;
    _change(this.__bindings__.change);
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1104]++;
    console.error(e);
  }
}), propertyChange: (function (property) {
  _$jscoverage['js/vs_core.js'][1121]++;
  var df = _df_node_to_def[this._id];
  _$jscoverage['js/vs_core.js'][1122]++;
  if ((! df)) {
    _$jscoverage['js/vs_core.js'][1122]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1124]++;
  df.propagate(this._id, property);
  _$jscoverage['js/vs_core.js'][1125]++;
  if (this.__should_propagate_changes__) {
    _$jscoverage['js/vs_core.js'][1125]++;
    this.change();
  }
})};
  _$jscoverage['js/vs_core.js'][1128]++;
  util.extendClass(Model, core.Object);
  _$jscoverage['js/vs_core.js'][1134]++;
  core.Model = Model;
  _$jscoverage['js/vs_core.js'][1156]++;
  FORCE_EVENT_PROPAGATION_DELAY = false;
  _$jscoverage['js/vs_core.js'][1162]++;
  EVENT_SUPPORT_TOUCH = ("createTouch" in document);
  _$jscoverage['js/vs_core.js'][1163]++;
  if ((! EVENT_SUPPORT_TOUCH)) {
    _$jscoverage['js/vs_core.js'][1165]++;
    if (((window.navigator.userAgent.indexOf("Android") !== -1) || (window.navigator.userAgent.indexOf("BlackBerry") !== -1))) {
      _$jscoverage['js/vs_core.js'][1167]++;
      EVENT_SUPPORT_TOUCH = true;
    }
  }
  _$jscoverage['js/vs_core.js'][1177]++;
  core.POINTER_START;
  _$jscoverage['js/vs_core.js'][1185]++;
  core.POINTER_MOVE;
  _$jscoverage['js/vs_core.js'][1193]++;
  core.POINTER_END;
  _$jscoverage['js/vs_core.js'][1201]++;
  core.POINTER_CANCEL;
  _$jscoverage['js/vs_core.js'][1203]++;
  if (EVENT_SUPPORT_TOUCH) {
    _$jscoverage['js/vs_core.js'][1205]++;
    core.POINTER_START = "touchstart";
    _$jscoverage['js/vs_core.js'][1206]++;
    core.POINTER_MOVE = "touchmove";
    _$jscoverage['js/vs_core.js'][1207]++;
    core.POINTER_END = "touchend";
    _$jscoverage['js/vs_core.js'][1208]++;
    core.POINTER_CANCEL = "touchcancel";
  }
  else {
    _$jscoverage['js/vs_core.js'][1212]++;
    core.POINTER_START = "mousedown";
    _$jscoverage['js/vs_core.js'][1213]++;
    core.POINTER_MOVE = "mousemove";
    _$jscoverage['js/vs_core.js'][1214]++;
    core.POINTER_END = "mouseup";
    _$jscoverage['js/vs_core.js'][1215]++;
    core.POINTER_CANCEL = "mouseup";
  }
  _$jscoverage['js/vs_core.js'][1241]++;
  var Event = (function (src, type, data) {
  _$jscoverage['js/vs_core.js'][1243]++;
  this.src = src;
  _$jscoverage['js/vs_core.js'][1244]++;
  this.srcTarget = src;
  _$jscoverage['js/vs_core.js'][1245]++;
  this.type = type;
  _$jscoverage['js/vs_core.js'][1246]++;
  this.data = data;
});
  _$jscoverage['js/vs_core.js'][1249]++;
  Event.prototype = {src: null, srcTarget: null, type: "", data: null, destructor: (function () {
  _$jscoverage['js/vs_core.js'][1288]++;
  (delete this.src);
  _$jscoverage['js/vs_core.js'][1289]++;
  (delete this.srcTarget);
  _$jscoverage['js/vs_core.js'][1290]++;
  (delete this.type);
  _$jscoverage['js/vs_core.js'][1291]++;
  (delete this.data);
})};
  _$jscoverage['js/vs_core.js'][1299]++;
  core.Event = Event;
  _$jscoverage['js/vs_core.js'][1300]++;
  core.FORCE_EVENT_PROPAGATION_DELAY = FORCE_EVENT_PROPAGATION_DELAY;
  _$jscoverage['js/vs_core.js'][1301]++;
  core.EVENT_SUPPORT_TOUCH = EVENT_SUPPORT_TOUCH;
  _$jscoverage['js/vs_core.js'][1324]++;
  function Handler(_spec, _obj, _func, _delay) {
    _$jscoverage['js/vs_core.js'][1326]++;
    this.spec = _spec;
    _$jscoverage['js/vs_core.js'][1327]++;
    this.obj = _obj;
    _$jscoverage['js/vs_core.js'][1328]++;
    this.delay = (FORCE_EVENT_PROPAGATION_DELAY? true: _delay);
    _$jscoverage['js/vs_core.js'][1329]++;
    if (util.isFunction(_func)) {
      _$jscoverage['js/vs_core.js'][1331]++;
      this.func_ptr = _func;
    }
    else {
      _$jscoverage['js/vs_core.js'][1335]++;
      this.func = _func;
    }
}
  _$jscoverage['js/vs_core.js'][1342]++;
  Handler.prototype.destructor = (function () {
  _$jscoverage['js/vs_core.js'][1344]++;
  (delete this.spec);
  _$jscoverage['js/vs_core.js'][1345]++;
  (delete this.obj);
  _$jscoverage['js/vs_core.js'][1346]++;
  (delete this.delay);
  _$jscoverage['js/vs_core.js'][1347]++;
  (delete this.func_ptr);
  _$jscoverage['js/vs_core.js'][1348]++;
  (delete this.func);
});
  _$jscoverage['js/vs_core.js'][1366]++;
  function EventSource(config) {
    _$jscoverage['js/vs_core.js'][1368]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][1369]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][1370]++;
    this.constructor = core.EventSource;
    _$jscoverage['js/vs_core.js'][1372]++;
    this.__bindings__ = {};
    _$jscoverage['js/vs_core.js'][1373]++;
    this.__node_binds__ = {};
}
  _$jscoverage['js/vs_core.js'][1377]++;
  EventSource.prototype = {__bindings__: null, __node_binds__: null, destructor: (function () {
  _$jscoverage['js/vs_core.js'][1401]++;
  var spec, list_bind, i, handler, binds;
  _$jscoverage['js/vs_core.js'][1403]++;
  for (spec in this.__bindings__) {
    _$jscoverage['js/vs_core.js'][1405]++;
    list_bind = this.__bindings__[spec];
    _$jscoverage['js/vs_core.js'][1406]++;
    if ((! list_bind)) {
      _$jscoverage['js/vs_core.js'][1406]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][1407]++;
    while (list_bind.length) {
      _$jscoverage['js/vs_core.js'][1409]++;
      handler = list_bind.pop();
      _$jscoverage['js/vs_core.js'][1410]++;
      util.free(handler);
}
    _$jscoverage['js/vs_core.js'][1412]++;
    (delete this.__bindings__[spec]);
}
  _$jscoverage['js/vs_core.js'][1415]++;
  (delete this.__bindings__);
  _$jscoverage['js/vs_core.js'][1417]++;
  for (spec in this.__node_binds__) {
    _$jscoverage['js/vs_core.js'][1419]++;
    binds = this.__node_binds__[spec];
    _$jscoverage['js/vs_core.js'][1420]++;
    if (((typeof binds) === "undefined")) {
      _$jscoverage['js/vs_core.js'][1422]++;
      console.warn(("vs.core.Object.destructor, no bind <" + spec + " exists."));
      _$jscoverage['js/vs_core.js'][1424]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][1426]++;
    for (i = 0; (i < binds.length); (i++)) {
      _$jscoverage['js/vs_core.js'][1428]++;
      data = binds[i];
      _$jscoverage['js/vs_core.js'][1429]++;
      data.n.removeEventListener(event, data.h);
}
}
  _$jscoverage['js/vs_core.js'][1432]++;
  (delete this.__node_binds__);
}), clone: (function (config, cloned_map) {
  _$jscoverage['js/vs_core.js'][1446]++;
  var obj = VSObject.prototype.clone.call(this, config, cloned_map);
  _$jscoverage['js/vs_core.js'][1447]++;
  obj.__bindings__ = {};
  _$jscoverage['js/vs_core.js'][1448]++;
  obj.__node_binds__ = {};
  _$jscoverage['js/vs_core.js'][1450]++;
  return obj;
}), bind: (function (spec, obj, func, delay) {
  _$jscoverage['js/vs_core.js'][1480]++;
  if (((! spec) || (! obj))) {
    _$jscoverage['js/vs_core.js'][1480]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1483]++;
  var handler = new Handler(spec, obj, func, delay), list_bind = this.__bindings__[spec];
  _$jscoverage['js/vs_core.js'][1485]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1487]++;
    list_bind = [];
    _$jscoverage['js/vs_core.js'][1488]++;
    this.__bindings__[spec] = list_bind;
  }
  _$jscoverage['js/vs_core.js'][1490]++;
  list_bind.push(handler);
  _$jscoverage['js/vs_core.js'][1492]++;
  return handler;
}), unbind: (function (spec, obj, func) {
  _$jscoverage['js/vs_core.js'][1510]++;
  var list_bind = this.__bindings__[spec], i = 0, bind;
  _$jscoverage['js/vs_core.js'][1511]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1511]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1513]++;
  while ((i < list_bind.length)) {
    _$jscoverage['js/vs_core.js'][1515]++;
    bind = list_bind[i];
    _$jscoverage['js/vs_core.js'][1516]++;
    if ((bind.spec === spec)) {
      _$jscoverage['js/vs_core.js'][1518]++;
      if ((bind.obj === obj)) {
        _$jscoverage['js/vs_core.js'][1520]++;
        if ((util.isString(func) || util.isFunction(func))) {
          _$jscoverage['js/vs_core.js'][1522]++;
          if (((bind.func === func) || (bind.func_ptr === func))) {
            _$jscoverage['js/vs_core.js'][1524]++;
            list_bind.remove(i);
            _$jscoverage['js/vs_core.js'][1525]++;
            util.free(bind);
          }
          else {
            _$jscoverage['js/vs_core.js'][1527]++;
            (i++);
          }
        }
        else {
          _$jscoverage['js/vs_core.js'][1531]++;
          list_bind.remove(i);
          _$jscoverage['js/vs_core.js'][1532]++;
          util.free(bind);
        }
      }
      else {
        _$jscoverage['js/vs_core.js'][1535]++;
        (i++);
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][1537]++;
      (i++);
    }
}
}), propagate: (function (type, data, srcTarget, delay) {
  _$jscoverage['js/vs_core.js'][1559]++;
  var list_bind = this.__bindings__[type], event, i, handler, func;
  _$jscoverage['js/vs_core.js'][1560]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][1562]++;
    if (this.__parent) {
      _$jscoverage['js/vs_core.js'][1564]++;
      if ((! srcTarget)) {
        _$jscoverage['js/vs_core.js'][1564]++;
        srcTarget = this;
      }
      _$jscoverage['js/vs_core.js'][1565]++;
      this.__parent.propagate(type, data, srcTarget);
    }
    _$jscoverage['js/vs_core.js'][1567]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1569]++;
  event = new Event(this, type, data);
  _$jscoverage['js/vs_core.js'][1570]++;
  if (srcTarget) {
    _$jscoverage['js/vs_core.js'][1570]++;
    event.srcTarget = srcTarget;
  }
  _$jscoverage['js/vs_core.js'][1572]++;
  i = list_bind.length;
  _$jscoverage['js/vs_core.js'][1573]++;
  try {
    _$jscoverage['js/vs_core.js'][1575]++;
    func = (function () {
  _$jscoverage['js/vs_core.js'][1577]++;
  if (handler.func_ptr) {
    _$jscoverage['js/vs_core.js'][1580]++;
    handler.func_ptr.call(handler.obj, event);
  }
  else {
    _$jscoverage['js/vs_core.js'][1582]++;
    if (handler.func) {
      _$jscoverage['js/vs_core.js'][1584]++;
      (handler.obj[handler.func])(event);
    }
    else {
      _$jscoverage['js/vs_core.js'][1588]++;
      handler.obj.notify(event);
    }
  }
});
    _$jscoverage['js/vs_core.js'][1592]++;
    while ((i--)) {
      _$jscoverage['js/vs_core.js'][1595]++;
      handler = list_bind[i];
      _$jscoverage['js/vs_core.js'][1597]++;
      if ((delay || handler.delay)) {
        _$jscoverage['js/vs_core.js'][1597]++;
        window.setTimeout(func, 0);
      }
      else {
        _$jscoverage['js/vs_core.js'][1598]++;
        func.call(this);
      }
}
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1603]++;
    console.error(e);
  }
}), notify: (function (event) {
  _$jscoverage['js/vs_core.js'][1618]++;
  this.propagate(event.type, event.data);
}), nodeBind: (function (node, event, func_s, modifiers) {
  _$jscoverage['js/vs_core.js'][1637]++;
  if ((! node)) {
    _$jscoverage['js/vs_core.js'][1637]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1638]++;
  if ((! util.isString(event))) {
    _$jscoverage['js/vs_core.js'][1638]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1640]++;
  var self = this, func = null, handler = null, binds, key;
  _$jscoverage['js/vs_core.js'][1642]++;
  if (((typeof func_s) === "undefined")) {
    _$jscoverage['js/vs_core.js'][1642]++;
    func_s = "notify";
  }
  else {
    _$jscoverage['js/vs_core.js'][1643]++;
    if (util.isString(func_s)) {
      _$jscoverage['js/vs_core.js'][1645]++;
      if ((! util.isFunction(this[func_s]))) {
        _$jscoverage['js/vs_core.js'][1647]++;
        console.warn(("vs.core.Object.nodeBind, unknown function named: " + func_s));
        _$jscoverage['js/vs_core.js'][1649]++;
        return;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][1652]++;
      if ((! util.isFunction(func_s))) {
        _$jscoverage['js/vs_core.js'][1654]++;
        console.error("vs.core.Object.nodeBind, invalid func parameter");
        _$jscoverage['js/vs_core.js'][1655]++;
        return;
      }
      else {
        _$jscoverage['js/vs_core.js'][1659]++;
        func = func_s;
        _$jscoverage['js/vs_core.js'][1660]++;
        func_s = func.name;
      }
    }
  }
  _$jscoverage['js/vs_core.js'][1663]++;
  if (((! modifiers) || (modifiers === KEYBOARD.ANY_MASK))) {
    _$jscoverage['js/vs_core.js'][1668]++;
    handler = (function (event) {
  _$jscoverage['js/vs_core.js'][1673]++;
  try {
    _$jscoverage['js/vs_core.js'][1675]++;
    event.src = event.currentTarget;
    _$jscoverage['js/vs_core.js'][1676]++;
    event.data = event;
    _$jscoverage['js/vs_core.js'][1678]++;
    if ((! func)) {
      _$jscoverage['js/vs_core.js'][1678]++;
      func = self[func_s];
    }
    _$jscoverage['js/vs_core.js'][1679]++;
    func.call(self, event);
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1683]++;
    console.error(e);
  }
});
  }
  else {
    _$jscoverage['js/vs_core.js'][1689]++;
    handler = (function (event) {
  _$jscoverage['js/vs_core.js'][1692]++;
  event.stopPropagation();
  _$jscoverage['js/vs_core.js'][1694]++;
  try {
    _$jscoverage['js/vs_core.js'][1696]++;
    if (((! modifiers) && (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey))) {
      _$jscoverage['js/vs_core.js'][1698]++;
      return;
    }
    else {
      _$jscoverage['js/vs_core.js'][1699]++;
      if (((modifiers === KEYBOARD.ALT) && (! event.altKey))) {
        _$jscoverage['js/vs_core.js'][1700]++;
        return;
      }
      else {
        _$jscoverage['js/vs_core.js'][1701]++;
        if (((modifiers === KEYBOARD.CTRL) && (! event.ctrlKey))) {
          _$jscoverage['js/vs_core.js'][1702]++;
          return;
        }
        else {
          _$jscoverage['js/vs_core.js'][1703]++;
          if (((modifiers === KEYBOARD.SHIFT) && (! event.shiftKey))) {
            _$jscoverage['js/vs_core.js'][1704]++;
            return;
          }
          else {
            _$jscoverage['js/vs_core.js'][1705]++;
            if (((modifiers === KEYBOARD.META) && (! event.metaKey))) {
              _$jscoverage['js/vs_core.js'][1706]++;
              return;
            }
          }
        }
      }
    }
    _$jscoverage['js/vs_core.js'][1707]++;
    event.src = event.currentTarget;
    _$jscoverage['js/vs_core.js'][1708]++;
    event.data = event;
    _$jscoverage['js/vs_core.js'][1710]++;
    if ((! func)) {
      _$jscoverage['js/vs_core.js'][1710]++;
      func = self[func_s];
    }
    _$jscoverage['js/vs_core.js'][1711]++;
    func.call(self, event);
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][1715]++;
    console.error(e);
  }
});
  }
  _$jscoverage['js/vs_core.js'][1721]++;
  key = (event + func_s);
  _$jscoverage['js/vs_core.js'][1722]++;
  if ((! this.__node_binds__)) {
    _$jscoverage['js/vs_core.js'][1724]++;
    console.error("nodeBind impossible");
    _$jscoverage['js/vs_core.js'][1725]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1727]++;
  binds = this.__node_binds__[key];
  _$jscoverage['js/vs_core.js'][1728]++;
  if (((typeof binds) === "undefined")) {
    _$jscoverage['js/vs_core.js'][1730]++;
    binds = [];
    _$jscoverage['js/vs_core.js'][1731]++;
    this.__node_binds__[key] = binds;
  }
  _$jscoverage['js/vs_core.js'][1733]++;
  binds.push({n: node, h: handler});
  _$jscoverage['js/vs_core.js'][1736]++;
  node.addEventListener(event, handler, false);
}), nodeUnbind: (function (node, event, func_s) {
  _$jscoverage['js/vs_core.js'][1753]++;
  if ((! node)) {
    _$jscoverage['js/vs_core.js'][1753]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1754]++;
  if ((! util.isString(event))) {
    _$jscoverage['js/vs_core.js'][1754]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1756]++;
  var func = null, i, key, binds, data;
  _$jscoverage['js/vs_core.js'][1757]++;
  if (((typeof func_s) === "undefined")) {
    _$jscoverage['js/vs_core.js'][1757]++;
    func_s = "notify";
  }
  else {
    _$jscoverage['js/vs_core.js'][1758]++;
    if (util.isString(func_s)) {
      _$jscoverage['js/vs_core.js'][1760]++;
      if ((! util.isFunction(this[func_s]))) {
        _$jscoverage['js/vs_core.js'][1762]++;
        console.warn(("vs.core.Object.nodeUnbind, unknown function named: " + func_s));
        _$jscoverage['js/vs_core.js'][1763]++;
        return;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][1766]++;
      if ((! util.isFunction(func_s))) {
        _$jscoverage['js/vs_core.js'][1768]++;
        console.error("vs.core.Object.nodeBind, invalid func parameter");
        _$jscoverage['js/vs_core.js'][1769]++;
        return;
      }
      else {
        _$jscoverage['js/vs_core.js'][1773]++;
        func = func_s;
        _$jscoverage['js/vs_core.js'][1774]++;
        func_s = func.name;
      }
    }
  }
  _$jscoverage['js/vs_core.js'][1777]++;
  key = (event + func_s);
  _$jscoverage['js/vs_core.js'][1778]++;
  binds = this.__node_binds__[key];
  _$jscoverage['js/vs_core.js'][1779]++;
  if (((typeof binds) === "undefined")) {
    _$jscoverage['js/vs_core.js'][1781]++;
    console.warn(("vs.core.Object.nodeUnbind, no bind <" + event + "," + func_s + " exists."));
    _$jscoverage['js/vs_core.js'][1783]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][1785]++;
  for (i = 0; (i < binds.length);) {
    _$jscoverage['js/vs_core.js'][1787]++;
    data = binds[i];
    _$jscoverage['js/vs_core.js'][1788]++;
    if ((data.n === node)) {
      _$jscoverage['js/vs_core.js'][1790]++;
      node.removeEventListener(event, data.h);
      _$jscoverage['js/vs_core.js'][1791]++;
      binds.remove(i);
    }
    else {
      _$jscoverage['js/vs_core.js'][1795]++;
      (i++);
    }
}
  _$jscoverage['js/vs_core.js'][1800]++;
  node._object_ = undefined;
})};
  _$jscoverage['js/vs_core.js'][1891]++;
  util.extendClass(EventSource, VSObject);
  _$jscoverage['js/vs_core.js'][1897]++;
  core.EventSource = EventSource;
  _$jscoverage['js/vs_core.js'][1951]++;
  var KEYBOARD = new EventSource("__KEYBOARD__");
  _$jscoverage['js/vs_core.js'][1956]++;
  KEYBOARD._handler_set_down = false;
  _$jscoverage['js/vs_core.js'][1961]++;
  KEYBOARD._handler_set_up = false;
  _$jscoverage['js/vs_core.js'][1987]++;
  function KEYBOARD_bind(keyCode, obj, func, prevent) {
    _$jscoverage['js/vs_core.js'][1989]++;
    var handler = EventSource.prototype.bind.call(this, keyCode, obj, func), self = this;
    _$jscoverage['js/vs_core.js'][1991]++;
    if (prevent) {
      _$jscoverage['js/vs_core.js'][1991]++;
      handler.prevent = true;
    }
    _$jscoverage['js/vs_core.js'][1992]++;
    if ((keyCode > KEYBOARD.KEY_UP)) {
      _$jscoverage['js/vs_core.js'][1994]++;
      if ((! this._handler_set_up)) {
        _$jscoverage['js/vs_core.js'][1996]++;
        document.documentElement.addEventListener("keyup", (function (event) {
  _$jscoverage['js/vs_core.js'][1999]++;
  self.managePrevent(event.keyCode, event);
  _$jscoverage['js/vs_core.js'][2000]++;
  self.propagate((event.keyCode + KEYBOARD.KEY_UP), event);
}), false);
        _$jscoverage['js/vs_core.js'][2002]++;
        this._handler_set_up = true;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][2007]++;
      if ((! this._handler_set_down)) {
        _$jscoverage['js/vs_core.js'][2009]++;
        document.documentElement.addEventListener("keydown", (function (event) {
  _$jscoverage['js/vs_core.js'][2012]++;
  if (((event.ctrlKey || event.metaKey) && (! event.shiftKey) && (event.keyCode === KEYBOARD.Z))) {
    _$jscoverage['js/vs_core.js'][2015]++;
    self.propagate(KEYBOARD.UNDO);
    _$jscoverage['js/vs_core.js'][2016]++;
    event.preventDefault();
  }
  else {
    _$jscoverage['js/vs_core.js'][2018]++;
    if (((event.ctrlKey || event.metaKey) && event.shiftKey && (event.keyCode === KEYBOARD.Z))) {
      _$jscoverage['js/vs_core.js'][2021]++;
      self.propagate(KEYBOARD.REDO);
      _$jscoverage['js/vs_core.js'][2022]++;
      event.preventDefault();
    }
    else {
      _$jscoverage['js/vs_core.js'][2024]++;
      if (((event.ctrlKey || event.metaKey) && (! event.shiftKey) && (event.keyCode === KEYBOARD.S))) {
        _$jscoverage['js/vs_core.js'][2026]++;
        self.propagate(KEYBOARD.SAVE);
        _$jscoverage['js/vs_core.js'][2027]++;
        event.preventDefault();
      }
      else {
        _$jscoverage['js/vs_core.js'][2029]++;
        if (((event.ctrlKey || event.metaKey) && (! event.shiftKey) && event.keyCode)) {
          _$jscoverage['js/vs_core.js'][2031]++;
          self.managePrevent((KEYBOARD.META + event.keyCode), event);
          _$jscoverage['js/vs_core.js'][2032]++;
          self.propagate((KEYBOARD.META + event.keyCode));
        }
        else {
          _$jscoverage['js/vs_core.js'][2037]++;
          self.managePrevent(event.keyCode, event);
          _$jscoverage['js/vs_core.js'][2038]++;
          self.propagate(event.keyCode, event);
        }
      }
    }
  }
}), false);
        _$jscoverage['js/vs_core.js'][2041]++;
        this._handler_set_down = true;
      }
    }
}
  _$jscoverage['js/vs_core.js'][2044]++;
  ;
  _$jscoverage['js/vs_core.js'][2049]++;
  KEYBOARD.managePrevent = (function (type, event) {
  _$jscoverage['js/vs_core.js'][2051]++;
  var list_bind = this.__bindings__[type], i, handler;
  _$jscoverage['js/vs_core.js'][2052]++;
  if ((! list_bind)) {
    _$jscoverage['js/vs_core.js'][2052]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2054]++;
  for (i = 0; (i < list_bind.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2056]++;
    handler = list_bind[i];
    _$jscoverage['js/vs_core.js'][2057]++;
    if (handler.prevent) {
      _$jscoverage['js/vs_core.js'][2059]++;
      event.preventDefault();
      _$jscoverage['js/vs_core.js'][2060]++;
      return;
    }
}
});
  _$jscoverage['js/vs_core.js'][2065]++;
  KEYBOARD.KEY_UP = 1000;
  _$jscoverage['js/vs_core.js'][2066]++;
  KEYBOARD.ESC = 27;
  _$jscoverage['js/vs_core.js'][2067]++;
  KEYBOARD.ENTER = 13;
  _$jscoverage['js/vs_core.js'][2068]++;
  KEYBOARD.SPACE = 32;
  _$jscoverage['js/vs_core.js'][2069]++;
  KEYBOARD.BACKSPACE = 8;
  _$jscoverage['js/vs_core.js'][2070]++;
  KEYBOARD.SHIFT = 16;
  _$jscoverage['js/vs_core.js'][2071]++;
  KEYBOARD.CTRL = 17;
  _$jscoverage['js/vs_core.js'][2072]++;
  KEYBOARD.ALT = 18;
  _$jscoverage['js/vs_core.js'][2073]++;
  KEYBOARD.NUMLOCK = 144;
  _$jscoverage['js/vs_core.js'][2075]++;
  KEYBOARD.LEFT_ARROW = 37;
  _$jscoverage['js/vs_core.js'][2076]++;
  KEYBOARD.UP_ARROW = 38;
  _$jscoverage['js/vs_core.js'][2077]++;
  KEYBOARD.RIGHT_ARROW = 39;
  _$jscoverage['js/vs_core.js'][2078]++;
  KEYBOARD.DOWN_ARROW = 40;
  _$jscoverage['js/vs_core.js'][2080]++;
  KEYBOARD.L = 76;
  _$jscoverage['js/vs_core.js'][2081]++;
  KEYBOARD.S = 83;
  _$jscoverage['js/vs_core.js'][2082]++;
  KEYBOARD.Z = 90;
  _$jscoverage['js/vs_core.js'][2085]++;
  KEYBOARD.META = 2000;
  _$jscoverage['js/vs_core.js'][2086]++;
  KEYBOARD.ANY_MASK = 3000;
  _$jscoverage['js/vs_core.js'][2088]++;
  KEYBOARD.UNDO = 256;
  _$jscoverage['js/vs_core.js'][2089]++;
  KEYBOARD.REDO = 257;
  _$jscoverage['js/vs_core.js'][2090]++;
  KEYBOARD.SAVE = 258;
  _$jscoverage['js/vs_core.js'][2095]++;
  core.KEYBOARD = KEYBOARD;
  _$jscoverage['js/vs_core.js'][2096]++;
  core.KEYBOARD.bind = KEYBOARD_bind;
  _$jscoverage['js/vs_core.js'][2198]++;
  var Fsm = (function (owner) {
  _$jscoverage['js/vs_core.js'][2200]++;
  this.parent = core.EventSource;
  _$jscoverage['js/vs_core.js'][2201]++;
  this.parent(createId());
  _$jscoverage['js/vs_core.js'][2202]++;
  this.constructor = Fsm;
  _$jscoverage['js/vs_core.js'][2204]++;
  this.owner = owner;
  _$jscoverage['js/vs_core.js'][2206]++;
  this._list_of_state = {};
  _$jscoverage['js/vs_core.js'][2207]++;
  this._list_input = new Array();
  _$jscoverage['js/vs_core.js'][2208]++;
  this._list_output = new Array();
  _$jscoverage['js/vs_core.js'][2210]++;
  this._initial_state = "";
  _$jscoverage['js/vs_core.js'][2211]++;
  this._current_state = "";
  _$jscoverage['js/vs_core.js'][2213]++;
  this._inputs = {};
  _$jscoverage['js/vs_core.js'][2214]++;
  this._output_action = {};
});
  _$jscoverage['js/vs_core.js'][2217]++;
  Fsm.prototype = {destructor: (function () {
  _$jscoverage['js/vs_core.js'][2225]++;
  (delete this._list_of_state);
  _$jscoverage['js/vs_core.js'][2227]++;
  this.owner = undefined;
  _$jscoverage['js/vs_core.js'][2229]++;
  (delete this._list_of_state);
  _$jscoverage['js/vs_core.js'][2230]++;
  (delete this._list_input);
  _$jscoverage['js/vs_core.js'][2231]++;
  (delete this._list_output);
  _$jscoverage['js/vs_core.js'][2232]++;
  (delete this._inputs);
  _$jscoverage['js/vs_core.js'][2233]++;
  (delete this._output_action);
}), clone: (function (object, cloned_map) {
  _$jscoverage['js/vs_core.js'][2246]++;
  var obj = core.EventSource.prototype.clone.call(this, null, cloned_map);
  _$jscoverage['js/vs_core.js'][2248]++;
  obj.owner = object;
  _$jscoverage['js/vs_core.js'][2249]++;
  obj._current_state = "";
  _$jscoverage['js/vs_core.js'][2251]++;
  obj._inputs = {};
  _$jscoverage['js/vs_core.js'][2252]++;
  obj._output_action = {};
  _$jscoverage['js/vs_core.js'][2256]++;
  return obj;
}), initWithData: (function (states, inputs, outputs, transitions) {
  _$jscoverage['js/vs_core.js'][2274]++;
  if (((! states) || (! inputs) || (! outputs) || (! transitions))) {
    _$jscoverage['js/vs_core.js'][2274]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2276]++;
  for (var i = 0; (i < states.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2277]++;
    this.addState(states[i]);
}
  _$jscoverage['js/vs_core.js'][2279]++;
  for (var i = 0; (i < inputs.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2280]++;
    this.addInput(inputs[i]);
}
  _$jscoverage['js/vs_core.js'][2282]++;
  for (var i = 0; (i < outputs.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2283]++;
    this.addOutput(outputs[i]);
}
  _$jscoverage['js/vs_core.js'][2285]++;
  for (var i = 0; (i < transitions.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2287]++;
    this.addTransition(transitions[i].from, transitions[i].to, transitions[i].on, transitions[i].output);
}
}), initWithMatrix: (function (matrix) {
  _$jscoverage['js/vs_core.js'][2326]++;
  for (var i = 1; (i < matrix[0].length); (i++)) {
    _$jscoverage['js/vs_core.js'][2327]++;
    this.addState(matrix[0][i]);
}
  _$jscoverage['js/vs_core.js'][2330]++;
  for (var i = 1; (i < matrix.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2332]++;
    var from = matrix[i][0];
    _$jscoverage['js/vs_core.js'][2334]++;
    for (var j = 1; (j < matrix[0].length); (j++)) {
      _$jscoverage['js/vs_core.js'][2336]++;
      var to = matrix[0][j];
      _$jscoverage['js/vs_core.js'][2337]++;
      var i_o = matrix[i][j];
      _$jscoverage['js/vs_core.js'][2338]++;
      if (i_o) {
        _$jscoverage['js/vs_core.js'][2340]++;
        var io_a = i_o.split("/");
        _$jscoverage['js/vs_core.js'][2341]++;
        if (io_a[0]) {
          _$jscoverage['js/vs_core.js'][2341]++;
          this.addInput(io_a[0]);
        }
        _$jscoverage['js/vs_core.js'][2342]++;
        if (io_a[1]) {
          _$jscoverage['js/vs_core.js'][2342]++;
          this.addOutput(io_a[1]);
        }
        _$jscoverage['js/vs_core.js'][2344]++;
        this.addTransition(from, to, io_a[0], io_a[1]);
      }
}
}
}), addInput: (function (input) {
  _$jscoverage['js/vs_core.js'][2365]++;
  if (((! input) || this.existInput(input))) {
    _$jscoverage['js/vs_core.js'][2365]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2367]++;
  this._list_input.push(input);
}), getInputs: (function () {
  _$jscoverage['js/vs_core.js'][2380]++;
  return this._list_input.slice();
}), existInput: (function (input) {
  _$jscoverage['js/vs_core.js'][2394]++;
  if ((! input)) {
    _$jscoverage['js/vs_core.js'][2394]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2396]++;
  return (this._list_input.findItem(input) > -1);
}), addOutput: (function (output) {
  _$jscoverage['js/vs_core.js'][2413]++;
  if (((! output) || this.existOutput(output))) {
    _$jscoverage['js/vs_core.js'][2413]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2415]++;
  this._list_output.push(output);
}), getOutputs: (function () {
  _$jscoverage['js/vs_core.js'][2428]++;
  return this._list_output.slice();
}), existOutput: (function (output) {
  _$jscoverage['js/vs_core.js'][2442]++;
  if ((! output)) {
    _$jscoverage['js/vs_core.js'][2442]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2444]++;
  return (this._list_output.findItem(output) > -1);
}), addState: (function (name) {
  _$jscoverage['js/vs_core.js'][2460]++;
  if (((! name) || this.existState(name))) {
    _$jscoverage['js/vs_core.js'][2460]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2462]++;
  var state = {};
  _$jscoverage['js/vs_core.js'][2463]++;
  state.transitionEvents = {};
  _$jscoverage['js/vs_core.js'][2465]++;
  this._list_of_state[name] = state;
  _$jscoverage['js/vs_core.js'][2466]++;
  return true;
}), removeState: (function (name) {
  _$jscoverage['js/vs_core.js'][2479]++;
  if (((! name) || (! this.existState(name)))) {
    _$jscoverage['js/vs_core.js'][2479]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2481]++;
  (delete this._list_of_state[name]);
  _$jscoverage['js/vs_core.js'][2482]++;
  return true;
}), renameState: (function (old_name, new_name) {
  _$jscoverage['js/vs_core.js'][2496]++;
  if (((! old_name) || (! this.existState(old_name)))) {
    _$jscoverage['js/vs_core.js'][2496]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2497]++;
  if (((! new_name) || this.existState(new_name))) {
    _$jscoverage['js/vs_core.js'][2497]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2500]++;
  this._list_of_state[new_name] = this._list_of_state[old_name];
  _$jscoverage['js/vs_core.js'][2501]++;
  (delete this._list_of_state[old_name]);
  _$jscoverage['js/vs_core.js'][2504]++;
  if ((this._initial_state === old_name)) {
    _$jscoverage['js/vs_core.js'][2506]++;
    this._initial_state = new_name;
  }
  _$jscoverage['js/vs_core.js'][2510]++;
  for (var state_id in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2512]++;
    var state = this._list_of_state[state_id];
    _$jscoverage['js/vs_core.js'][2513]++;
    if ((state === null)) {
      _$jscoverage['js/vs_core.js'][2513]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][2515]++;
    for (var input in state.transitionEvents) {
      _$jscoverage['js/vs_core.js'][2517]++;
      var t = state.transitionEvents[input];
      _$jscoverage['js/vs_core.js'][2519]++;
      if ((t.to === old_name)) {
        _$jscoverage['js/vs_core.js'][2521]++;
        t.to = new_name;
      }
}
}
  _$jscoverage['js/vs_core.js'][2526]++;
  return true;
}), getListState: (function () {
  _$jscoverage['js/vs_core.js'][2539]++;
  var result = [];
  _$jscoverage['js/vs_core.js'][2541]++;
  for (var key in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2543]++;
    result.push(key);
}
  _$jscoverage['js/vs_core.js'][2545]++;
  return result;
}), existState: (function (state) {
  _$jscoverage['js/vs_core.js'][2559]++;
  if ((! state)) {
    _$jscoverage['js/vs_core.js'][2559]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2561]++;
  if (this._list_of_state[state]) {
    _$jscoverage['js/vs_core.js'][2561]++;
    return true;
  }
  _$jscoverage['js/vs_core.js'][2562]++;
  return false;
}), addTransition: (function (from, to, on, output) {
  _$jscoverage['js/vs_core.js'][2581]++;
  if (((! from) || (! this.existState(from)))) {
    _$jscoverage['js/vs_core.js'][2581]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2582]++;
  if (((! to) || (! this.existState(to)))) {
    _$jscoverage['js/vs_core.js'][2582]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2583]++;
  if (((! on) || (! this.existInput(on)))) {
    _$jscoverage['js/vs_core.js'][2583]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2585]++;
  var transition = {on: on, to: to, output: output};
  _$jscoverage['js/vs_core.js'][2590]++;
  this._list_of_state[from].transitionEvents[on] = transition;
}), removeTransitionFrom: (function (from, on) {
  _$jscoverage['js/vs_core.js'][2604]++;
  if (((! from) || (! this.existState(from)))) {
    _$jscoverage['js/vs_core.js'][2604]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2605]++;
  if (((! on) || (! this.existInput(on)))) {
    _$jscoverage['js/vs_core.js'][2605]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2607]++;
  var state = this._list_of_state[from];
  _$jscoverage['js/vs_core.js'][2608]++;
  if (state.transitionEvents[on]) {
    _$jscoverage['js/vs_core.js'][2610]++;
    (delete state.transitionEvents[on]);
  }
}), removeTransitionTo: (function (to, on) {
  _$jscoverage['js/vs_core.js'][2625]++;
  if (((! to) || (! this.existState(to)))) {
    _$jscoverage['js/vs_core.js'][2625]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2626]++;
  if (((! on) || (! this.existInput(on)))) {
    _$jscoverage['js/vs_core.js'][2626]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2629]++;
  for (var from in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2631]++;
    var state = this._list_of_state[from];
    _$jscoverage['js/vs_core.js'][2632]++;
    var t = state.transitionEvents[on];
    _$jscoverage['js/vs_core.js'][2633]++;
    if (((! t) || (t.to !== to))) {
      _$jscoverage['js/vs_core.js'][2633]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][2635]++;
    (delete state.transitionEvents[on]);
}
}), getTransionsToState: (function (to) {
  _$jscoverage['js/vs_core.js'][2650]++;
  if ((! this.existState(to))) {
    _$jscoverage['js/vs_core.js'][2650]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2652]++;
  var result = [];
  _$jscoverage['js/vs_core.js'][2654]++;
  for (var state_id in this._list_of_state) {
    _$jscoverage['js/vs_core.js'][2656]++;
    var state = this._list_of_state[state_id];
    _$jscoverage['js/vs_core.js'][2657]++;
    if ((state === null)) {
      _$jscoverage['js/vs_core.js'][2657]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][2659]++;
    for (var input in state.transitionEvents) {
      _$jscoverage['js/vs_core.js'][2661]++;
      var t = state.transitionEvents[input];
      _$jscoverage['js/vs_core.js'][2663]++;
      if ((t.to !== to)) {
        _$jscoverage['js/vs_core.js'][2663]++;
        continue;
      }
      _$jscoverage['js/vs_core.js'][2665]++;
      var tt = util.clone(t);
      _$jscoverage['js/vs_core.js'][2666]++;
      tt.from = state_id;
      _$jscoverage['js/vs_core.js'][2667]++;
      result.push(tt);
}
}
  _$jscoverage['js/vs_core.js'][2671]++;
  return result;
}), getTransionsFromState: (function (from) {
  _$jscoverage['js/vs_core.js'][2685]++;
  if ((! this.existState(from))) {
    _$jscoverage['js/vs_core.js'][2685]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2687]++;
  var result = [];
  _$jscoverage['js/vs_core.js'][2689]++;
  var state = this._list_of_state[from];
  _$jscoverage['js/vs_core.js'][2690]++;
  if ((state === null)) {
    _$jscoverage['js/vs_core.js'][2690]++;
    return null;
  }
  _$jscoverage['js/vs_core.js'][2692]++;
  for (var inputs in state.transitionEvents) {
    _$jscoverage['js/vs_core.js'][2694]++;
    var t = state.transitionEvents[inputs];
    _$jscoverage['js/vs_core.js'][2696]++;
    var tt = util.clone(t);
    _$jscoverage['js/vs_core.js'][2697]++;
    tt.from = from;
    _$jscoverage['js/vs_core.js'][2698]++;
    result.push(tt);
}
  _$jscoverage['js/vs_core.js'][2701]++;
  return result;
}), switchStates: (function (state_id1, state_id2) {
  _$jscoverage['js/vs_core.js'][2718]++;
  if ((state_id1 === state_id2)) {
    _$jscoverage['js/vs_core.js'][2718]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2720]++;
  if (((! this.existState(state_id1)) || (! this.existState(state_id2)))) {
    _$jscoverage['js/vs_core.js'][2721]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2725]++;
  var t_to_state1 = this.getTransionsToState(state_id1);
  _$jscoverage['js/vs_core.js'][2726]++;
  var t_from_state1 = this.getTransionsFromState(state_id1);
  _$jscoverage['js/vs_core.js'][2727]++;
  var t_to_state2 = this.getTransionsToState(state_id2);
  _$jscoverage['js/vs_core.js'][2728]++;
  var t_from_state2 = this.getTransionsFromState(state_id2);
  _$jscoverage['js/vs_core.js'][2732]++;
  for (var i = 0; (i < t_to_state1.length);) {
    _$jscoverage['js/vs_core.js'][2734]++;
    var t = t_to_state1[i];
    _$jscoverage['js/vs_core.js'][2735]++;
    if ((t.from === state_id2)) {
      _$jscoverage['js/vs_core.js'][2735]++;
      t_to_state1.remove(t);
    }
    else {
      _$jscoverage['js/vs_core.js'][2736]++;
      (i++);
    }
}
  _$jscoverage['js/vs_core.js'][2738]++;
  for (var i = 0; (i < t_from_state1.length);) {
    _$jscoverage['js/vs_core.js'][2740]++;
    var t = t_from_state1[i];
    _$jscoverage['js/vs_core.js'][2741]++;
    if ((t.to === state_id2)) {
      _$jscoverage['js/vs_core.js'][2741]++;
      t_from_state1.remove(t);
    }
    else {
      _$jscoverage['js/vs_core.js'][2742]++;
      (i++);
    }
}
  _$jscoverage['js/vs_core.js'][2746]++;
  for (var i = 0; (i < t_to_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2748]++;
    var t = t_to_state1[i];
    _$jscoverage['js/vs_core.js'][2749]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][2751]++;
  for (var i = 0; (i < t_from_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2753]++;
    var t = t_from_state1[i];
    _$jscoverage['js/vs_core.js'][2754]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][2756]++;
  for (var i = 0; (i < t_to_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2758]++;
    var t = t_to_state2[i];
    _$jscoverage['js/vs_core.js'][2759]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][2761]++;
  for (var i = 0; (i < t_from_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2763]++;
    var t = t_from_state2[i];
    _$jscoverage['js/vs_core.js'][2764]++;
    this.removeTransitionFrom(t.from, t.on);
}
  _$jscoverage['js/vs_core.js'][2768]++;
  for (var i = 0; (i < t_to_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2770]++;
    var t = t_to_state1[i];
    _$jscoverage['js/vs_core.js'][2772]++;
    var from = ((t.from === state_id2)? state_id1: t.from);
    _$jscoverage['js/vs_core.js'][2773]++;
    this.addTransition(from, state_id2, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][2775]++;
  for (var i = 0; (i < t_from_state1.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2777]++;
    var t = t_from_state1[i];
    _$jscoverage['js/vs_core.js'][2779]++;
    var to = ((t.from === state_id2)? state_id1: t.to);
    _$jscoverage['js/vs_core.js'][2780]++;
    this.addTransition(state_id2, to, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][2782]++;
  for (var i = 0; (i < t_to_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2784]++;
    var t = t_to_state2[i];
    _$jscoverage['js/vs_core.js'][2786]++;
    var from = ((t.from === state_id1)? state_id2: t.from);
    _$jscoverage['js/vs_core.js'][2787]++;
    this.addTransition(from, state_id1, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][2789]++;
  for (var i = 0; (i < t_from_state2.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2791]++;
    var t = t_from_state2[i];
    _$jscoverage['js/vs_core.js'][2793]++;
    var to = ((t.to === state_id1)? state_id2: t.to);
    _$jscoverage['js/vs_core.js'][2794]++;
    this.addTransition(state_id1, to, t.on, t.output);
}
  _$jscoverage['js/vs_core.js'][2797]++;
  if ((this._initial_state === state_id1)) {
    _$jscoverage['js/vs_core.js'][2798]++;
    this._initial_state = state_id2;
  }
  else {
    _$jscoverage['js/vs_core.js'][2799]++;
    if ((this._initial_state === state_id2)) {
      _$jscoverage['js/vs_core.js'][2800]++;
      this._initial_state = state_id1;
    }
  }
}), setInput: (function (on, src, event_spec) {
  _$jscoverage['js/vs_core.js'][2825]++;
  if (((! on) || (! src) || (! event_spec))) {
    _$jscoverage['js/vs_core.js'][2825]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2827]++;
  if (src.bind) {
    _$jscoverage['js/vs_core.js'][2829]++;
    src.bind(event_spec, this);
  }
  else {
    _$jscoverage['js/vs_core.js'][2831]++;
    if (src.addEventListener) {
      _$jscoverage['js/vs_core.js'][2833]++;
      this.nodeBind(src, event_spec);
    }
    else {
      _$jscoverage['js/vs_core.js'][2835]++;
      return;
    }
  }
  _$jscoverage['js/vs_core.js'][2837]++;
  var a = this._inputs[src];
  _$jscoverage['js/vs_core.js'][2838]++;
  if ((! a)) {
    _$jscoverage['js/vs_core.js'][2840]++;
    a = [];
    _$jscoverage['js/vs_core.js'][2841]++;
    this._inputs[src] = a;
  }
  _$jscoverage['js/vs_core.js'][2843]++;
  a.push([event_spec, on, src]);
}), setOutput: (function (output, action) {
  _$jscoverage['js/vs_core.js'][2865]++;
  if (((! output) || (! action))) {
    _$jscoverage['js/vs_core.js'][2865]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2867]++;
  this._output_action[output] = action;
}), activate: (function () {
  _$jscoverage['js/vs_core.js'][2886]++;
  if (((! this._initial_state) || (! this._list_of_state[this._initial_state]))) {
    _$jscoverage['js/vs_core.js'][2887]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2889]++;
  this.goTo(this._initial_state);
  _$jscoverage['js/vs_core.js'][2890]++;
  return true;
}), goTo: (function (state_id, output, event) {
  _$jscoverage['js/vs_core.js'][2911]++;
  var state = undefined;
  _$jscoverage['js/vs_core.js'][2913]++;
  if ((! this.existState(state_id))) {
    _$jscoverage['js/vs_core.js'][2914]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][2917]++;
  if (this._current_state) {
    _$jscoverage['js/vs_core.js'][2919]++;
    state = this._list_of_state[this._current_state];
  }
  _$jscoverage['js/vs_core.js'][2923]++;
  this._current_state = state_id;
  _$jscoverage['js/vs_core.js'][2925]++;
  if ((output && this._output_action[output])) {
    _$jscoverage['js/vs_core.js'][2927]++;
    var clb = this._output_action[output];
    _$jscoverage['js/vs_core.js'][2928]++;
    if ((clb instanceof Function)) {
      _$jscoverage['js/vs_core.js'][2930]++;
      clb.call(this.owner, event);
    }
    else {
      _$jscoverage['js/vs_core.js'][2932]++;
      if (util.isString(clb)) {
        _$jscoverage['js/vs_core.js'][2934]++;
        (this.owner[this._output_action[output]])(event);
      }
    }
  }
  _$jscoverage['js/vs_core.js'][2938]++;
  return true;
}), clear: (function () {
  _$jscoverage['js/vs_core.js'][2950]++;
  this._list_of_state = {};
  _$jscoverage['js/vs_core.js'][2952]++;
  (delete this._list_input);
  _$jscoverage['js/vs_core.js'][2953]++;
  (delete this._list_output);
  _$jscoverage['js/vs_core.js'][2955]++;
  this._list_input = new Array();
  _$jscoverage['js/vs_core.js'][2956]++;
  this._list_output = new Array();
  _$jscoverage['js/vs_core.js'][2958]++;
  this._initial_state = "";
  _$jscoverage['js/vs_core.js'][2961]++;
  for (var key in this._inputs) {
    _$jscoverage['js/vs_core.js'][2963]++;
    var a = this._inputs[key];
    _$jscoverage['js/vs_core.js'][2965]++;
    for (var i = 0; (i < a.length); (i++)) {
      _$jscoverage['js/vs_core.js'][2967]++;
      var src = a[i][2];
      _$jscoverage['js/vs_core.js'][2968]++;
      var event_spec = a[i][0];
      _$jscoverage['js/vs_core.js'][2969]++;
      if (src.bind) {
        _$jscoverage['js/vs_core.js'][2971]++;
        src.unbind(event_spec, this);
      }
      else {
        _$jscoverage['js/vs_core.js'][2973]++;
        if (src.addEventListener) {
          _$jscoverage['js/vs_core.js'][2975]++;
          this.nodeUnbind(src, event_spec);
        }
      }
}
}
  _$jscoverage['js/vs_core.js'][2980]++;
  this._current_state = "";
}), notify: (function (event) {
  _$jscoverage['js/vs_core.js'][2993]++;
  var a = this._inputs[event.src];
  _$jscoverage['js/vs_core.js'][2994]++;
  if ((! a)) {
    _$jscoverage['js/vs_core.js'][2994]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][2996]++;
  for (var i = 0; (i < a.length); (i++)) {
    _$jscoverage['js/vs_core.js'][2998]++;
    var spec = a[i][0], on = a[i][1];
    _$jscoverage['js/vs_core.js'][2999]++;
    if ((event.type !== spec)) {
      _$jscoverage['js/vs_core.js'][2999]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3001]++;
    if ((! this._list_of_state[this._current_state])) {
      _$jscoverage['js/vs_core.js'][3001]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3003]++;
    this.fsmNotify(on, event.data);
}
}), fsmNotify: (function (on, data, instant) {
  _$jscoverage['js/vs_core.js'][3018]++;
  if ((! this._list_of_state[this._current_state])) {
    _$jscoverage['js/vs_core.js'][3018]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3020]++;
  var transition = this._list_of_state[this._current_state].transitionEvents[on];
  _$jscoverage['js/vs_core.js'][3023]++;
  if ((! transition)) {
    _$jscoverage['js/vs_core.js'][3023]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3025]++;
  this.goTo(transition.to, transition.output, {on: on, data: data}, instant);
  _$jscoverage['js/vs_core.js'][3026]++;
  return true;
})};
  _$jscoverage['js/vs_core.js'][3029]++;
  util.extendClass(Fsm, EventSource);
  _$jscoverage['js/vs_core.js'][3035]++;
  util.defineClassProperty(Fsm, "initialState", {set: (function (state_id) {
  _$jscoverage['js/vs_core.js'][3045]++;
  if ((! state_id)) {
    _$jscoverage['js/vs_core.js'][3047]++;
    this._initial_state = undefined;
    _$jscoverage['js/vs_core.js'][3048]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3051]++;
  if ((! this.existState(state_id))) {
    _$jscoverage['js/vs_core.js'][3051]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3054]++;
  this._initial_state = state_id;
}), get: (function () {
  _$jscoverage['js/vs_core.js'][3062]++;
  return this._initial_state;
})});
  _$jscoverage['js/vs_core.js'][3072]++;
  core.Fsm = Fsm;
  _$jscoverage['js/vs_core.js'][3091]++;
  function DataFlow() {
    _$jscoverage['js/vs_core.js'][3093]++;
    this.dataflow_node = [];
    _$jscoverage['js/vs_core.js'][3094]++;
    this.dataflow_edges = {};
    _$jscoverage['js/vs_core.js'][3095]++;
    this.is_propagating = false;
    _$jscoverage['js/vs_core.js'][3096]++;
    this._node_link = {};
    _$jscoverage['js/vs_core.js'][3097]++;
    this.__shouldnt_propagate__ = 0;
}
  _$jscoverage['js/vs_core.js'][3100]++;
  DataFlow.prototype = {propagate_values: (function (id) {
  _$jscoverage['js/vs_core.js'][3104]++;
  var ids = this.dataflow_edges[id], k, j, obj, prop_in, prop_out, obj_next, connector;
  _$jscoverage['js/vs_core.js'][3106]++;
  if ((! ids)) {
    _$jscoverage['js/vs_core.js'][3106]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3108]++;
  obj = VSObject._obs[id];
  _$jscoverage['js/vs_core.js'][3110]++;
  for (k = 0; (k < ids.length); (k++)) {
    _$jscoverage['js/vs_core.js'][3112]++;
    obj_next = VSObject._obs[ids[k][0]];
    _$jscoverage['js/vs_core.js'][3113]++;
    if ((! obj_next)) {
      _$jscoverage['js/vs_core.js'][3113]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3115]++;
    connector = ids[k][2];
    _$jscoverage['js/vs_core.js'][3116]++;
    if (connector) {
      _$jscoverage['js/vs_core.js'][3119]++;
      for (j = 0; (j < connector.length); (j++)) {
        _$jscoverage['js/vs_core.js'][3121]++;
        prop_in = connector[j][0];
        _$jscoverage['js/vs_core.js'][3122]++;
        prop_out = connector[j][1];
        _$jscoverage['js/vs_core.js'][3124]++;
        var desc_in = obj.getPropertyDescriptor(prop_in);
        _$jscoverage['js/vs_core.js'][3125]++;
        var desc_out = obj_next.getPropertyDescriptor(prop_out);
        _$jscoverage['js/vs_core.js'][3127]++;
        if (((! desc_in) || (! desc_in.get))) {
          _$jscoverage['js/vs_core.js'][3129]++;
          prop_in = ("_" + util.underscore(prop_in));
          _$jscoverage['js/vs_core.js'][3130]++;
          if ((! obj.hasOwnProperty(prop_in))) {
            _$jscoverage['js/vs_core.js'][3132]++;
            continue;
          }
        }
        _$jscoverage['js/vs_core.js'][3135]++;
        if (((! desc_out) || (! desc_out.set))) {
          _$jscoverage['js/vs_core.js'][3137]++;
          prop_out = ("_" + util.underscore(prop_out));
          _$jscoverage['js/vs_core.js'][3138]++;
          if ((! obj_next.hasOwnProperty(prop_out))) {
            _$jscoverage['js/vs_core.js'][3140]++;
            continue;
          }
        }
        _$jscoverage['js/vs_core.js'][3144]++;
        obj_next[prop_out] = obj[prop_in];
}
      _$jscoverage['js/vs_core.js'][3147]++;
      obj_next.__should__call__has__changed__ = true;
    }
}
}), propagate: (function (_id) {
  _$jscoverage['js/vs_core.js'][3154]++;
  if ((this.is_propagating || this.__shouldnt_propagate__)) {
    _$jscoverage['js/vs_core.js'][3154]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3156]++;
  this.is_propagating = true;
  _$jscoverage['js/vs_core.js'][3158]++;
  var i = 0, obj;
  _$jscoverage['js/vs_core.js'][3159]++;
  if (_id) {
    _$jscoverage['js/vs_core.js'][3162]++;
    while (((i < this.dataflow_node.length) && (this.dataflow_node[i] !== _id))) {
      _$jscoverage['js/vs_core.js'][3163]++;
      (i++);
}
    _$jscoverage['js/vs_core.js'][3166]++;
    if ((i < (this.dataflow_node.length - 1))) {
      _$jscoverage['js/vs_core.js'][3168]++;
      this.propagate_values(_id);
      _$jscoverage['js/vs_core.js'][3169]++;
      (i++);
    }
  }
  _$jscoverage['js/vs_core.js'][3174]++;
  for (; (i < this.dataflow_node.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3176]++;
    obj = VSObject._obs[this.dataflow_node[i]];
    _$jscoverage['js/vs_core.js'][3177]++;
    if ((! obj)) {
      _$jscoverage['js/vs_core.js'][3177]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3179]++;
    if ((obj.__should__call__has__changed__ && obj.propertiesDidChange)) {
      _$jscoverage['js/vs_core.js'][3181]++;
      obj.propertiesDidChange();
      _$jscoverage['js/vs_core.js'][3182]++;
      obj.__should__call__has__changed__ = false;
    }
    _$jscoverage['js/vs_core.js'][3185]++;
    this.propagate_values(obj.id);
}
  _$jscoverage['js/vs_core.js'][3187]++;
  this.is_propagating = false;
}), build: (function () {
  _$jscoverage['js/vs_core.js'][3192]++;
  if (((! this._ref_node) || (! this._ref_edges))) {
    _$jscoverage['js/vs_core.js'][3192]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3194]++;
  var temp = [], i, ref, edges, edges_temp, edge, edge_temp;
  _$jscoverage['js/vs_core.js'][3195]++;
  for (i = 0; (i < this._ref_node.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3197]++;
    ref = this._ref_node[i];
    _$jscoverage['js/vs_core.js'][3198]++;
    if ((! this._node_link[ref])) {
      _$jscoverage['js/vs_core.js'][3201]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3204]++;
    temp.push(this._node_link[ref]);
}
  _$jscoverage['js/vs_core.js'][3206]++;
  this.dataflow_node = temp;
  _$jscoverage['js/vs_core.js'][3208]++;
  temp = {};
  _$jscoverage['js/vs_core.js'][3209]++;
  for (ref in this._ref_edges) {
    _$jscoverage['js/vs_core.js'][3211]++;
    if ((! this._node_link[ref])) {
      _$jscoverage['js/vs_core.js'][3214]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3217]++;
    edges = this._ref_edges[ref];
    _$jscoverage['js/vs_core.js'][3218]++;
    edges_temp = [];
    _$jscoverage['js/vs_core.js'][3219]++;
    for (i = 0; (i < edges.length); (i++)) {
      _$jscoverage['js/vs_core.js'][3221]++;
      edge = edges[i];
      _$jscoverage['js/vs_core.js'][3222]++;
      edge_temp = [3];
      _$jscoverage['js/vs_core.js'][3224]++;
      if ((! this._node_link[edge[0]])) {
        _$jscoverage['js/vs_core.js'][3227]++;
        continue;
      }
      _$jscoverage['js/vs_core.js'][3229]++;
      edge_temp[0] = this._node_link[edge[0]];
      _$jscoverage['js/vs_core.js'][3230]++;
      edge_temp[1] = edge[1];
      _$jscoverage['js/vs_core.js'][3231]++;
      edge_temp[2] = edge[2].slice();
      _$jscoverage['js/vs_core.js'][3233]++;
      edges_temp.push(edge_temp);
}
    _$jscoverage['js/vs_core.js'][3236]++;
    temp[this._node_link[ref]] = edges_temp;
}
  _$jscoverage['js/vs_core.js'][3238]++;
  this.dataflow_edges = temp;
}), register_ref_node: (function (data) {
  _$jscoverage['js/vs_core.js'][3243]++;
  if ((! data)) {
    _$jscoverage['js/vs_core.js'][3243]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3244]++;
  this._ref_node = data;
}), register_ref_edges: (function (data) {
  _$jscoverage['js/vs_core.js'][3249]++;
  if ((! data)) {
    _$jscoverage['js/vs_core.js'][3249]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][3250]++;
  this._ref_edges = data;
}), pausePropagation: (function () {
  _$jscoverage['js/vs_core.js'][3258]++;
  (this.__shouldnt_propagate__++);
}), restartPropagation: (function () {
  _$jscoverage['js/vs_core.js'][3266]++;
  (this.__shouldnt_propagate__--);
  _$jscoverage['js/vs_core.js'][3267]++;
  if ((this.__shouldnt_propagate__ < 0)) {
    _$jscoverage['js/vs_core.js'][3267]++;
    this.__shouldnt_propagate__ = 0;
  }
})};
  _$jscoverage['js/vs_core.js'][3272]++;
  var _df_node_to_def = {};
  _$jscoverage['js/vs_core.js'][3274]++;
  function _df_node_register(df_id, ref, id) {
    _$jscoverage['js/vs_core.js'][3276]++;
    if (((! df_id) || (! ref) || (! id))) {
      _$jscoverage['js/vs_core.js'][3276]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3277]++;
    var df = _df_node_to_def[df_id];
    _$jscoverage['js/vs_core.js'][3278]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3278]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3280]++;
    df._node_link[ref] = id;
    _$jscoverage['js/vs_core.js'][3281]++;
    _df_node_to_def[id] = df;
}
  _$jscoverage['js/vs_core.js'][3283]++;
  window._df_node_register = _df_node_register;
  _$jscoverage['js/vs_core.js'][3285]++;
  function _df_create(id, ref) {
    _$jscoverage['js/vs_core.js'][3287]++;
    var df = new DataFlow();
    _$jscoverage['js/vs_core.js'][3289]++;
    df.ref = ref;
    _$jscoverage['js/vs_core.js'][3290]++;
    _df_node_to_def[id] = df;
    _$jscoverage['js/vs_core.js'][3292]++;
    return df;
}
  _$jscoverage['js/vs_core.js'][3294]++;
  window._df_create = _df_create;
  _$jscoverage['js/vs_core.js'][3296]++;
  function _df_register_ref_node(id, data) {
    _$jscoverage['js/vs_core.js'][3298]++;
    if (((! id) || (! data))) {
      _$jscoverage['js/vs_core.js'][3298]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3300]++;
    var df = _df_node_to_def[id];
    _$jscoverage['js/vs_core.js'][3301]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3301]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3303]++;
    df.register_ref_node(data);
}
  _$jscoverage['js/vs_core.js'][3305]++;
  window._df_register_ref_node = _df_register_ref_node;
  _$jscoverage['js/vs_core.js'][3307]++;
  function _df_register_ref_edges(id, data) {
    _$jscoverage['js/vs_core.js'][3309]++;
    if (((! id) || (! data))) {
      _$jscoverage['js/vs_core.js'][3309]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3311]++;
    var df = _df_node_to_def[id];
    _$jscoverage['js/vs_core.js'][3312]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3312]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3314]++;
    df.register_ref_edges(data);
}
  _$jscoverage['js/vs_core.js'][3316]++;
  window._df_register_ref_edges = _df_register_ref_edges;
  _$jscoverage['js/vs_core.js'][3318]++;
  function _df_build(id) {
    _$jscoverage['js/vs_core.js'][3320]++;
    if ((! id)) {
      _$jscoverage['js/vs_core.js'][3320]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3322]++;
    var df = _df_node_to_def[id];
    _$jscoverage['js/vs_core.js'][3323]++;
    if ((! df)) {
      _$jscoverage['js/vs_core.js'][3323]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][3325]++;
    df.build();
}
  _$jscoverage['js/vs_core.js'][3327]++;
  window._df_build = _df_build;
  _$jscoverage['js/vs_core.js'][3332]++;
  core.DataFlow = DataFlow;
  _$jscoverage['js/vs_core.js'][3387]++;
  function Task(conf) {
    _$jscoverage['js/vs_core.js'][3389]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][3390]++;
    this.parent(conf);
    _$jscoverage['js/vs_core.js'][3391]++;
    this.constructor = Task;
}
  _$jscoverage['js/vs_core.js'][3392]++;
  ;
  _$jscoverage['js/vs_core.js'][3399]++;
  Task.STARTED = 1;
  _$jscoverage['js/vs_core.js'][3406]++;
  Task.STOPPED = 0;
  _$jscoverage['js/vs_core.js'][3413]++;
  Task.PAUSED = 2;
  _$jscoverage['js/vs_core.js'][3415]++;
  Task.prototype = {delegate: null, _state: Task.STOPPED, start: (function (param) {
}), stop: (function () {
}), pause: (function () {
})};
  _$jscoverage['js/vs_core.js'][3482]++;
  util.extendClass(Task, core.Object);
  _$jscoverage['js/vs_core.js'][3488]++;
  util.defineClassProperty(Task, "state", {get: (function () {
  _$jscoverage['js/vs_core.js'][3501]++;
  return this._state;
})});
  _$jscoverage['js/vs_core.js'][3562]++;
  function Task_PAR(tasksAndParams) {
    _$jscoverage['js/vs_core.js'][3564]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][3565]++;
    this.parent();
    _$jscoverage['js/vs_core.js'][3566]++;
    this.constructor = Task_PAR;
    _$jscoverage['js/vs_core.js'][3568]++;
    this._tasksAndParams = [];
    _$jscoverage['js/vs_core.js'][3570]++;
    if (arguments.length) {
      _$jscoverage['js/vs_core.js'][3570]++;
      this.setTasks(arguments);
    }
}
  _$jscoverage['js/vs_core.js'][3571]++;
  ;
  _$jscoverage['js/vs_core.js'][3573]++;
  Task_PAR.prototype = {_tasksAndParams: null, _tasksWillEnded: null, setTasks: (function (tasksAndParams) {
  _$jscoverage['js/vs_core.js'][3605]++;
  if ((this._state !== Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][3605]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3606]++;
  var i, taskAndparam, task, param;
  _$jscoverage['js/vs_core.js'][3608]++;
  this._tasksAndParams = [];
  _$jscoverage['js/vs_core.js'][3609]++;
  for (i = 0; (i < tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3611]++;
    taskAndparam = tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3612]++;
    if ((! taskAndparam)) {
      _$jscoverage['js/vs_core.js'][3612]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3614]++;
    param = null;
    _$jscoverage['js/vs_core.js'][3614]++;
    task = null;
    _$jscoverage['js/vs_core.js'][3616]++;
    if (util.isArray(taskAndparam)) {
      _$jscoverage['js/vs_core.js'][3618]++;
      if ((taskAndparam.length === 1)) {
        _$jscoverage['js/vs_core.js'][3620]++;
        task = taskAndparam[0];
      }
      else {
        _$jscoverage['js/vs_core.js'][3622]++;
        if ((taskAndparam.length === 2)) {
          _$jscoverage['js/vs_core.js'][3624]++;
          task = taskAndparam[0];
          _$jscoverage['js/vs_core.js'][3625]++;
          param = taskAndparam[1];
        }
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][3630]++;
      task = taskAndparam;
      _$jscoverage['js/vs_core.js'][3631]++;
      param = null;
    }
    _$jscoverage['js/vs_core.js'][3634]++;
    if ((! task)) {
      _$jscoverage['js/vs_core.js'][3636]++;
      console.warn("Undefined task");
      _$jscoverage['js/vs_core.js'][3637]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3640]++;
    if (((! task.start) || (! task.stop) || (! task.pause))) {
      _$jscoverage['js/vs_core.js'][3642]++;
      console.warn(("Invalid task: " + task.toString()));
      _$jscoverage['js/vs_core.js'][3643]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3646]++;
    this._tasksAndParams.push([task, param]);
}
}), start: (function (param) {
  _$jscoverage['js/vs_core.js'][3660]++;
  if ((this._state === Task.STARTED)) {
    _$jscoverage['js/vs_core.js'][3660]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3661]++;
  this._tasksWillEnded = this._tasksAndParams.length;
  _$jscoverage['js/vs_core.js'][3662]++;
  this._state = Task.STARTED;
  _$jscoverage['js/vs_core.js'][3664]++;
  var taskAndparam, i;
  _$jscoverage['js/vs_core.js'][3665]++;
  for (i = 0; (i < this._tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3667]++;
    taskAndparam = this._tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3669]++;
    taskAndparam[0].delegate = this;
    _$jscoverage['js/vs_core.js'][3670]++;
    taskAndparam[0].start((taskAndparam[1]? taskAndparam[1]: param));
}
  _$jscoverage['js/vs_core.js'][3673]++;
  return true;
}), stop: (function () {
  _$jscoverage['js/vs_core.js'][3684]++;
  if ((this._state === Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][3684]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3685]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3687]++;
  var taskAndparam, i;
  _$jscoverage['js/vs_core.js'][3688]++;
  for (i = 0; (i < this._tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3690]++;
    taskAndparam = this._tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3691]++;
    taskAndparam[0].stop();
}
  _$jscoverage['js/vs_core.js'][3694]++;
  return true;
}), pause: (function () {
  _$jscoverage['js/vs_core.js'][3705]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][3705]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3706]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][3708]++;
  var taskAndparam, i;
  _$jscoverage['js/vs_core.js'][3709]++;
  for (i = 0; (i < this._tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3711]++;
    taskAndparam = this._tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3712]++;
    taskAndparam[0].pause();
}
  _$jscoverage['js/vs_core.js'][3715]++;
  return true;
}), taskDidStop: (function (task) {
  _$jscoverage['js/vs_core.js'][3728]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3730]++;
  (this._tasksWillEnded--);
  _$jscoverage['js/vs_core.js'][3731]++;
  if ((this._tasksWillEnded === 0)) {
    _$jscoverage['js/vs_core.js'][3733]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][3734]++;
      this.delegate.taskDidEnd(this);
    }
  }
}), taskDidPause: (function (task) {
  _$jscoverage['js/vs_core.js'][3744]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3746]++;
  (this._tasksWillEnded--);
  _$jscoverage['js/vs_core.js'][3747]++;
  if ((this._tasksWillEnded === 0)) {
    _$jscoverage['js/vs_core.js'][3749]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][3750]++;
      this.delegate.taskDidEnd(this);
    }
  }
}), taskDidEnd: (function (task) {
  _$jscoverage['js/vs_core.js'][3760]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3762]++;
  (this._tasksWillEnded--);
  _$jscoverage['js/vs_core.js'][3763]++;
  if ((this._tasksWillEnded === 0)) {
    _$jscoverage['js/vs_core.js'][3765]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][3766]++;
      this.delegate.taskDidEnd(this);
    }
  }
})};
  _$jscoverage['js/vs_core.js'][3770]++;
  util.extendClass(Task_PAR, core.Object);
  _$jscoverage['js/vs_core.js'][3829]++;
  function Task_SEQ(tasksAndParams) {
    _$jscoverage['js/vs_core.js'][3831]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][3832]++;
    this.parent();
    _$jscoverage['js/vs_core.js'][3833]++;
    this.constructor = Task_SEQ;
    _$jscoverage['js/vs_core.js'][3835]++;
    this._tasksAndParams = [];
    _$jscoverage['js/vs_core.js'][3837]++;
    if (arguments.length) {
      _$jscoverage['js/vs_core.js'][3837]++;
      this.setTasks(arguments);
    }
}
  _$jscoverage['js/vs_core.js'][3838]++;
  ;
  _$jscoverage['js/vs_core.js'][3840]++;
  Task_SEQ.prototype = {_tasksAndParams: null, _nextTaskToStart: 0, _startParam: null, setTasks: (function (tasksAndParams) {
  _$jscoverage['js/vs_core.js'][3876]++;
  if ((this._state !== Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][3876]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3877]++;
  var i, taskAndparam, task, param;
  _$jscoverage['js/vs_core.js'][3879]++;
  this._tasksAndParams = [];
  _$jscoverage['js/vs_core.js'][3880]++;
  for (i = 0; (i < tasksAndParams.length); (i++)) {
    _$jscoverage['js/vs_core.js'][3882]++;
    taskAndparam = tasksAndParams[i];
    _$jscoverage['js/vs_core.js'][3883]++;
    if ((! taskAndparam)) {
      _$jscoverage['js/vs_core.js'][3883]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3885]++;
    param = null;
    _$jscoverage['js/vs_core.js'][3885]++;
    task = null;
    _$jscoverage['js/vs_core.js'][3887]++;
    if (util.isArray(taskAndparam)) {
      _$jscoverage['js/vs_core.js'][3889]++;
      if ((taskAndparam.length === 1)) {
        _$jscoverage['js/vs_core.js'][3891]++;
        task = taskAndparam[0];
      }
      else {
        _$jscoverage['js/vs_core.js'][3893]++;
        if ((taskAndparam.length === 2)) {
          _$jscoverage['js/vs_core.js'][3895]++;
          task = taskAndparam[0];
          _$jscoverage['js/vs_core.js'][3896]++;
          param = taskAndparam[1];
        }
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][3901]++;
      task = taskAndparam;
      _$jscoverage['js/vs_core.js'][3902]++;
      param = null;
    }
    _$jscoverage['js/vs_core.js'][3905]++;
    if ((! task)) {
      _$jscoverage['js/vs_core.js'][3907]++;
      console.warn("Undefined task");
      _$jscoverage['js/vs_core.js'][3908]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3911]++;
    if (((! task.start) || (! task.stop) || (! task.pause))) {
      _$jscoverage['js/vs_core.js'][3913]++;
      console.warn(("Invalid task: " + task.toString()));
      _$jscoverage['js/vs_core.js'][3914]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][3917]++;
    this._tasksAndParams.push([task, param]);
}
}), start: (function (param) {
  _$jscoverage['js/vs_core.js'][3930]++;
  if ((this._state === Task.STARTED)) {
    _$jscoverage['js/vs_core.js'][3930]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3931]++;
  this._state = Task.STARTED;
  _$jscoverage['js/vs_core.js'][3933]++;
  this._startParam = param;
  _$jscoverage['js/vs_core.js'][3935]++;
  var taskAndparam = this._tasksAndParams[this._nextTaskToStart];
  _$jscoverage['js/vs_core.js'][3936]++;
  if ((! taskAndparam)) {
    _$jscoverage['js/vs_core.js'][3936]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3938]++;
  (this._nextTaskToStart++);
  _$jscoverage['js/vs_core.js'][3939]++;
  taskAndparam[0].delegate = this;
  _$jscoverage['js/vs_core.js'][3940]++;
  taskAndparam[0].start((taskAndparam[1]? taskAndparam[1]: param));
  _$jscoverage['js/vs_core.js'][3942]++;
  return true;
}), stop: (function () {
  _$jscoverage['js/vs_core.js'][3953]++;
  if ((this._state === Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][3953]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3954]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3956]++;
  var taskAndparam = this._tasksAndParams[(this._nextTaskToStart - 1)];
  _$jscoverage['js/vs_core.js'][3957]++;
  if ((! taskAndparam)) {
    _$jscoverage['js/vs_core.js'][3957]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3959]++;
  this._nextTaskToStart = 0;
  _$jscoverage['js/vs_core.js'][3960]++;
  taskAndparam[0].stop();
  _$jscoverage['js/vs_core.js'][3962]++;
  return true;
}), pause: (function () {
  _$jscoverage['js/vs_core.js'][3974]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][3974]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3975]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][3977]++;
  var taskAndparam = this._tasksAndParams[(this._nextTaskToStart - 1)];
  _$jscoverage['js/vs_core.js'][3978]++;
  if ((! taskAndparam)) {
    _$jscoverage['js/vs_core.js'][3978]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][3980]++;
  taskAndparam[0].pause();
  _$jscoverage['js/vs_core.js'][3982]++;
  return true;
}), taskDidStop: (function (task) {
  _$jscoverage['js/vs_core.js'][3995]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][3997]++;
  if ((this._nextTaskToStart === 0)) {
    _$jscoverage['js/vs_core.js'][3998]++;
    this._nextTaskToStart = (this._nextTaskToStart - 1);
  }
  _$jscoverage['js/vs_core.js'][4000]++;
  if ((this.delegate && this.delegate.taskDidStop)) {
    _$jscoverage['js/vs_core.js'][4001]++;
    this.delegate.taskDidStop(this);
  }
}), taskDidPause: (function (task) {
  _$jscoverage['js/vs_core.js'][4010]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][4012]++;
  this._nextTaskToStart = (this._nextTaskToStart - 1);
  _$jscoverage['js/vs_core.js'][4014]++;
  if ((this.delegate && this.delegate.taskDidPause)) {
    _$jscoverage['js/vs_core.js'][4015]++;
    this.delegate.taskDidPause(this);
  }
}), taskDidEnd: (function (task) {
  _$jscoverage['js/vs_core.js'][4024]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4026]++;
  if ((this._nextTaskToStart < this._tasksAndParams.length)) {
    _$jscoverage['js/vs_core.js'][4029]++;
    this.start(this._startParam);
  }
  else {
    _$jscoverage['js/vs_core.js'][4033]++;
    this._nextTaskToStart = 0;
    _$jscoverage['js/vs_core.js'][4034]++;
    if ((this.delegate && this.delegate.taskDidEnd)) {
      _$jscoverage['js/vs_core.js'][4035]++;
      this.delegate.taskDidEnd(this);
    }
  }
})};
  _$jscoverage['js/vs_core.js'][4039]++;
  util.extendClass(Task_SEQ, core.Object);
  _$jscoverage['js/vs_core.js'][4061]++;
  function TaskWait(time) {
    _$jscoverage['js/vs_core.js'][4063]++;
    this.parent = core.Object;
    _$jscoverage['js/vs_core.js'][4064]++;
    this.parent();
    _$jscoverage['js/vs_core.js'][4065]++;
    this.constructor = TaskWait;
    _$jscoverage['js/vs_core.js'][4067]++;
    this.time = time;
}
  _$jscoverage['js/vs_core.js'][4068]++;
  ;
  _$jscoverage['js/vs_core.js'][4070]++;
  TaskWait.prototype = {_time: 0, _left_time: 0, _timer: null, _start_time: 0, start: (function () {
  _$jscoverage['js/vs_core.js'][4104]++;
  var self = this, time = this._time;
  _$jscoverage['js/vs_core.js'][4105]++;
  if ((this._state === Task.STARTED)) {
    _$jscoverage['js/vs_core.js'][4105]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4106]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][4107]++;
    time = this._left_time;
  }
  else {
    _$jscoverage['js/vs_core.js'][4109]++;
    this._left_time = time;
  }
  _$jscoverage['js/vs_core.js'][4111]++;
  this._state = Task.STARTED;
  _$jscoverage['js/vs_core.js'][4113]++;
  this._start_time = new Date().getTime();
  _$jscoverage['js/vs_core.js'][4114]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][4115]++;
  this._timer = setTimeout((function () {
  _$jscoverage['js/vs_core.js'][4117]++;
  self._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4118]++;
  if ((self.delegate && self.delegate.taskDidEnd)) {
    _$jscoverage['js/vs_core.js'][4119]++;
    self.delegate.taskDidEnd(self);
  }
}), time);
  _$jscoverage['js/vs_core.js'][4122]++;
  return true;
}), stop: (function () {
  _$jscoverage['js/vs_core.js'][4133]++;
  if ((this._state === Task.STOPPED)) {
    _$jscoverage['js/vs_core.js'][4133]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4134]++;
  this._state = Task.STOPPED;
  _$jscoverage['js/vs_core.js'][4136]++;
  clearTimeout(this._timer);
  _$jscoverage['js/vs_core.js'][4137]++;
  this._timer = null;
  _$jscoverage['js/vs_core.js'][4139]++;
  this._left_time = this._time;
  _$jscoverage['js/vs_core.js'][4141]++;
  if ((this.delegate && this.delegate.taskDidStop)) {
    _$jscoverage['js/vs_core.js'][4142]++;
    this.delegate.taskDidStop(this);
  }
  _$jscoverage['js/vs_core.js'][4144]++;
  return true;
}), pause: (function () {
  _$jscoverage['js/vs_core.js'][4156]++;
  if ((this._state === Task.PAUSED)) {
    _$jscoverage['js/vs_core.js'][4156]++;
    return false;
  }
  _$jscoverage['js/vs_core.js'][4157]++;
  this._state = Task.PAUSED;
  _$jscoverage['js/vs_core.js'][4159]++;
  this._left_time = ((this._left_time - new Date().getTime()) + this._start_time);
  _$jscoverage['js/vs_core.js'][4162]++;
  if ((this.delegate && this.delegate.taskDidPause)) {
    _$jscoverage['js/vs_core.js'][4163]++;
    this.delegate.taskDidPause(this);
  }
  _$jscoverage['js/vs_core.js'][4165]++;
  return true;
})};
  _$jscoverage['js/vs_core.js'][4168]++;
  util.extendClass(TaskWait, core.Object);
  _$jscoverage['js/vs_core.js'][4170]++;
  util.defineClassProperty(TaskWait, "state", {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4179]++;
  if ((! util.isNumber(v))) {
    _$jscoverage['js/vs_core.js'][4179]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4180]++;
  this._time = v;
})});
  _$jscoverage['js/vs_core.js'][4187]++;
  util.extend(core, {Task: Task, Task_PAR: Task_PAR, Task_SEQ: Task_SEQ, TaskWait: TaskWait});
  _$jscoverage['js/vs_core.js'][4230]++;
  function DeviceConfiguration() {
    _$jscoverage['js/vs_core.js'][4232]++;
    this.orientation = null;
    _$jscoverage['js/vs_core.js'][4233]++;
    this.deviceId = null;
    _$jscoverage['js/vs_core.js'][4234]++;
    this.targets = {};
    _$jscoverage['js/vs_core.js'][4236]++;
    this.os = DeviceConfiguration.OS_UNKNOWN;
    _$jscoverage['js/vs_core.js'][4237]++;
    this.screenResolution = DeviceConfiguration.SR_UNKNOWN;
    _$jscoverage['js/vs_core.js'][4238]++;
    this.screenRatio = 0;
}
  _$jscoverage['js/vs_core.js'][4245]++;
  DeviceConfiguration.OS_UNKNOWN = 0;
  _$jscoverage['js/vs_core.js'][4251]++;
  DeviceConfiguration.OS_WINDOWS = 1;
  _$jscoverage['js/vs_core.js'][4257]++;
  DeviceConfiguration.OS_MACOS = 2;
  _$jscoverage['js/vs_core.js'][4263]++;
  DeviceConfiguration.OS_LINUX = 4;
  _$jscoverage['js/vs_core.js'][4269]++;
  DeviceConfiguration.OS_IOS = 5;
  _$jscoverage['js/vs_core.js'][4275]++;
  DeviceConfiguration.OS_WP7 = 6;
  _$jscoverage['js/vs_core.js'][4281]++;
  DeviceConfiguration.OS_BLACK_BERRY = 7;
  _$jscoverage['js/vs_core.js'][4287]++;
  DeviceConfiguration.OS_SYMBIAN = 8;
  _$jscoverage['js/vs_core.js'][4293]++;
  DeviceConfiguration.OS_ANDROID = 9;
  _$jscoverage['js/vs_core.js'][4299]++;
  DeviceConfiguration.OS_MEEGO = 10;
  _$jscoverage['js/vs_core.js'][4307]++;
  DeviceConfiguration.SR_UNKNOWN = 0;
  _$jscoverage['js/vs_core.js'][4314]++;
  DeviceConfiguration.SR_QVGA = 1;
  _$jscoverage['js/vs_core.js'][4321]++;
  DeviceConfiguration.SR_WQVGA = 2;
  _$jscoverage['js/vs_core.js'][4328]++;
  DeviceConfiguration.SR_HVGA = 4;
  _$jscoverage['js/vs_core.js'][4335]++;
  DeviceConfiguration.SR_VGA = 5;
  _$jscoverage['js/vs_core.js'][4342]++;
  DeviceConfiguration.SR_WVGA = 6;
  _$jscoverage['js/vs_core.js'][4349]++;
  DeviceConfiguration.SR_FWVGA = 7;
  _$jscoverage['js/vs_core.js'][4356]++;
  DeviceConfiguration.SR_SVGA = 8;
  _$jscoverage['js/vs_core.js'][4363]++;
  DeviceConfiguration.SR_XGA = 9;
  _$jscoverage['js/vs_core.js'][4370]++;
  DeviceConfiguration.SR_N_HD = 10;
  _$jscoverage['js/vs_core.js'][4377]++;
  DeviceConfiguration.SR_Q_HD = 11;
  _$jscoverage['js/vs_core.js'][4384]++;
  DeviceConfiguration.SR_WXGA = 12;
  _$jscoverage['js/vs_core.js'][4387]++;
  DeviceConfiguration.prototype = {getOrientation: (function () {
  _$jscoverage['js/vs_core.js'][4405]++;
  return this.orientation;
}), setDeviceId: (function (did) {
  _$jscoverage['js/vs_core.js'][4414]++;
  if ((! util.isString(did))) {
    _$jscoverage['js/vs_core.js'][4414]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4416]++;
  this.deviceId = did;
  _$jscoverage['js/vs_core.js'][4418]++;
  if ((did.indexOf("wp7") != -1)) {
    _$jscoverage['js/vs_core.js'][4420]++;
    this.os = DeviceConfiguration.OS_WP7;
    _$jscoverage['js/vs_core.js'][4421]++;
    this.screenResolution = DeviceConfiguration.SR_WVGA;
    _$jscoverage['js/vs_core.js'][4422]++;
    this.screenRatio = 1.6000000000000001;
  }
  else {
    _$jscoverage['js/vs_core.js'][4424]++;
    if ((did.indexOf("iphone") != -1)) {
      _$jscoverage['js/vs_core.js'][4426]++;
      this.os = DeviceConfiguration.OS_IOS;
      _$jscoverage['js/vs_core.js'][4427]++;
      this.screenResolution = DeviceConfiguration.SR_HVGA;
      _$jscoverage['js/vs_core.js'][4428]++;
      this.screenRatio = 1.5;
    }
    else {
      _$jscoverage['js/vs_core.js'][4430]++;
      if ((did.indexOf("ipad") != -1)) {
        _$jscoverage['js/vs_core.js'][4432]++;
        this.os = DeviceConfiguration.OS_IOS;
        _$jscoverage['js/vs_core.js'][4433]++;
        this.screenResolution = DeviceConfiguration.SR_XGA;
        _$jscoverage['js/vs_core.js'][4434]++;
        this.screenRatio = 1.3333333333333333;
      }
      else {
        _$jscoverage['js/vs_core.js'][4436]++;
        if ((did.indexOf("nokia_s3") != -1)) {
          _$jscoverage['js/vs_core.js'][4438]++;
          this.os = DeviceConfiguration.OS_SYMBIAN;
          _$jscoverage['js/vs_core.js'][4439]++;
          this.screenResolution = DeviceConfiguration.SR_N_HD;
          _$jscoverage['js/vs_core.js'][4440]++;
          this.screenRatio = 1.3333333333333333;
        }
        else {
          _$jscoverage['js/vs_core.js'][4442]++;
          if ((did.indexOf("android") != -1)) {
            _$jscoverage['js/vs_core.js'][4444]++;
            this.os = DeviceConfiguration.OS_ANDROID;
            _$jscoverage['js/vs_core.js'][4445]++;
            if ((did.indexOf("_3_2") != -1)) {
              _$jscoverage['js/vs_core.js'][4445]++;
              this.screenRatio = 1.5;
            }
            else {
              _$jscoverage['js/vs_core.js'][4446]++;
              if ((did.indexOf("_16_10") != -1)) {
                _$jscoverage['js/vs_core.js'][4446]++;
                this.screenRatio = 1.6000000000000001;
              }
              else {
                _$jscoverage['js/vs_core.js'][4447]++;
                if ((did.indexOf("_16_9") != -1)) {
                  _$jscoverage['js/vs_core.js'][4447]++;
                  this.screenRatio = 1.7777777777777777;
                }
              }
            }
            _$jscoverage['js/vs_core.js'][4449]++;
            var width = window.screen.width;
            _$jscoverage['js/vs_core.js'][4450]++;
            var height = window.screen.height;
            _$jscoverage['js/vs_core.js'][4451]++;
            if ((width > height)) {
              _$jscoverage['js/vs_core.js'][4453]++;
              width = window.screen.height;
              _$jscoverage['js/vs_core.js'][4454]++;
              height = window.screen.width;
            }
            _$jscoverage['js/vs_core.js'][4457]++;
            this.screenResolution = DeviceConfiguration._getScreenResolutionCode(width, height);
          }
          else {
            _$jscoverage['js/vs_core.js'][4460]++;
            if ((did.indexOf("blackberry") != -1)) {
              _$jscoverage['js/vs_core.js'][4462]++;
              this.os = DeviceConfiguration.OS_BLACK_BERRY;
              _$jscoverage['js/vs_core.js'][4463]++;
              if (did.indexOf("_4_3")) {
                _$jscoverage['js/vs_core.js'][4463]++;
                this.screenRatio = 1.3333333333333333;
              }
              else {
                _$jscoverage['js/vs_core.js'][4464]++;
                if (did.indexOf("_3_2")) {
                  _$jscoverage['js/vs_core.js'][4464]++;
                  this.screenRatio = 1.5;
                }
                else {
                  _$jscoverage['js/vs_core.js'][4465]++;
                  if (did.indexOf("_16_10")) {
                    _$jscoverage['js/vs_core.js'][4465]++;
                    this.screenRatio = 1.6000000000000001;
                  }
                }
              }
              _$jscoverage['js/vs_core.js'][4467]++;
              var width = window.screen.width;
              _$jscoverage['js/vs_core.js'][4468]++;
              var height = window.screen.height;
              _$jscoverage['js/vs_core.js'][4470]++;
              this.screenResolution = DeviceConfiguration._getScreenResolutionCode(width, height);
            }
          }
        }
      }
    }
  }
}), setOrientation: (function (orientation, force) {
  _$jscoverage['js/vs_core.js'][4485]++;
  var pid, device, i, len, id, comp, width = window.innerWidth, height = window.innerHeight, t;
  _$jscoverage['js/vs_core.js'][4488]++;
  if ((this.orientation === orientation)) {
    _$jscoverage['js/vs_core.js'][4489]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4491]++;
  if ((width > height)) {
    _$jscoverage['js/vs_core.js'][4493]++;
    t = height;
    _$jscoverage['js/vs_core.js'][4494]++;
    height = width;
    _$jscoverage['js/vs_core.js'][4495]++;
    width = t;
  }
  _$jscoverage['js/vs_core.js'][4498]++;
  for (id in core.Object._obs) {
    _$jscoverage['js/vs_core.js'][4500]++;
    comp = core.Object._obs[id];
    _$jscoverage['js/vs_core.js'][4501]++;
    if ((! comp)) {
      _$jscoverage['js/vs_core.js'][4501]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4503]++;
    if (comp._orientationWillChange) {
      _$jscoverage['js/vs_core.js'][4504]++;
      comp._orientationWillChange(orientation);
    }
    _$jscoverage['js/vs_core.js'][4505]++;
    if (comp.orientationWillChange) {
      _$jscoverage['js/vs_core.js'][4506]++;
      comp.orientationWillChange(orientation);
    }
}
  _$jscoverage['js/vs_core.js'][4509]++;
  for (pid in this.targets) {
    _$jscoverage['js/vs_core.js'][4511]++;
    device = this.targets[pid];
    _$jscoverage['js/vs_core.js'][4512]++;
    if ((device.device !== this.deviceId)) {
      _$jscoverage['js/vs_core.js'][4512]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4515]++;
    if (((((orientation !== 0) && (orientation !== 180)) || (pid.indexOf("_p") === -1)) && (((orientation !== 90) && (orientation !== -90)) || (pid.indexOf("_l") === -1)))) {
      _$jscoverage['js/vs_core.js'][4518]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4520]++;
    this.setActiveStyleSheet(pid);
    _$jscoverage['js/vs_core.js'][4522]++;
    this.orientation = orientation;
    _$jscoverage['js/vs_core.js'][4527]++;
    var orientationDidChangeFct = (function () {
  _$jscoverage['js/vs_core.js'][4529]++;
  var id, comp;
  _$jscoverage['js/vs_core.js'][4530]++;
  for (id in core.Object._obs) {
    _$jscoverage['js/vs_core.js'][4532]++;
    comp = core.Object._obs[id];
    _$jscoverage['js/vs_core.js'][4533]++;
    if (((! comp) || (! comp.orientationDidChange))) {
      _$jscoverage['js/vs_core.js'][4533]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][4535]++;
    comp.orientationDidChange(orientation);
}
});
    _$jscoverage['js/vs_core.js'][4538]++;
    if ((! force)) {
      _$jscoverage['js/vs_core.js'][4540]++;
      setTimeout(orientationDidChangeFct, 100);
    }
    else {
      _$jscoverage['js/vs_core.js'][4544]++;
      orientationDidChangeFct.call(this);
    }
    _$jscoverage['js/vs_core.js'][4547]++;
    return pid;
}
}), setActiveStyleSheet: (function (pid) {
  _$jscoverage['js/vs_core.js'][4557]++;
  util.setActiveStyleSheet(pid);
  _$jscoverage['js/vs_core.js'][4558]++;
  window._current_platform_id = pid;
}), registerTargetId: (function (tid, conf) {
  _$jscoverage['js/vs_core.js'][4567]++;
  this.targets[tid] = conf;
})};
  _$jscoverage['js/vs_core.js'][4574]++;
  DeviceConfiguration._getScreenResolutionCode = (function (width, height) {
  _$jscoverage['js/vs_core.js'][4576]++;
  if (((width === 240) && (height === 320))) {
    _$jscoverage['js/vs_core.js'][4576]++;
    return DeviceConfiguration.SR_QVGA;
  }
  _$jscoverage['js/vs_core.js'][4577]++;
  if (((width === 240) && (height === 400))) {
    _$jscoverage['js/vs_core.js'][4577]++;
    return DeviceConfiguration.SR_WQVGA;
  }
  _$jscoverage['js/vs_core.js'][4578]++;
  if (((width === 320) && (height === 480))) {
    _$jscoverage['js/vs_core.js'][4578]++;
    return DeviceConfiguration.SR_HVGA;
  }
  _$jscoverage['js/vs_core.js'][4579]++;
  if (((width === 480) && (height === 640))) {
    _$jscoverage['js/vs_core.js'][4579]++;
    return DeviceConfiguration.SR_VGA;
  }
  _$jscoverage['js/vs_core.js'][4580]++;
  if (((width === 480) && (height === 800))) {
    _$jscoverage['js/vs_core.js'][4580]++;
    return DeviceConfiguration.SR_WVGA;
  }
  _$jscoverage['js/vs_core.js'][4581]++;
  if (((width === 320) && (height === 854))) {
    _$jscoverage['js/vs_core.js'][4581]++;
    return DeviceConfiguration.SR_WFVGA;
  }
  _$jscoverage['js/vs_core.js'][4582]++;
  if (((width === 600) && (height === 800))) {
    _$jscoverage['js/vs_core.js'][4582]++;
    return DeviceConfiguration.SR_SVGA;
  }
  _$jscoverage['js/vs_core.js'][4583]++;
  if (((width === 768) && (height === 1024))) {
    _$jscoverage['js/vs_core.js'][4583]++;
    return DeviceConfiguration.SR_XGA;
  }
  _$jscoverage['js/vs_core.js'][4584]++;
  if (((width === 360) && (height === 640))) {
    _$jscoverage['js/vs_core.js'][4584]++;
    return DeviceConfiguration.SR_N_HD;
  }
  _$jscoverage['js/vs_core.js'][4585]++;
  if (((width === 540) && (height === 960))) {
    _$jscoverage['js/vs_core.js'][4585]++;
    return DeviceConfiguration.SR_Q_HD;
  }
  _$jscoverage['js/vs_core.js'][4586]++;
  if (((width === 800) && (height === 1280))) {
    _$jscoverage['js/vs_core.js'][4586]++;
    return DeviceConfiguration.SR_WXGA;
  }
});
  _$jscoverage['js/vs_core.js'][4592]++;
  DeviceConfiguration._estimateScreenSize = (function (metric) {
  _$jscoverage['js/vs_core.js'][4594]++;
  var w = (metric.width / metric.xdpi);
  _$jscoverage['js/vs_core.js'][4595]++;
  var h = (metric.height / metric.ydpi);
  _$jscoverage['js/vs_core.js'][4596]++;
  var size = Math.sqrt(((w * w) + (h * h)));
  _$jscoverage['js/vs_core.js'][4598]++;
  if ((size < 5)) {
    _$jscoverage['js/vs_core.js'][4598]++;
    return 3;
  }
  _$jscoverage['js/vs_core.js'][4599]++;
  if ((size < 8)) {
    _$jscoverage['js/vs_core.js'][4599]++;
    return 7;
  }
  else {
    _$jscoverage['js/vs_core.js'][4600]++;
    return 10;
  }
});
  _$jscoverage['js/vs_core.js'][4603]++;
  if (((typeof window.deviceConfiguration) == "undefined")) {
    _$jscoverage['js/vs_core.js'][4605]++;
    window.deviceConfiguration = new DeviceConfiguration();
  }
  _$jscoverage['js/vs_core.js'][4612]++;
  core.DeviceConfiguration = DeviceConfiguration;
  _$jscoverage['js/vs_core.js'][4653]++;
  HTTPRequest = (function (config) {
  _$jscoverage['js/vs_core.js'][4655]++;
  this.parent = core.EventSource;
  _$jscoverage['js/vs_core.js'][4656]++;
  this.parent(config);
  _$jscoverage['js/vs_core.js'][4657]++;
  this.constructor = HTTPRequest;
});
  _$jscoverage['js/vs_core.js'][4660]++;
  HTTPRequest.prototype = {_url: "", _method: "GET", _login: "", _password: "", _content_type: "", send: (function (data) {
  _$jscoverage['js/vs_core.js'][4715]++;
  var xhr = new XMLHttpRequest();
  _$jscoverage['js/vs_core.js'][4717]++;
  this._response_text = null;
  _$jscoverage['js/vs_core.js'][4718]++;
  this._response_xml = null;
  _$jscoverage['js/vs_core.js'][4721]++;
  xhr.open(this._method, this._url, true, (this._login || null), (this._password || null));
  _$jscoverage['js/vs_core.js'][4722]++;
  xhr.setRequestHeader("Cache-Control", "no-cache");
  _$jscoverage['js/vs_core.js'][4723]++;
  xhr.setRequestHeader("Pragma", "no-cache");
  _$jscoverage['js/vs_core.js'][4725]++;
  if (this._content_type) {
    _$jscoverage['js/vs_core.js'][4726]++;
    xhr.setRequestHeader("Content-Type", this._content_type);
  }
  _$jscoverage['js/vs_core.js'][4728]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][4729]++;
  xhr.onreadystatechange = (function () {
  _$jscoverage['js/vs_core.js'][4731]++;
  if ((xhr.readyState === 4)) {
    _$jscoverage['js/vs_core.js'][4733]++;
    if ((xhr.status === 200)) {
      _$jscoverage['js/vs_core.js'][4735]++;
      if (xhr.responseText) {
        _$jscoverage['js/vs_core.js'][4737]++;
        self._response_text = xhr.responseText;
        _$jscoverage['js/vs_core.js'][4738]++;
        self._response_xml = xhr.responseXML;
        _$jscoverage['js/vs_core.js'][4740]++;
        self.propagateChange();
        _$jscoverage['js/vs_core.js'][4742]++;
        self.propagate("textload", this._response_text);
        _$jscoverage['js/vs_core.js'][4743]++;
        self.propagate("xmlload", this._response_xml);
      }
      else {
        _$jscoverage['js/vs_core.js'][4747]++;
        self.propagate("loaderror", "file not found.");
        _$jscoverage['js/vs_core.js'][4748]++;
        return false;
      }
    }
    else {
      _$jscoverage['js/vs_core.js'][4753]++;
      self.propagate("loaderror", xhr.status);
      _$jscoverage['js/vs_core.js'][4754]++;
      return false;
    }
  }
});
  _$jscoverage['js/vs_core.js'][4760]++;
  xhr.send(data);
})};
  _$jscoverage['js/vs_core.js'][4764]++;
  util.extendClass(HTTPRequest, core.EventSource);
  _$jscoverage['js/vs_core.js'][4770]++;
  util.defineClassProperties(HTTPRequest, {"url": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4779]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][4779]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4781]++;
  this._url = v;
})}, "method": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4793]++;
  if (((v != "GET") || (v != "POST"))) {
    _$jscoverage['js/vs_core.js'][4793]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4795]++;
  this._method = v;
})}, "login": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4807]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][4807]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4809]++;
  this._login = v;
})}, "password": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4821]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][4821]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4823]++;
  this._password = v;
})}, "contentType": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][4835]++;
  if ((! util.isString(v))) {
    _$jscoverage['js/vs_core.js'][4835]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][4837]++;
  this._content_type = v;
})}, "responseText": {get: (function () {
  _$jscoverage['js/vs_core.js'][4849]++;
  return this._response_text;
})}, "responseXML": {get: (function () {
  _$jscoverage['js/vs_core.js'][4861]++;
  return this._response_xml;
})}});
  _$jscoverage['js/vs_core.js'][4870]++;
  core.HTTPRequest = HTTPRequest;
  _$jscoverage['js/vs_core.js'][4904]++;
  function VSArray(config) {
    _$jscoverage['js/vs_core.js'][4906]++;
    this.parent = vs.core.Model;
    _$jscoverage['js/vs_core.js'][4907]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][4908]++;
    this.constructor = vs.core.Array;
}
  _$jscoverage['js/vs_core.js'][4911]++;
  VSArray.prototype = {_data: null, _model_class: null, initComponent: (function () {
  _$jscoverage['js/vs_core.js'][4931]++;
  this._data = [];
}), item: (function (index) {
  _$jscoverage['js/vs_core.js'][4948]++;
  return this._data[index];
}), _instanciateModel: (function (obj) {
  _$jscoverage['js/vs_core.js'][4958]++;
  if ((obj instanceof vs.core.Model)) {
    _$jscoverage['js/vs_core.js'][4958]++;
    return obj;
  }
  _$jscoverage['js/vs_core.js'][4959]++;
  if (((obj instanceof Object) && this._model_class)) {
    _$jscoverage['js/vs_core.js'][4961]++;
    try {
      _$jscoverage['js/vs_core.js'][4963]++;
      var _model = new (this._model_class)(obj);
      _$jscoverage['js/vs_core.js'][4964]++;
      _model.init();
      _$jscoverage['js/vs_core.js'][4965]++;
      return _model;
    }
    catch (e) {
      _$jscoverage['js/vs_core.js'][4969]++;
      console.error(e.toString());
    }
  }
  _$jscoverage['js/vs_core.js'][4973]++;
  return obj;
}), add: (function () {
  _$jscoverage['js/vs_core.js'][4987]++;
  var args = [], i = 0;
  _$jscoverage['js/vs_core.js'][4988]++;
  for (; (i < arguments.length); (i++)) {
    _$jscoverage['js/vs_core.js'][4989]++;
    args.push(this._instanciateModel(arguments[i]));
}
  _$jscoverage['js/vs_core.js'][4991]++;
  this._data.push.apply(this._data, args);
  _$jscoverage['js/vs_core.js'][4993]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][4993]++;
    this.change("add");
  }
  _$jscoverage['js/vs_core.js'][4995]++;
  return this.length;
}), addAtIndex: (function () {
  _$jscoverage['js/vs_core.js'][5009]++;
  if ((arguments.length < 2)) {
    _$jscoverage['js/vs_core.js'][5009]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5010]++;
  var args = [], i = 1;
  _$jscoverage['js/vs_core.js'][5011]++;
  for (; (i < arguments.length); (i++)) {
    _$jscoverage['js/vs_core.js'][5012]++;
    args.push(this._instanciateModel(arguments[i]));
}
  _$jscoverage['js/vs_core.js'][5014]++;
  this._data.splice.apply(this._data, args);
  _$jscoverage['js/vs_core.js'][5015]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5016]++;
    this.change("add", args[0], (args.length - 2));
  }
}), remove: (function (from, to) {
  _$jscoverage['js/vs_core.js'][5037]++;
  this._data.remove(from, to);
  _$jscoverage['js/vs_core.js'][5038]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5038]++;
    this.change("remove", from, to);
  }
}), removeAll: (function () {
  _$jscoverage['js/vs_core.js'][5048]++;
  this._data = [];
  _$jscoverage['js/vs_core.js'][5049]++;
  if (this.hasToPropagateChange()) {
    _$jscoverage['js/vs_core.js'][5049]++;
    this.change("removeall");
  }
}), indexOf: (function () {
  _$jscoverage['js/vs_core.js'][5061]++;
  throw "method not yet implemented";
}), toJSON: (function () {
  _$jscoverage['js/vs_core.js'][5079]++;
  var json = this._toJSON("{"), i = 0, obj;
  _$jscoverage['js/vs_core.js'][5081]++;
  json += ", \"data\": [";
  _$jscoverage['js/vs_core.js'][5082]++;
  for (; (i < this._data.length); (i++)) {
    _$jscoverage['js/vs_core.js'][5084]++;
    obj = this._data[i];
    _$jscoverage['js/vs_core.js'][5085]++;
    if ((! obj)) {
      _$jscoverage['js/vs_core.js'][5085]++;
      continue;
    }
    _$jscoverage['js/vs_core.js'][5086]++;
    if (obj.toJSON) {
      _$jscoverage['js/vs_core.js'][5086]++;
      json += obj.toJSON();
    }
    else {
      _$jscoverage['js/vs_core.js'][5087]++;
      json += JSON.stringify(obj);
    }
    _$jscoverage['js/vs_core.js'][5088]++;
    if ((i < (this._data.length - 1))) {
      _$jscoverage['js/vs_core.js'][5088]++;
      json += ",";
    }
}
  _$jscoverage['js/vs_core.js'][5091]++;
  json += "]}";
  _$jscoverage['js/vs_core.js'][5092]++;
  return json;
}), parseJSON: (function (json) {
  _$jscoverage['js/vs_core.js'][5105]++;
  try {
    _$jscoverage['js/vs_core.js'][5106]++;
    var obj = ((json && util.parseJSON(json)) || {}), i, key, _model, item;
    _$jscoverage['js/vs_core.js'][5108]++;
    for (key in obj) {
      _$jscoverage['js/vs_core.js'][5110]++;
      this._data = [];
      _$jscoverage['js/vs_core.js'][5111]++;
      if ((key == "data")) {
        _$jscoverage['js/vs_core.js'][5113]++;
        for (i = 0; (i < obj.data.length); (i++)) {
          _$jscoverage['js/vs_core.js'][5115]++;
          item = obj.data[i];
          _$jscoverage['js/vs_core.js'][5116]++;
          if (this._model_class) {
            _$jscoverage['js/vs_core.js'][5118]++;
            _model = new (this._model_class)();
            _$jscoverage['js/vs_core.js'][5119]++;
            _model.init();
            _$jscoverage['js/vs_core.js'][5121]++;
            for (key in item) {
              _$jscoverage['js/vs_core.js'][5121]++;
              _model[("_" + key)] = item[key];
}
            _$jscoverage['js/vs_core.js'][5122]++;
            this.add(_model);
          }
          else {
            _$jscoverage['js/vs_core.js'][5124]++;
            this.add(item);
          }
}
      }
      else {
        _$jscoverage['js/vs_core.js'][5127]++;
        this[("_" + key)] = obj[key];
      }
}
  }
  catch (e) {
    _$jscoverage['js/vs_core.js'][5132]++;
    console.error(("vs.core.Array.parseJSON failed. " + e.toString()));
  }
})};
  _$jscoverage['js/vs_core.js'][5136]++;
  util.extendClass(VSArray, core.Model);
  _$jscoverage['js/vs_core.js'][5142]++;
  util.defineClassProperties(VSArray, {"length": {get: (function () {
  _$jscoverage['js/vs_core.js'][5154]++;
  if ((! this.__i__)) {
    _$jscoverage['js/vs_core.js'][5154]++;
    throw "Component not initialized";
  }
  _$jscoverage['js/vs_core.js'][5155]++;
  return this._data.length;
})}, "modelClass": {set: (function (v) {
  _$jscoverage['js/vs_core.js'][5168]++;
  if ((! (v instanceof Function))) {
    _$jscoverage['js/vs_core.js'][5168]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5170]++;
  this._model_class = v;
})}});
  _$jscoverage['js/vs_core.js'][5179]++;
  core.Array = VSArray;
  _$jscoverage['js/vs_core.js'][5215]++;
  function DataStorage(config) {
    _$jscoverage['js/vs_core.js'][5217]++;
    this.parent = core.EventSource;
    _$jscoverage['js/vs_core.js'][5218]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][5219]++;
    this.constructor = vs.core.DataStorage;
    _$jscoverage['js/vs_core.js'][5221]++;
    this.__models__ = {};
}
  _$jscoverage['js/vs_core.js'][5224]++;
  DataStorage.prototype = {__models__: null, registerModel: (function (name, model) {
  _$jscoverage['js/vs_core.js'][5250]++;
  if (((! name) || (! model))) {
    _$jscoverage['js/vs_core.js'][5250]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5252]++;
  if (this.__models__[name]) {
    _$jscoverage['js/vs_core.js'][5253]++;
    error.log("Model with the name already registered.");
  }
  _$jscoverage['js/vs_core.js'][5255]++;
  this.__models__[name] = model;
  _$jscoverage['js/vs_core.js'][5257]++;
  model._sync_service_ = this;
}), removeModel: (function (name) {
  _$jscoverage['js/vs_core.js'][5271]++;
  if ((! name)) {
    _$jscoverage['js/vs_core.js'][5271]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5273]++;
  if ((! this.__models__[name])) {
    _$jscoverage['js/vs_core.js'][5273]++;
    return;
  }
  _$jscoverage['js/vs_core.js'][5275]++;
  (delete this.__models__[name]);
}), save: (function (name) {
}), load: (function (name) {
})};
  _$jscoverage['js/vs_core.js'][5306]++;
  util.extendClass(DataStorage, core.EventSource);
  _$jscoverage['js/vs_core.js'][5312]++;
  core.DataStorage = DataStorage;
  _$jscoverage['js/vs_core.js'][5359]++;
  function LocalStorage(config) {
    _$jscoverage['js/vs_core.js'][5361]++;
    this.parent = DataStorage;
    _$jscoverage['js/vs_core.js'][5362]++;
    this.parent(config);
    _$jscoverage['js/vs_core.js'][5363]++;
    this.constructor = vs.core.LocalStorage;
}
  _$jscoverage['js/vs_core.js'][5366]++;
  LocalStorage.prototype = {save: (function (name) {
  _$jscoverage['js/vs_core.js'][5390]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][5391]++;
  function _save(name) {
    _$jscoverage['js/vs_core.js'][5393]++;
    var json, model = self.__models__[name];
    _$jscoverage['js/vs_core.js'][5394]++;
    if ((! model)) {
      _$jscoverage['js/vs_core.js'][5394]++;
      return;
    }
    _$jscoverage['js/vs_core.js'][5396]++;
    try {
      _$jscoverage['js/vs_core.js'][5398]++;
      if (model.toJSON) {
        _$jscoverage['js/vs_core.js'][5398]++;
        json = model.toJSON();
      }
      else {
        _$jscoverage['js/vs_core.js'][5399]++;
        json = JSON.stringify(model);
      }
    }
    catch (e) {
      _$jscoverage['js/vs_core.js'][5403]++;
      error.log(e);
      _$jscoverage['js/vs_core.js'][5404]++;
      self.propagate("error", e);
    }
    _$jscoverage['js/vs_core.js'][5407]++;
    localStorage.setItem(name, json);
}
  _$jscoverage['js/vs_core.js'][5409]++;
  if (name) {
    _$jscoverage['js/vs_core.js'][5409]++;
    _save(name);
  }
  else {
    _$jscoverage['js/vs_core.js'][5410]++;
    for (var name = name in this.__models__) {
      _$jscoverage['js/vs_core.js'][5410]++;
      _save(name);
}
  }
  _$jscoverage['js/vs_core.js'][5412]++;
  self.propagate("save");
}), load: (function (name) {
  _$jscoverage['js/vs_core.js'][5425]++;
  var self = this;
  _$jscoverage['js/vs_core.js'][5426]++;
  function _load(name) {
    _$jscoverage['js/vs_core.js'][5428]++;
    try {
      _$jscoverage['js/vs_core.js'][5429]++;
      var json, model = self.__models__[name];
      _$jscoverage['js/vs_core.js'][5430]++;
      if ((! model)) {
        _$jscoverage['js/vs_core.js'][5430]++;
        return;
      }
      _$jscoverage['js/vs_core.js'][5432]++;
      var store = localStorage.getItem(name);
      _$jscoverage['js/vs_core.js'][5433]++;
      model.parseJSON(store);
    }
    catch (e) {
      _$jscoverage['js/vs_core.js'][5437]++;
      console.error(("LocalStorate.load failed. " + e.toString()));
    }
}
  _$jscoverage['js/vs_core.js'][5440]++;
  if (name) {
    _$jscoverage['js/vs_core.js'][5440]++;
    _load(name);
  }
  else {
    _$jscoverage['js/vs_core.js'][5441]++;
    for (var name = name in this.__models__) {
      _$jscoverage['js/vs_core.js'][5441]++;
      _load(name);
}
  }
  _$jscoverage['js/vs_core.js'][5443]++;
  self.propagate("load");
})};
  _$jscoverage['js/vs_core.js'][5446]++;
  util.extendClass(LocalStorage, DataStorage);
  _$jscoverage['js/vs_core.js'][5452]++;
  core.LocalStorage = LocalStorage;
})(window);
